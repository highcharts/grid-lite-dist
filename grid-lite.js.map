{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Grid v1.0.0-rc-1 (2025-03-07)\n * @module grid/grid-lite\n *\n * (c) 2009-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\t(root[\"_Grid\"] = factory(),module.exports = root[\"_Grid\"]);\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"grid/grid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\t(root[\"_Grid\"] = factory(),exports[\"grid\"] = root[\"_Grid\"]);\n\telse\n\t\t((root[\"Grid\"] && root[\"Grid\"].error(16, true)), root[\"Grid\"] = factory());\n})(typeof window === 'undefined' ? this : window, () => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \t// The require scope\n/******/ \tvar __webpack_require__ = {};\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ grid_lite_src)\n});\n\n;// ./code/grid/es-modules/Core/Globals.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Namespace\n *\n * */\n/**\n * Shared Highcharts properties.\n * @private\n */\nvar Globals;\n(function (Globals) {\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    Globals.SVG_NS = 'http://www.w3.org/2000/svg', Globals.product = 'Highcharts', Globals.version = '1.0.0-rc-1', Globals.win = (typeof window !== 'undefined' ?\n        window :\n        {}), // eslint-disable-line node/no-unsupported-features/es-builtins\n    Globals.doc = Globals.win.document, Globals.svg = !!Globals.doc?.createElementNS?.(Globals.SVG_NS, 'svg')?.createSVGRect, Globals.pageLang = Globals.doc?.documentElement?.closest('[lang]')?.lang, Globals.userAgent = Globals.win.navigator?.userAgent || '', Globals.isChrome = Globals.win.chrome, Globals.isFirefox = Globals.userAgent.indexOf('Firefox') !== -1, Globals.isMS = /(edge|msie|trident)/i.test(Globals.userAgent) && !Globals.win.opera, Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1, Globals.isTouchDevice = /(Mobile|Android|Windows Phone)/.test(Globals.userAgent), Globals.isWebKit = Globals.userAgent.indexOf('AppleWebKit') !== -1, Globals.deg2rad = Math.PI * 2 / 360, Globals.marginNames = [\n        'plotTop',\n        'marginRight',\n        'marginBottom',\n        'plotLeft'\n    ], Globals.noop = function () { }, Globals.supportsPassiveEvents = (function () {\n        // Checks whether the browser supports passive events, (#11353).\n        let supportsPassive = false;\n        // Object.defineProperty doesn't work on IE as well as passive\n        // events - instead of using polyfill, we can exclude IE totally.\n        if (!Globals.isMS) {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: function () {\n                    supportsPassive = true;\n                }\n            });\n            if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n            }\n        }\n        return supportsPassive;\n    }());\n    /**\n     * An array containing the current chart objects in the page. A chart's\n     * position in the array is preserved throughout the page's lifetime. When\n     * a chart is destroyed, the array item becomes `undefined`.\n     *\n     * @name Highcharts.charts\n     * @type {Array<Highcharts.Chart|undefined>}\n     */\n    Globals.charts = [];\n    /**\n     * A shared registry between all bundles to keep track of applied\n     * compositions.\n     * @private\n     */\n    Globals.composed = [];\n    /**\n     * A hook for defining additional date format specifiers. New\n     * specifiers are defined as key-value pairs by using the\n     * specifier as key, and a function which takes the timestamp as\n     * value. This function returns the formatted portion of the\n     * date.\n     *\n     * Using `dateFormats` is also a convenient way to define new keys for\n     * complex locale-aware date formats compatible with the\n     * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat)\n     * browser API, whenever the built-in formats are not sufficient.\n     *\n     * @sample highcharts/global/dateformats/\n     *         Adding support for week number\n     * @sample highcharts/global/dateformats-object/\n     *         A locale-aware date format using `Intl.DateTimeFormat`\n     *\n     * @name Highcharts.dateFormats\n     * @type {Record<string, Highcharts.TimeFormatCallbackFunction>}\n     */\n    Globals.dateFormats = {};\n    /**\n     * @private\n     * @deprecated\n     * @todo Use only `Core/Series/SeriesRegistry.seriesTypes`\n     */\n    Globals.seriesTypes = {};\n    /**\n     * @private\n     */\n    Globals.symbolSizes = {};\n    /* *\n     *\n     *  Properties\n     *\n     * */\n    // eslint-disable-next-line prefer-const\n    Globals.chartCount = 0;\n})(Globals || (Globals = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Core_Globals = (Globals);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Theme options that should get applied to the chart. In module mode it\n * might not be possible to change this property because of read-only\n * restrictions, instead use {@link Highcharts.setOptions}.\n *\n * @deprecated\n * @name Highcharts.theme\n * @type {Highcharts.Options}\n */\n(''); // Keeps doclets above in JS file\n\n;// ./code/grid/es-modules/Core/Utilities.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { charts, doc, win } = Core_Globals;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Provide error messages for debugging, with links to online explanation. This\n * function can be overridden to provide custom error handling.\n *\n * @sample highcharts/chart/highcharts-error/\n *         Custom error handler\n *\n * @function Highcharts.error\n *\n * @param {number|string} code\n *        The error code. See\n *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n *        for available codes. If it is a string, the error message is printed\n *        directly in the console.\n *\n * @param {boolean} [stop=false]\n *        Whether to throw an error or just log a warning in the console.\n *\n * @param {Highcharts.Chart} [chart]\n *        Reference to the chart that causes the error. Used in 'debugger'\n *        module to display errors directly on the chart.\n *        Important note: This argument is undefined for errors that lack\n *        access to the Chart instance. In such case, the error will be\n *        displayed on the last created chart.\n *\n * @param {Highcharts.Dictionary<string>} [params]\n *        Additional parameters for the generated message.\n *\n * @return {void}\n */\nfunction error(code, stop, chart, params) {\n    const severity = stop ? 'Highcharts error' : 'Highcharts warning';\n    if (code === 32) {\n        code = `${severity}: Deprecated member`;\n    }\n    const isCode = isNumber(code);\n    let message = isCode ?\n        `${severity} #${code}: www.highcharts.com/errors/${code}/` :\n        code.toString();\n    const defaultHandler = function () {\n        if (stop) {\n            throw new Error(message);\n        }\n        // Else ...\n        if (win.console &&\n            error.messages.indexOf(message) === -1 // Prevent console flooting\n        ) {\n            console.warn(message); // eslint-disable-line no-console\n        }\n    };\n    if (typeof params !== 'undefined') {\n        let additionalMessages = '';\n        if (isCode) {\n            message += '?';\n        }\n        objectEach(params, function (value, key) {\n            additionalMessages += `\\n - ${key}: ${value}`;\n            if (isCode) {\n                message += encodeURI(key) + '=' + encodeURI(value);\n            }\n        });\n        message += additionalMessages;\n    }\n    fireEvent(Core_Globals, 'displayError', { chart, code, message, params }, defaultHandler);\n    error.messages.push(message);\n}\n(function (error) {\n    error.messages = [];\n})(error || (error = {}));\n/**\n * Utility function to deep merge two or more objects and return a third object.\n * If the first argument is true, the contents of the second object is copied\n * into the first object. The merge function can also be used with a single\n * object argument to create a deep copy of an object.\n *\n * @function Highcharts.merge<T>\n *\n * @param {true | T} extendOrSource\n *        Whether to extend the left-side object,\n *        or the first object to merge as a deep copy.\n *\n * @param {...Array<object|undefined>} [sources]\n *        Object(s) to merge into the previous one.\n *\n * @return {T}\n *         The merged object. If the first argument is true, the return is the\n *         same as the second argument.\n */\nfunction merge(extendOrSource, ...sources) {\n    let i, args = [extendOrSource, ...sources], ret = {};\n    const doCopy = function (copy, original) {\n        // An object is replacing a primitive\n        if (typeof copy !== 'object') {\n            copy = {};\n        }\n        objectEach(original, function (value, key) {\n            // Prototype pollution (#14883)\n            if (key === '__proto__' || key === 'constructor') {\n                return;\n            }\n            // Copy the contents of objects, but not arrays or DOM nodes\n            if (isObject(value, true) &&\n                !isClass(value) &&\n                !isDOMElement(value)) {\n                copy[key] = doCopy(copy[key] || {}, value);\n                // Primitives and arrays are copied over directly\n            }\n            else {\n                copy[key] = original[key];\n            }\n        });\n        return copy;\n    };\n    // If first argument is true, copy into the existing object. Used in\n    // setOptions.\n    if (extendOrSource === true) {\n        ret = args[1];\n        args = Array.prototype.slice.call(args, 2);\n    }\n    // For each argument, extend the return\n    const len = args.length;\n    for (i = 0; i < len; i++) {\n        ret = doCopy(ret, args[i]);\n    }\n    return ret;\n}\n/**\n * Constrain a value to within a lower and upper threshold.\n *\n * @private\n * @param {number} value The initial value\n * @param {number} min The lower threshold\n * @param {number} max The upper threshold\n * @return {number} Returns a number value within min and max.\n */\nfunction clamp(value, min, max) {\n    return value > min ? value < max ? value : max : min;\n}\n/**\n * Utility for crisping a line position to the nearest full pixel depening on\n * the line width\n * @param {number} value       The raw pixel position\n * @param {number} lineWidth   The line width\n * @param {boolean} [inverted] Whether the containing group is inverted.\n *                             Crisping round numbers on the y-scale need to go\n *                             to the other side because the coordinate system\n *                             is flipped (scaleY is -1)\n * @return {number}            The pixel position to use for a crisp display\n */\nfunction crisp(value, lineWidth = 0, inverted) {\n    const mod = lineWidth % 2 / 2, inverter = inverted ? -1 : 1;\n    return (Math.round(value * inverter - mod) + mod) * inverter;\n}\n// eslint-disable-next-line valid-jsdoc\n/**\n * Return the deep difference between two objects. It can either return the new\n * properties, or optionally return the old values of new properties.\n * @private\n */\nfunction diffObjects(newer, older, keepOlder, collectionsWithUpdate) {\n    const ret = {};\n    /**\n     * Recurse over a set of options and its current values, and store the\n     * current values in the ret object.\n     */\n    function diff(newer, older, ret, depth) {\n        const keeper = keepOlder ? older : newer;\n        objectEach(newer, function (newerVal, key) {\n            if (!depth &&\n                collectionsWithUpdate &&\n                collectionsWithUpdate.indexOf(key) > -1 &&\n                older[key]) {\n                newerVal = splat(newerVal);\n                ret[key] = [];\n                // Iterate over collections like series, xAxis or yAxis and map\n                // the items by index.\n                for (let i = 0; i < Math.max(newerVal.length, older[key].length); i++) {\n                    // Item exists in current data (#6347)\n                    if (older[key][i]) {\n                        // If the item is missing from the new data, we need to\n                        // save the whole config structure. Like when\n                        // responsively updating from a dual axis layout to a\n                        // single axis and back (#13544).\n                        if (newerVal[i] === void 0) {\n                            ret[key][i] = older[key][i];\n                            // Otherwise, proceed\n                        }\n                        else {\n                            ret[key][i] = {};\n                            diff(newerVal[i], older[key][i], ret[key][i], depth + 1);\n                        }\n                    }\n                }\n            }\n            else if (isObject(newerVal, true) &&\n                !newerVal.nodeType // #10044\n            ) {\n                ret[key] = isArray(newerVal) ? [] : {};\n                diff(newerVal, older[key] || {}, ret[key], depth + 1);\n                // Delete empty nested objects\n                if (Object.keys(ret[key]).length === 0 &&\n                    // Except colorAxis which is a special case where the empty\n                    // object means it is enabled. Which is unfortunate and we\n                    // should try to find a better way.\n                    !(key === 'colorAxis' && depth === 0)) {\n                    delete ret[key];\n                }\n            }\n            else if (newer[key] !== older[key] ||\n                // If the newer key is explicitly undefined, keep it (#10525)\n                (key in newer && !(key in older))) {\n                if (key !== '__proto__' && key !== 'constructor') {\n                    ret[key] = keeper[key];\n                }\n            }\n        });\n    }\n    diff(newer, older, ret, 0);\n    return ret;\n}\n/**\n * Shortcut for parseInt\n *\n * @private\n * @function Highcharts.pInt\n *\n * @param {*} s\n *        any\n *\n * @param {number} [mag]\n *        Magnitude\n *\n * @return {number}\n *         number\n */\nfunction pInt(s, mag) {\n    return parseInt(s, mag || 10);\n}\n/**\n * Utility function to check for string type.\n *\n * @function Highcharts.isString\n *\n * @param {*} s\n *        The item to check.\n *\n * @return {boolean}\n *         True if the argument is a string.\n */\nfunction isString(s) {\n    return typeof s === 'string';\n}\n/**\n * Utility function to check if an item is an array.\n *\n * @function Highcharts.isArray\n *\n * @param {*} obj\n *        The item to check.\n *\n * @return {boolean}\n *         True if the argument is an array.\n */\nfunction isArray(obj) {\n    const str = Object.prototype.toString.call(obj);\n    return str === '[object Array]' || str === '[object Array Iterator]';\n}\n/**\n * Utility function to check if an item is of type object.\n *\n * @function Highcharts.isObject\n *\n * @param {*} obj\n *        The item to check.\n *\n * @param {boolean} [strict=false]\n *        Also checks that the object is not an array.\n *\n * @return {boolean}\n *         True if the argument is an object.\n */\nfunction isObject(obj, strict) {\n    return (!!obj &&\n        typeof obj === 'object' &&\n        (!strict || !isArray(obj))); // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n/**\n * Utility function to check if an Object is a HTML Element.\n *\n * @function Highcharts.isDOMElement\n *\n * @param {*} obj\n *        The item to check.\n *\n * @return {boolean}\n *         True if the argument is a HTML Element.\n */\nfunction isDOMElement(obj) {\n    return isObject(obj) && typeof obj.nodeType === 'number';\n}\n/**\n * Utility function to check if an Object is a class.\n *\n * @function Highcharts.isClass\n *\n * @param {object|undefined} obj\n *        The item to check.\n *\n * @return {boolean}\n *         True if the argument is a class.\n */\nfunction isClass(obj) {\n    const c = obj?.constructor;\n    return !!(isObject(obj, true) &&\n        !isDOMElement(obj) &&\n        (c?.name && c.name !== 'Object'));\n}\n/**\n * Utility function to check if an item is a number and it is finite (not NaN,\n * Infinity or -Infinity).\n *\n * @function Highcharts.isNumber\n *\n * @param {*} n\n *        The item to check.\n *\n * @return {boolean}\n *         True if the item is a finite number\n */\nfunction isNumber(n) {\n    return typeof n === 'number' && !isNaN(n) && n < Infinity && n > -Infinity;\n}\n/**\n * Remove the last occurence of an item from an array.\n *\n * @function Highcharts.erase\n *\n * @param {Array<*>} arr\n *        The array.\n *\n * @param {*} item\n *        The item to remove.\n *\n * @return {void}\n */\nfunction erase(arr, item) {\n    let i = arr.length;\n    while (i--) {\n        if (arr[i] === item) {\n            arr.splice(i, 1);\n            break;\n        }\n    }\n}\n/**\n * Insert a series or an axis in a collection with other items, either the\n * chart series or yAxis series or axis collections, in the correct order\n * according to the index option and whether it is internal. Used internally\n * when adding series and axes.\n *\n * @private\n * @function Highcharts.Chart#insertItem\n * @param  {Highcharts.Series|Highcharts.Axis} item\n *         The item to insert\n * @param  {Array<Highcharts.Series>|Array<Highcharts.Axis>} collection\n *         A collection of items, like `chart.series` or `xAxis.series`.\n * @return {number} The index of the series in the collection.\n */\nfunction insertItem(item, collection) {\n    const indexOption = item.options.index, length = collection.length;\n    let i;\n    for (\n    // Internal item (navigator) should always be pushed to the end\n    i = item.options.isInternal ? length : 0; i < length + 1; i++) {\n        if (\n        // No index option, reached the end of the collection,\n        // equivalent to pushing\n        !collection[i] ||\n            // Handle index option, the element to insert has lower index\n            (isNumber(indexOption) &&\n                indexOption < pick(collection[i].options.index, collection[i]._i)) ||\n            // Insert the new item before other internal items\n            // (navigator)\n            collection[i].options.isInternal) {\n            collection.splice(i, 0, item);\n            break;\n        }\n    }\n    return i;\n}\n/**\n * Adds an item to an array, if it is not present in the array.\n *\n * @function Highcharts.pushUnique\n *\n * @param {Array<unknown>} array\n * The array to add the item to.\n *\n * @param {unknown} item\n * The item to add.\n *\n * @return {boolean}\n * Returns true, if the item was not present and has been added.\n */\nfunction pushUnique(array, item) {\n    return array.indexOf(item) < 0 && !!array.push(item);\n}\n/**\n * Check if an object is null or undefined.\n *\n * @function Highcharts.defined\n *\n * @param {*} obj\n *        The object to check.\n *\n * @return {boolean}\n *         False if the object is null or undefined, otherwise true.\n */\nfunction defined(obj) {\n    return typeof obj !== 'undefined' && obj !== null;\n}\n/**\n * Set or get an attribute or an object of attributes.\n *\n * To use as a setter, pass a key and a value, or let the second argument be a\n * collection of keys and values. When using a collection, passing a value of\n * `null` or `undefined` will remove the attribute.\n *\n * To use as a getter, pass only a string as the second argument.\n *\n * @function Highcharts.attr\n *\n * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} elem\n *        The DOM element to receive the attribute(s).\n *\n * @param {string|Highcharts.HTMLAttributes|Highcharts.SVGAttributes} [keyOrAttribs]\n *        The property or an object of key-value pairs.\n *\n * @param {number|string} [value]\n *        The value if a single property is set.\n *\n * @return {string|null|undefined}\n *         When used as a getter, return the value.\n */\nfunction attr(elem, keyOrAttribs, value) {\n    const isGetter = isString(keyOrAttribs) && !defined(value);\n    let ret;\n    const attrSingle = (value, key) => {\n        // Set the value\n        if (defined(value)) {\n            elem.setAttribute(key, value);\n            // Get the value\n        }\n        else if (isGetter) {\n            ret = elem.getAttribute(key);\n            // IE7 and below cannot get class through getAttribute (#7850)\n            if (!ret && key === 'class') {\n                ret = elem.getAttribute(key + 'Name');\n            }\n            // Remove the value\n        }\n        else {\n            elem.removeAttribute(key);\n        }\n    };\n    // If keyOrAttribs is a string\n    if (isString(keyOrAttribs)) {\n        attrSingle(value, keyOrAttribs);\n        // Else if keyOrAttribs is defined, it is a hash of key/value pairs\n    }\n    else {\n        objectEach(keyOrAttribs, attrSingle);\n    }\n    return ret;\n}\n/**\n * Check if an element is an array, and if not, make it into an array.\n *\n * @function Highcharts.splat\n *\n * @param {*} obj\n *        The object to splat.\n *\n * @return {Array}\n *         The produced or original array.\n */\nfunction splat(obj) {\n    return isArray(obj) ? obj : [obj];\n}\n/**\n * Set a timeout if the delay is given, otherwise perform the function\n * synchronously.\n *\n * @function Highcharts.syncTimeout\n *\n * @param {Function} fn\n *        The function callback.\n *\n * @param {number} delay\n *        Delay in milliseconds.\n *\n * @param {*} [context]\n *        An optional context to send to the function callback.\n *\n * @return {number}\n *         An identifier for the timeout that can later be cleared with\n *         Highcharts.clearTimeout. Returns -1 if there is no timeout.\n */\nfunction syncTimeout(fn, delay, context) {\n    if (delay > 0) {\n        return setTimeout(fn, delay, context);\n    }\n    fn.call(0, context);\n    return -1;\n}\n/**\n * Internal clear timeout. The function checks that the `id` was not removed\n * (e.g. by `chart.destroy()`). For the details see\n * [issue #7901](https://github.com/highcharts/highcharts/issues/7901).\n *\n * @function Highcharts.clearTimeout\n *\n * @param {number|undefined} id\n * Id of a timeout.\n */\nfunction internalClearTimeout(id) {\n    if (defined(id)) {\n        clearTimeout(id);\n    }\n}\n/* eslint-disable valid-jsdoc */\n/**\n * Utility function to extend an object with the members of another.\n *\n * @function Highcharts.extend<T>\n *\n * @param {T|undefined} a\n *        The object to be extended.\n *\n * @param {Partial<T>} b\n *        The object to add to the first one.\n *\n * @return {T}\n *         Object a, the original object.\n */\nfunction extend(a, b) {\n    /* eslint-enable valid-jsdoc */\n    let n;\n    if (!a) {\n        a = {};\n    }\n    for (n in b) { // eslint-disable-line guard-for-in\n        a[n] = b[n];\n    }\n    return a;\n}\n/* eslint-disable valid-jsdoc */\n/**\n * Return the first value that is not null or undefined.\n *\n * @function Highcharts.pick<T>\n *\n * @param {...Array<T|null|undefined>} items\n *        Variable number of arguments to inspect.\n *\n * @return {T}\n *         The value of the first argument that is not null or undefined.\n */\nfunction pick() {\n    const args = arguments;\n    const length = args.length;\n    for (let i = 0; i < length; i++) {\n        const arg = args[i];\n        if (typeof arg !== 'undefined' && arg !== null) {\n            return arg;\n        }\n    }\n}\n/**\n * Set CSS on a given element.\n *\n * @function Highcharts.css\n *\n * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} el\n *        An HTML DOM element.\n *\n * @param {Highcharts.CSSObject} styles\n *        Style object with camel case property names.\n *\n * @return {void}\n */\nfunction css(el, styles) {\n    extend(el.style, styles);\n}\n/**\n * Utility function to create an HTML element with attributes and styles.\n *\n * @function Highcharts.createElement\n *\n * @param {string} tag\n *        The HTML tag.\n *\n * @param {Highcharts.HTMLAttributes} [attribs]\n *        Attributes as an object of key-value pairs.\n *\n * @param {Highcharts.CSSObject} [styles]\n *        Styles as an object of key-value pairs.\n *\n * @param {Highcharts.HTMLDOMElement} [parent]\n *        The parent HTML object.\n *\n * @param {boolean} [nopad=false]\n *        If true, remove all padding, border and margin.\n *\n * @return {Highcharts.HTMLDOMElement}\n *         The created DOM element.\n */\nfunction createElement(tag, attribs, styles, parent, nopad) {\n    const el = doc.createElement(tag);\n    if (attribs) {\n        extend(el, attribs);\n    }\n    if (nopad) {\n        css(el, { padding: '0', border: 'none', margin: '0' });\n    }\n    if (styles) {\n        css(el, styles);\n    }\n    if (parent) {\n        parent.appendChild(el);\n    }\n    return el;\n}\n// eslint-disable-next-line valid-jsdoc\n/**\n * Extend a prototyped class by new members.\n *\n * @deprecated\n * @function Highcharts.extendClass<T>\n *\n * @param {Highcharts.Class<T>} parent\n *        The parent prototype to inherit.\n *\n * @param {Highcharts.Dictionary<*>} members\n *        A collection of prototype members to add or override compared to the\n *        parent prototype.\n *\n * @return {Highcharts.Class<T>}\n *         A new prototype.\n */\nfunction extendClass(parent, members) {\n    const obj = (function () { });\n    obj.prototype = new parent(); // eslint-disable-line new-cap\n    extend(obj.prototype, members);\n    return obj;\n}\n/**\n * Left-pad a string to a given length by adding a character repetitively.\n *\n * @function Highcharts.pad\n *\n * @param {number} number\n *        The input string or number.\n *\n * @param {number} [length]\n *        The desired string length.\n *\n * @param {string} [padder=0]\n *        The character to pad with.\n *\n * @return {string}\n *         The padded string.\n */\nfunction pad(number, length, padder) {\n    return new Array((length || 2) +\n        1 -\n        String(number)\n            .replace('-', '')\n            .length).join(padder || '0') + number;\n}\n/**\n * Return a length based on either the integer value, or a percentage of a base.\n *\n * @function Highcharts.relativeLength\n *\n * @param {Highcharts.RelativeSize} value\n *        A percentage string or a number.\n *\n * @param {number} base\n *        The full length that represents 100%.\n *\n * @param {number} [offset=0]\n *        A pixel offset to apply for percentage values. Used internally in\n *        axis positioning.\n *\n * @return {number}\n *         The computed length.\n */\nfunction relativeLength(value, base, offset) {\n    return (/%$/).test(value) ?\n        (base * parseFloat(value) / 100) + (offset || 0) :\n        parseFloat(value);\n}\n/**\n * Replaces text in a string with a given replacement in a loop to catch nested\n * matches after previous replacements.\n *\n * @function Highcharts.replaceNested\n *\n * @param {string} text\n * Text to search and modify.\n *\n * @param {...Array<(RegExp|string)>} replacements\n * One or multiple tuples with search pattern (`[0]: (string|RegExp)`) and\n * replacement (`[1]: string`) for matching text.\n *\n * @return {string}\n * Text with replacements.\n */\nfunction replaceNested(text, ...replacements) {\n    let previous, replacement;\n    do {\n        previous = text;\n        for (replacement of replacements) {\n            text = text.replace(replacement[0], replacement[1]);\n        }\n    } while (text !== previous);\n    return text;\n}\n/**\n * Wrap a method with extended functionality, preserving the original function.\n *\n * @function Highcharts.wrap\n *\n * @param {*} obj\n *        The context object that the method belongs to. In real cases, this is\n *        often a prototype.\n *\n * @param {string} method\n *        The name of the method to extend.\n *\n * @param {Highcharts.WrapProceedFunction} func\n *        A wrapper function callback. This function is called with the same\n *        arguments as the original function, except that the original function\n *        is unshifted and passed as the first argument.\n */\nfunction wrap(obj, method, func) {\n    const proceed = obj[method];\n    obj[method] = function () {\n        const outerArgs = arguments, scope = this;\n        return func.apply(this, [\n            function () {\n                return proceed.apply(scope, arguments.length ? arguments : outerArgs);\n            }\n        ].concat([].slice.call(arguments)));\n    };\n}\n/**\n * Get the magnitude of a number.\n *\n * @function Highcharts.getMagnitude\n *\n * @param {number} num\n *        The number.\n *\n * @return {number}\n *         The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc.\n */\nfunction getMagnitude(num) {\n    return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n}\n/**\n * Take an interval and normalize it to multiples of round numbers.\n *\n * @deprecated\n * @function Highcharts.normalizeTickInterval\n *\n * @param {number} interval\n *        The raw, un-rounded interval.\n *\n * @param {Array<*>} [multiples]\n *        Allowed multiples.\n *\n * @param {number} [magnitude]\n *        The magnitude of the number.\n *\n * @param {boolean} [allowDecimals]\n *        Whether to allow decimals.\n *\n * @param {boolean} [hasTickAmount]\n *        If it has tickAmount, avoid landing on tick intervals lower than\n *        original.\n *\n * @return {number}\n *         The normalized interval.\n *\n * @todo\n * Move this function to the Axis prototype. It is here only for historical\n * reasons.\n */\nfunction normalizeTickInterval(interval, multiples, magnitude, allowDecimals, hasTickAmount) {\n    let i, retInterval = interval;\n    // Round to a tenfold of 1, 2, 2.5 or 5\n    magnitude = pick(magnitude, getMagnitude(interval));\n    const normalized = interval / magnitude;\n    // Multiples for a linear scale\n    if (!multiples) {\n        multiples = hasTickAmount ?\n            // Finer grained ticks when the tick amount is hard set, including\n            // when alignTicks is true on multiple axes (#4580).\n            [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n            // Else, let ticks fall on rounder numbers\n            [1, 2, 2.5, 5, 10];\n        // The allowDecimals option\n        if (allowDecimals === false) {\n            if (magnitude === 1) {\n                multiples = multiples.filter(function (num) {\n                    return num % 1 === 0;\n                });\n            }\n            else if (magnitude <= 0.1) {\n                multiples = [1 / magnitude];\n            }\n        }\n    }\n    // Normalize the interval to the nearest multiple\n    for (i = 0; i < multiples.length; i++) {\n        retInterval = multiples[i];\n        // Only allow tick amounts smaller than natural\n        if ((hasTickAmount &&\n            retInterval * magnitude >= interval) ||\n            (!hasTickAmount &&\n                (normalized <=\n                    (multiples[i] +\n                        (multiples[i + 1] || multiples[i])) / 2))) {\n            break;\n        }\n    }\n    // Multiply back to the correct magnitude. Correct floats to appropriate\n    // precision (#6085).\n    retInterval = correctFloat(retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10));\n    return retInterval;\n}\n/**\n * Sort an object array and keep the order of equal items. The ECMAScript\n * standard does not specify the behaviour when items are equal.\n *\n * @function Highcharts.stableSort\n *\n * @param {Array<*>} arr\n *        The array to sort.\n *\n * @param {Function} sortFunction\n *        The function to sort it with, like with regular Array.prototype.sort.\n */\nfunction stableSort(arr, sortFunction) {\n    // @todo It seems like Chrome since v70 sorts in a stable way internally,\n    // plus all other browsers do it, so over time we may be able to remove this\n    // function\n    const length = arr.length;\n    let sortValue, i;\n    // Add index to each item\n    for (i = 0; i < length; i++) {\n        arr[i].safeI = i; // Stable sort index\n    }\n    arr.sort(function (a, b) {\n        sortValue = sortFunction(a, b);\n        return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n    });\n    // Remove index from items\n    for (i = 0; i < length; i++) {\n        delete arr[i].safeI; // Stable sort index\n    }\n}\n/**\n * Non-recursive method to find the lowest member of an array. `Math.min` raises\n * a maximum call stack size exceeded error in Chrome when trying to apply more\n * than 150.000 points. This method is slightly slower, but safe.\n *\n * @function Highcharts.arrayMin\n *\n * @param {Array<*>} data\n *        An array of numbers.\n *\n * @return {number}\n *         The lowest number.\n */\nfunction arrayMin(data) {\n    let i = data.length, min = data[0];\n    while (i--) {\n        if (data[i] < min) {\n            min = data[i];\n        }\n    }\n    return min;\n}\n/**\n * Non-recursive method to find the lowest member of an array. `Math.max` raises\n * a maximum call stack size exceeded error in Chrome when trying to apply more\n * than 150.000 points. This method is slightly slower, but safe.\n *\n * @function Highcharts.arrayMax\n *\n * @param {Array<*>} data\n *        An array of numbers.\n *\n * @return {number}\n *         The highest number.\n */\nfunction arrayMax(data) {\n    let i = data.length, max = data[0];\n    while (i--) {\n        if (data[i] > max) {\n            max = data[i];\n        }\n    }\n    return max;\n}\n/**\n * Utility method that destroys any SVGElement instances that are properties on\n * the given object. It loops all properties and invokes destroy if there is a\n * destroy method. The property is then delete.\n *\n * @function Highcharts.destroyObjectProperties\n *\n * @param {*} obj\n *        The object to destroy properties on.\n *\n * @param {*} [except]\n *        Exception, do not destroy this property, only delete it.\n */\nfunction destroyObjectProperties(obj, except, destructablesOnly) {\n    objectEach(obj, function (val, n) {\n        // If the object is non-null and destroy is defined\n        if (val !== except && val?.destroy) {\n            // Invoke the destroy\n            val.destroy();\n        }\n        // Delete the property from the object\n        if (val?.destroy || !destructablesOnly) {\n            delete obj[n];\n        }\n    });\n}\n/**\n * Discard a HTML element\n *\n * @function Highcharts.discardElement\n *\n * @param {Highcharts.HTMLDOMElement} element\n *        The HTML node to discard.\n */\nfunction discardElement(element) {\n    element?.parentElement?.removeChild(element);\n}\n/**\n * Fix JS round off float errors.\n *\n * @function Highcharts.correctFloat\n *\n * @param {number} num\n *        A float number to fix.\n *\n * @param {number} [prec=14]\n *        The precision.\n *\n * @return {number}\n *         The corrected float number.\n */\nfunction correctFloat(num, prec) {\n    // When the number is higher than 1e14 use the number (#16275)\n    return num > 1e14 ? num : parseFloat(num.toPrecision(prec || 14));\n}\n/**\n * The time unit lookup\n *\n * @ignore\n */\nconst timeUnits = {\n    millisecond: 1,\n    second: 1000,\n    minute: 60000,\n    hour: 3600000,\n    day: 24 * 3600000,\n    week: 7 * 24 * 3600000,\n    month: 28 * 24 * 3600000,\n    year: 364 * 24 * 3600000\n};\n/**\n * Easing definition\n *\n * @private\n * @function Math.easeInOutSine\n *\n * @param {number} pos\n *        Current position, ranging from 0 to 1.\n *\n * @return {number}\n *         Ease result\n */\nMath.easeInOutSine = function (pos) {\n    return -0.5 * (Math.cos(Math.PI * pos) - 1);\n};\n/**\n * Convenience function to get the align factor, used several places for\n * computing positions\n * @private\n */\nconst getAlignFactor = (align = '') => ({\n    center: 0.5,\n    right: 1,\n    middle: 0.5,\n    bottom: 1\n}[align] || 0);\n/**\n * Find the closest distance between two values of a two-dimensional array\n * @private\n * @function Highcharts.getClosestDistance\n *\n * @param {Array<Array<number>>} arrays\n *          An array of arrays of numbers\n *\n * @return {number | undefined}\n *          The closest distance between values\n */\nfunction getClosestDistance(arrays, onError) {\n    const allowNegative = !onError;\n    let closest, loopLength, distance, i;\n    arrays.forEach((xData) => {\n        if (xData.length > 1) {\n            loopLength = xData.length - 1;\n            for (i = loopLength; i > 0; i--) {\n                distance = xData[i] - xData[i - 1];\n                if (distance < 0 && !allowNegative) {\n                    onError?.();\n                    // Only one call\n                    onError = void 0;\n                }\n                else if (distance && (typeof closest === 'undefined' || distance < closest)) {\n                    closest = distance;\n                }\n            }\n        }\n    });\n    return closest;\n}\n/**\n * Returns the value of a property path on a given object.\n *\n * @private\n * @function getNestedProperty\n *\n * @param {string} path\n * Path to the property, for example `custom.myValue`.\n *\n * @param {unknown} obj\n * Instance containing the property on the specific path.\n *\n * @return {unknown}\n * The unknown property value.\n */\nfunction getNestedProperty(path, parent) {\n    const pathElements = path.split('.');\n    while (pathElements.length && defined(parent)) {\n        const pathElement = pathElements.shift();\n        // Filter on the key\n        if (typeof pathElement === 'undefined' ||\n            pathElement === '__proto__') {\n            return; // Undefined\n        }\n        if (pathElement === 'this') {\n            let thisProp;\n            if (isObject(parent)) {\n                thisProp = parent['@this'];\n            }\n            return thisProp ?? parent;\n        }\n        const child = parent[pathElement.replace(/[\\\\'\"]/g, '')];\n        // Filter on the child\n        if (!defined(child) ||\n            typeof child === 'function' ||\n            typeof child.nodeType === 'number' ||\n            child === win) {\n            return; // Undefined\n        }\n        // Else, proceed\n        parent = child;\n    }\n    return parent;\n}\n/**\n * Get the computed CSS value for given element and property, only for numerical\n * properties. For width and height, the dimension of the inner box (excluding\n * padding) is returned. Used for fitting the chart within the container.\n *\n * @function Highcharts.getStyle\n *\n * @param {Highcharts.HTMLDOMElement} el\n * An HTML element.\n *\n * @param {string} prop\n * The property name.\n *\n * @param {boolean} [toInt=true]\n * Parse to integer.\n *\n * @return {number|string|undefined}\n * The style value.\n */\nfunction getStyle(el, prop, toInt) {\n    let style;\n    // For width and height, return the actual inner pixel size (#4913)\n    if (prop === 'width') {\n        let offsetWidth = Math.min(el.offsetWidth, el.scrollWidth);\n        // In flex boxes, we need to use getBoundingClientRect and floor it,\n        // because scrollWidth doesn't support subpixel precision (#6427) ...\n        const boundingClientRectWidth = el.getBoundingClientRect?.().width;\n        // ...unless if the containing div or its parents are transform-scaled\n        // down, in which case the boundingClientRect can't be used as it is\n        // also scaled down (#9871, #10498).\n        if (boundingClientRectWidth < offsetWidth &&\n            boundingClientRectWidth >= offsetWidth - 1) {\n            offsetWidth = Math.floor(boundingClientRectWidth);\n        }\n        return Math.max(0, // #8377\n        (offsetWidth -\n            (getStyle(el, 'padding-left', true) || 0) -\n            (getStyle(el, 'padding-right', true) || 0)));\n    }\n    if (prop === 'height') {\n        return Math.max(0, // #8377\n        (Math.min(el.offsetHeight, el.scrollHeight) -\n            (getStyle(el, 'padding-top', true) || 0) -\n            (getStyle(el, 'padding-bottom', true) || 0)));\n    }\n    // Otherwise, get the computed style\n    const css = win.getComputedStyle(el, void 0); // eslint-disable-line no-undefined\n    if (css) {\n        style = css.getPropertyValue(prop);\n        if (pick(toInt, prop !== 'opacity')) {\n            style = pInt(style);\n        }\n    }\n    return style;\n}\n/**\n * Return the value of the first element in the array that satisfies the\n * provided testing function.\n *\n * @function Highcharts.find<T>\n *\n * @param {Array<T>} arr\n *        The array to test.\n *\n * @param {Function} callback\n *        The callback function. The function receives the item as the first\n *        argument. Return `true` if this item satisfies the condition.\n *\n * @return {T|undefined}\n *         The value of the element.\n */\nconst find = Array.prototype.find ?\n    function (arr, callback) {\n        return arr.find(callback);\n    } :\n    // Legacy implementation. PhantomJS, IE <= 11 etc. #7223.\n    function (arr, callback) {\n        let i;\n        const length = arr.length;\n        for (i = 0; i < length; i++) {\n            if (callback(arr[i], i)) { // eslint-disable-line node/callback-return\n                return arr[i];\n            }\n        }\n    };\n/**\n * Get the element's offset position, corrected for `overflow: auto`.\n *\n * @function Highcharts.offset\n *\n * @param {global.Element} el\n *        The DOM element.\n *\n * @return {Highcharts.OffsetObject}\n *         An object containing `left` and `top` properties for the position in\n *         the page.\n */\nfunction offset(el) {\n    const docElem = doc.documentElement, box = (el.parentElement || el.parentNode) ?\n        el.getBoundingClientRect() :\n        { top: 0, left: 0, width: 0, height: 0 };\n    return {\n        top: box.top + (win.pageYOffset || docElem.scrollTop) -\n            (docElem.clientTop || 0),\n        left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n            (docElem.clientLeft || 0),\n        width: box.width,\n        height: box.height\n    };\n}\n/* eslint-disable valid-jsdoc */\n/**\n * Iterate over object key pairs in an object.\n *\n * @function Highcharts.objectEach<T>\n *\n * @param {*} obj\n *        The object to iterate over.\n *\n * @param {Highcharts.ObjectEachCallbackFunction<T>} fn\n *        The iterator callback. It passes three arguments:\n *        * value - The property value.\n *        * key - The property key.\n *        * obj - The object that objectEach is being applied to.\n *\n * @param {T} [ctx]\n *        The context.\n */\nfunction objectEach(obj, fn, ctx) {\n    /* eslint-enable valid-jsdoc */\n    for (const key in obj) {\n        if (Object.hasOwnProperty.call(obj, key)) {\n            fn.call(ctx || obj[key], obj[key], key, obj);\n        }\n    }\n}\n/* eslint-disable valid-jsdoc */\n/**\n * Add an event listener.\n *\n * @function Highcharts.addEvent<T>\n *\n * @param  {Highcharts.Class<T>|T} el\n *         The element or object to add a listener to. It can be a\n *         {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n *\n * @param  {string} type\n *         The event type.\n *\n * @param  {Highcharts.EventCallbackFunction<T>|Function} fn\n *         The function callback to execute when the event is fired.\n *\n * @param  {Highcharts.EventOptionsObject} [options]\n *         Options for adding the event.\n *\n * @sample highcharts/members/addevent\n *         Use a general `render` event to draw shapes on a chart\n *\n * @return {Function}\n *         A callback function to remove the added event.\n */\nfunction addEvent(el, type, fn, options = {}) {\n    /* eslint-enable valid-jsdoc */\n    // Add hcEvents to either the prototype (in case we're running addEvent on a\n    // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n    // inherited down the prototype chain, in which case we need to set the\n    // property on this instance (which may itself be a prototype).\n    const owner = typeof el === 'function' && el.prototype || el;\n    if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n        owner.hcEvents = {};\n    }\n    const events = owner.hcEvents;\n    // Allow click events added to points, otherwise they will be prevented by\n    // the TouchPointer.pinch function after a pinch zoom operation (#7091).\n    if (Core_Globals.Point && // Without H a dependency loop occurs\n        el instanceof Core_Globals.Point &&\n        el.series &&\n        el.series.chart) {\n        el.series.chart.runTrackerClick = true;\n    }\n    // Handle DOM events\n    // If the browser supports passive events, add it to improve performance\n    // on touch events (#11353).\n    const addEventListener = el.addEventListener;\n    if (addEventListener) {\n        addEventListener.call(el, type, fn, Core_Globals.supportsPassiveEvents ? {\n            passive: options.passive === void 0 ?\n                type.indexOf('touch') !== -1 : options.passive,\n            capture: false\n        } : false);\n    }\n    if (!events[type]) {\n        events[type] = [];\n    }\n    const eventObject = {\n        fn,\n        order: typeof options.order === 'number' ? options.order : Infinity\n    };\n    events[type].push(eventObject);\n    // Order the calls\n    events[type].sort((a, b) => a.order - b.order);\n    // Return a function that can be called to remove this event.\n    return function () {\n        removeEvent(el, type, fn);\n    };\n}\n/* eslint-disable valid-jsdoc */\n/**\n * Remove an event that was added with {@link Highcharts#addEvent}.\n *\n * @function Highcharts.removeEvent<T>\n *\n * @param {Highcharts.Class<T>|T} el\n *        The element to remove events on.\n *\n * @param {string} [type]\n *        The type of events to remove. If undefined, all events are removed\n *        from the element.\n *\n * @param {Highcharts.EventCallbackFunction<T>} [fn]\n *        The specific callback to remove. If undefined, all events that match\n *        the element and optionally the type are removed.\n *\n * @return {void}\n */\nfunction removeEvent(el, type, fn) {\n    /* eslint-enable valid-jsdoc */\n    /**\n     * @private\n     */\n    function removeOneEvent(type, fn) {\n        const removeEventListener = el.removeEventListener;\n        if (removeEventListener) {\n            removeEventListener.call(el, type, fn, false);\n        }\n    }\n    /**\n     * @private\n     */\n    function removeAllEvents(eventCollection) {\n        let types, len;\n        if (!el.nodeName) {\n            return; // Break on non-DOM events\n        }\n        if (type) {\n            types = {};\n            types[type] = true;\n        }\n        else {\n            types = eventCollection;\n        }\n        objectEach(types, function (_val, n) {\n            if (eventCollection[n]) {\n                len = eventCollection[n].length;\n                while (len--) {\n                    removeOneEvent(n, eventCollection[n][len].fn);\n                }\n            }\n        });\n    }\n    const owner = typeof el === 'function' && el.prototype || el;\n    if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n        const events = owner.hcEvents;\n        if (type) {\n            const typeEvents = (events[type] || []);\n            if (fn) {\n                events[type] = typeEvents.filter(function (obj) {\n                    return fn !== obj.fn;\n                });\n                removeOneEvent(type, fn);\n            }\n            else {\n                removeAllEvents(events);\n                events[type] = [];\n            }\n        }\n        else {\n            removeAllEvents(events);\n            delete owner.hcEvents;\n        }\n    }\n}\n/* eslint-disable valid-jsdoc */\n/**\n * Fire an event that was registered with {@link Highcharts#addEvent}.\n *\n * @function Highcharts.fireEvent<T>\n *\n * @param {T} el\n *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n *        an {@link SVGElement} or any other object.\n *\n * @param {string} type\n *        The type of event.\n *\n * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n *        Custom event arguments that are passed on as an argument to the event\n *        handler.\n *\n * @param {Highcharts.EventCallbackFunction<T>|Function} [defaultFunction]\n *        The default function to execute if the other listeners haven't\n *        returned false.\n *\n * @return {void}\n */\nfunction fireEvent(el, type, eventArguments, defaultFunction) {\n    /* eslint-enable valid-jsdoc */\n    eventArguments = eventArguments || {};\n    if (doc?.createEvent &&\n        (el.dispatchEvent ||\n            (el.fireEvent &&\n                // Enable firing events on Highcharts instance.\n                el !== Core_Globals))) {\n        const e = doc.createEvent('Events');\n        e.initEvent(type, true, true);\n        eventArguments = extend(e, eventArguments);\n        if (el.dispatchEvent) {\n            el.dispatchEvent(eventArguments);\n        }\n        else {\n            el.fireEvent(type, eventArguments);\n        }\n    }\n    else if (el.hcEvents) {\n        if (!eventArguments.target) {\n            // We're running a custom event\n            extend(eventArguments, {\n                // Attach a simple preventDefault function to skip\n                // default handler if called. The built-in\n                // defaultPrevented property is not overwritable (#5112)\n                preventDefault: function () {\n                    eventArguments.defaultPrevented = true;\n                },\n                // Setting target to native events fails with clicking\n                // the zoom-out button in Chrome.\n                target: el,\n                // If the type is not set, we're running a custom event\n                // (#2297). If it is set, we're running a browser event.\n                type: type\n            });\n        }\n        const events = [];\n        let object = el;\n        let multilevel = false;\n        // Recurse up the inheritance chain and collect hcEvents set as own\n        // objects on the prototypes.\n        while (object.hcEvents) {\n            if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                object.hcEvents[type]) {\n                if (events.length) {\n                    multilevel = true;\n                }\n                events.unshift.apply(events, object.hcEvents[type]);\n            }\n            object = Object.getPrototypeOf(object);\n        }\n        // For performance reasons, only sort the event handlers in case we are\n        // dealing with multiple levels in the prototype chain. Otherwise, the\n        // events are already sorted in the addEvent function.\n        if (multilevel) {\n            // Order the calls\n            events.sort((a, b) => a.order - b.order);\n        }\n        // Call the collected event handlers\n        events.forEach((obj) => {\n            // If the event handler returns false, prevent the default handler\n            // from executing\n            if (obj.fn.call(el, eventArguments) === false) {\n                eventArguments.preventDefault();\n            }\n        });\n    }\n    // Run the default if not prevented\n    if (defaultFunction && !eventArguments.defaultPrevented) {\n        defaultFunction.call(el, eventArguments);\n    }\n}\nlet serialMode;\n/**\n * Get a unique key for using in internal element id's and pointers. The key is\n * composed of a random hash specific to this Highcharts instance, and a\n * counter.\n *\n * @example\n * let id = uniqueKey(); // => 'highcharts-x45f6hp-0'\n *\n * @function Highcharts.uniqueKey\n *\n * @return {string}\n * A unique key.\n */\nconst uniqueKey = (function () {\n    const hash = Math.random().toString(36).substring(2, 9) + '-';\n    let id = 0;\n    return function () {\n        return 'highcharts-' + (serialMode ? '' : hash) + id++;\n    };\n}());\n/**\n * Activates a serial mode for element IDs provided by\n * {@link Highcharts.uniqueKey}. This mode can be used in automated tests, where\n * a simple comparison of two rendered SVG graphics is needed.\n *\n * **Note:** This is only for testing purposes and will break functionality in\n * webpages with multiple charts.\n *\n * @example\n * if (\n *   process &&\n *   process.env.NODE_ENV === 'development'\n * ) {\n *   Highcharts.useSerialIds(true);\n * }\n *\n * @function Highcharts.useSerialIds\n *\n * @param {boolean} [mode]\n * Changes the state of serial mode.\n *\n * @return {boolean|undefined}\n * State of the serial mode.\n */\nfunction useSerialIds(mode) {\n    return (serialMode = pick(mode, serialMode));\n}\nfunction isFunction(obj) {\n    return typeof obj === 'function';\n}\nfunction ucfirst(s) {\n    return ((isString(s) ?\n        s.substring(0, 1).toUpperCase() + s.substring(1) :\n        String(s)));\n}\n/* *\n *\n *  External\n *\n * */\n// Register Highcharts as a plugin in jQuery\nif (win.jQuery) {\n    /**\n     * Highcharts-extended JQuery.\n     *\n     * @external JQuery\n     */\n    /**\n     * Helper function to return the chart of the current JQuery selector\n     * element.\n     *\n     * @function external:JQuery#highcharts\n     *\n     * @return {Highcharts.Chart}\n     *         The chart that is linked to the JQuery selector element.\n     */ /**\n    * Factory function to create a chart in the current JQuery selector\n    * element.\n    *\n    * @function external:JQuery#highcharts\n    *\n    * @param {'Chart'|'Map'|'StockChart'|string} [className]\n    *        Name of the factory class in the Highcharts namespace.\n    *\n    * @param {Highcharts.Options} [options]\n    *        The chart options structure.\n    *\n    * @param {Highcharts.ChartCallbackFunction} [callback]\n    *        Function to run when the chart has loaded and all external\n    *        images are loaded. Defining a\n    *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n    *        handler is equivalent.\n    *\n    * @return {JQuery}\n    *         The current JQuery selector.\n    */\n    win.jQuery.fn.highcharts = function () {\n        const args = [].slice.call(arguments);\n        if (this[0]) { // `this[0]` is the renderTo div\n            // Create the chart\n            if (args[0]) {\n                new Core_Globals[ // eslint-disable-line computed-property-spacing, no-new\n                // Constructor defaults to Chart\n                isString(args[0]) ? args.shift() : 'Chart'](this[0], args[0], args[1]);\n                return this;\n            }\n            // When called without parameters or with the return argument,\n            // return an existing chart\n            return charts[attr(this[0], 'data-highcharts-chart')];\n        }\n    };\n}\n/* *\n *\n *  Default Export\n *\n * */\n// TODO use named exports when supported.\nconst Utilities = {\n    addEvent,\n    arrayMax,\n    arrayMin,\n    attr,\n    clamp,\n    clearTimeout: internalClearTimeout,\n    correctFloat,\n    createElement,\n    crisp,\n    css,\n    defined,\n    destroyObjectProperties,\n    diffObjects,\n    discardElement,\n    erase,\n    error,\n    extend,\n    extendClass,\n    find,\n    fireEvent,\n    getAlignFactor,\n    getClosestDistance,\n    getMagnitude,\n    getNestedProperty,\n    getStyle,\n    insertItem,\n    isArray,\n    isClass,\n    isDOMElement,\n    isFunction,\n    isNumber,\n    isObject,\n    isString,\n    merge,\n    normalizeTickInterval,\n    objectEach,\n    offset,\n    pad,\n    pick,\n    pInt,\n    pushUnique,\n    relativeLength,\n    removeEvent,\n    replaceNested,\n    splat,\n    stableSort,\n    syncTimeout,\n    timeUnits,\n    ucfirst,\n    uniqueKey,\n    useSerialIds,\n    wrap\n};\n/* harmony default export */ const Core_Utilities = (Utilities);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * An animation configuration. Animation configurations can also be defined as\n * booleans, where `false` turns off animation and `true` defaults to a duration\n * of 500ms and defer of 0ms.\n *\n * @interface Highcharts.AnimationOptionsObject\n */ /**\n* A callback function to execute when the animation finishes.\n* @name Highcharts.AnimationOptionsObject#complete\n* @type {Function|undefined}\n*/ /**\n* The animation defer in milliseconds.\n* @name Highcharts.AnimationOptionsObject#defer\n* @type {number|undefined}\n*/ /**\n* The animation duration in milliseconds.\n* @name Highcharts.AnimationOptionsObject#duration\n* @type {number|undefined}\n*/ /**\n* The name of an easing function as defined on the `Math` object.\n* @name Highcharts.AnimationOptionsObject#easing\n* @type {string|Function|undefined}\n*/ /**\n* A callback function to execute on each step of each attribute or CSS property\n* that's being animated. The first argument contains information about the\n* animation and progress.\n* @name Highcharts.AnimationOptionsObject#step\n* @type {Function|undefined}\n*/\n/**\n * Creates a frame for the animated SVG element.\n *\n * @callback Highcharts.AnimationStepCallbackFunction\n *\n * @param {Highcharts.SVGElement} this\n *        The SVG element to animate.\n *\n * @return {void}\n */\n/**\n * Interface description for a class.\n *\n * @interface Highcharts.Class<T>\n * @extends Function\n */ /**\n* Class constructor.\n* @function Highcharts.Class<T>#new\n* @param {...Array<*>} args\n*        Constructor arguments.\n* @return {T}\n*         Class instance.\n*/\n/**\n * A style object with camel case property names to define visual appearance of\n * a SVG element or HTML element. The properties can be whatever styles are\n * supported on the given SVG or HTML element.\n *\n * @example\n * {\n *    fontFamily: 'monospace',\n *    fontSize: '1.2em'\n * }\n *\n * @interface Highcharts.CSSObject\n */ /**\n* @name Highcharts.CSSObject#[key:string]\n* @type {boolean|number|string|undefined}\n*/ /**\n* Background style for the element.\n* @name Highcharts.CSSObject#background\n* @type {string|undefined}\n*/ /**\n* Background color of the element.\n* @name Highcharts.CSSObject#backgroundColor\n* @type {Highcharts.ColorString|undefined}\n*/ /**\n* Border style for the element.\n* @name Highcharts.CSSObject#border\n* @type {string|undefined}\n*/ /**\n* Radius of the element border.\n* @name Highcharts.CSSObject#borderRadius\n* @type {number|undefined}\n*/ /**\n* Color used in the element. The 'contrast' option is a Highcharts custom\n* property that results in black or white, depending on the background of the\n* element.\n* @name Highcharts.CSSObject#color\n* @type {'contrast'|Highcharts.ColorString|undefined}\n*/ /**\n* Style of the mouse cursor when resting over the element.\n* @name Highcharts.CSSObject#cursor\n* @type {Highcharts.CursorValue|undefined}\n*/ /**\n* Font family of the element text. Multiple values have to be in decreasing\n* preference order and separated by comma.\n* @name Highcharts.CSSObject#fontFamily\n* @type {string|undefined}\n*/ /**\n* Font size of the element text.\n* @name Highcharts.CSSObject#fontSize\n* @type {string|undefined}\n*/ /**\n* Font weight of the element text.\n* @name Highcharts.CSSObject#fontWeight\n* @type {string|undefined}\n*/ /**\n* Height of the element.\n* @name Highcharts.CSSObject#height\n* @type {number|undefined}\n*/ /**\n* The maximum number of lines. If lines are cropped away, an ellipsis will be\n* added.\n* @name Highcharts.CSSObject#lineClamp\n* @type {number|undefined}\n*/ /**\n* Width of the element border.\n* @name Highcharts.CSSObject#lineWidth\n* @type {number|undefined}\n*/ /**\n* Opacity of the element.\n* @name Highcharts.CSSObject#opacity\n* @type {number|undefined}\n*/ /**\n* Space around the element content.\n* @name Highcharts.CSSObject#padding\n* @type {string|undefined}\n*/ /**\n* Behaviour of the element when the mouse cursor rests over it.\n* @name Highcharts.CSSObject#pointerEvents\n* @type {string|undefined}\n*/ /**\n* Positioning of the element.\n* @name Highcharts.CSSObject#position\n* @type {string|undefined}\n*/ /**\n* Alignment of the element text.\n* @name Highcharts.CSSObject#textAlign\n* @type {string|undefined}\n*/ /**\n* Additional decoration of the element text.\n* @name Highcharts.CSSObject#textDecoration\n* @type {string|undefined}\n*/ /**\n* Outline style of the element text.\n* @name Highcharts.CSSObject#textOutline\n* @type {string|undefined}\n*/ /**\n* Line break style of the element text. Highcharts SVG elements support\n* `ellipsis` when a `width` is set.\n* @name Highcharts.CSSObject#textOverflow\n* @type {string|undefined}\n*/ /**\n* Top spacing of the element relative to the parent element.\n* @name Highcharts.CSSObject#top\n* @type {string|undefined}\n*/ /**\n* Animated transition of selected element properties.\n* @name Highcharts.CSSObject#transition\n* @type {string|undefined}\n*/ /**\n* Line break style of the element text.\n* @name Highcharts.CSSObject#whiteSpace\n* @type {string|undefined}\n*/ /**\n* Width of the element.\n* @name Highcharts.CSSObject#width\n* @type {number|undefined}\n*/\n/**\n * All possible cursor styles.\n *\n * @typedef {'alias'|'all-scroll'|'auto'|'cell'|'col-resize'|'context-menu'|'copy'|'crosshair'|'default'|'e-resize'|'ew-resize'|'grab'|'grabbing'|'help'|'move'|'n-resize'|'ne-resize'|'nesw-resize'|'no-drop'|'none'|'not-allowed'|'ns-resize'|'nw-resize'|'nwse-resize'|'pointer'|'progress'|'row-resize'|'s-resize'|'se-resize'|'sw-resize'|'text'|'vertical-text'|'w-resize'|'wait'|'zoom-in'|'zoom-out'} Highcharts.CursorValue\n */\n/**\n * All possible dash styles.\n *\n * @typedef {'Dash'|'DashDot'|'Dot'|'LongDash'|'LongDashDot'|'LongDashDotDot'|'ShortDash'|'ShortDashDot'|'ShortDashDotDot'|'ShortDot'|'Solid'} Highcharts.DashStyleValue\n */\n/**\n * Generic dictionary in TypeScript notation.\n * Use the native `AnyRecord` instead.\n *\n * @deprecated\n * @interface Highcharts.Dictionary<T>\n */ /**\n* @name Highcharts.Dictionary<T>#[key:string]\n* @type {T}\n*/\n/**\n * The function callback to execute when the event is fired. The `this` context\n * contains the instance, that fired the event.\n *\n * @callback Highcharts.EventCallbackFunction<T>\n *\n * @param {T} this\n *\n * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n *        Event arguments.\n *\n * @return {boolean|void}\n */\n/**\n * The event options for adding function callback.\n *\n * @interface Highcharts.EventOptionsObject\n */ /**\n* The order the event handler should be called. This opens for having one\n* handler be called before another, independent of in which order they were\n* added.\n* @name Highcharts.EventOptionsObject#order\n* @type {number}\n*/ /**\n* Whether an event should be passive or not.\n* When set to `true`, the function specified by listener will never call\n* `preventDefault()`.\n* @name Highcharts.EventOptionsObject#passive\n* @type boolean\n*/\n/**\n * Formats data as a string. Usually the data is accessible through the `this`\n * keyword.\n *\n * @callback Highcharts.FormatterCallbackFunction<T>\n *\n * @param {T} this\n *        Context to format\n *\n * @return {string}\n *         Formatted text\n */\n/**\n * An object of key-value pairs for HTML attributes.\n *\n * @typedef {Highcharts.Dictionary<boolean|number|string|Function>} Highcharts.HTMLAttributes\n */\n/**\n * An HTML DOM element. The type is a reference to the regular HTMLElement in\n * the global scope.\n *\n * @typedef {global.HTMLElement} Highcharts.HTMLDOMElement\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\n */\n/**\n * The iterator callback.\n *\n * @callback Highcharts.ObjectEachCallbackFunction<T>\n *\n * @param {T} this\n *        The context.\n *\n * @param {*} value\n *        The property value.\n *\n * @param {string} key\n *        The property key.\n *\n * @param {*} obj\n *        The object that objectEach is being applied to.\n */\n/**\n * An object containing `left` and `top` properties for the position in the\n * page.\n *\n * @interface Highcharts.OffsetObject\n */ /**\n* Left distance to the page border.\n* @name Highcharts.OffsetObject#left\n* @type {number}\n*/ /**\n* Top distance to the page border.\n* @name Highcharts.OffsetObject#top\n* @type {number}\n*/\n/**\n * Describes a range.\n *\n * @interface Highcharts.RangeObject\n */ /**\n* Maximum number of the range.\n* @name Highcharts.RangeObject#max\n* @type {number}\n*/ /**\n* Minimum number of the range.\n* @name Highcharts.RangeObject#min\n* @type {number}\n*/\n/**\n * If a number is given, it defines the pixel length. If a percentage string is\n * given, like for example `'50%'`, the setting defines a length relative to a\n * base size, for example the size of a container.\n *\n * @typedef {number|string} Highcharts.RelativeSize\n */\n/**\n * Proceed function to call original (wrapped) function.\n *\n * @callback Highcharts.WrapProceedFunction\n *\n * @param {*} [arg1]\n *        Optional argument. Without any arguments defaults to first argument of\n *        the wrapping function.\n *\n * @param {*} [arg2]\n *        Optional argument. Without any arguments defaults to second argument\n *        of the wrapping function.\n *\n * @param {*} [arg3]\n *        Optional argument. Without any arguments defaults to third argument of\n *        the wrapping function.\n *\n * @return {*}\n *         Return value of the original function.\n */\n/**\n * The Highcharts object is the placeholder for all other members, and various\n * utility functions. The most important member of the namespace would be the\n * chart constructor.\n *\n * @example\n * let chart = Highcharts.chart('container', { ... });\n *\n * @namespace Highcharts\n */\n''; // Detach doclets above\n\n;// ./code/grid/es-modules/Core/Renderer/HTML/AST.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { SVG_NS, win: AST_win } = Core_Globals;\n\nconst { attr: AST_attr, createElement: AST_createElement, css: AST_css, error: AST_error, isFunction: AST_isFunction, isString: AST_isString, objectEach: AST_objectEach, splat: AST_splat } = Core_Utilities;\nconst { trustedTypes } = AST_win;\n/* *\n *\n *  Constants\n *\n * */\n// Create the trusted type policy. This should not be exposed.\nconst trustedTypesPolicy = (trustedTypes &&\n    AST_isFunction(trustedTypes.createPolicy) &&\n    trustedTypes.createPolicy('highcharts', {\n        createHTML: (s) => s\n    }));\nconst emptyHTML = trustedTypesPolicy ?\n    trustedTypesPolicy.createHTML('') :\n    '';\n/* *\n *\n *  Class\n *\n * */\n/**\n * The AST class represents an abstract syntax tree of HTML or SVG content. It\n * can take HTML as an argument, parse it, optionally transform it to SVG, then\n * perform sanitation before inserting it into the DOM.\n *\n * @class\n * @name Highcharts.AST\n *\n * @param {string|Array<Highcharts.ASTNode>} source\n * Either an HTML string or an ASTNode list to populate the tree.\n */\nclass AST {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * Filter an object of SVG or HTML attributes against the allow list.\n     *\n     * @static\n     *\n     * @function Highcharts.AST#filterUserAttributes\n     *\n     * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n     *\n     * @return {Highcharts.SVGAttributes}\n     * The filtered attributes\n     */\n    static filterUserAttributes(attributes) {\n        AST_objectEach(attributes, (val, key) => {\n            let valid = true;\n            if (AST.allowedAttributes.indexOf(key) === -1) {\n                valid = false;\n            }\n            if (['background', 'dynsrc', 'href', 'lowsrc', 'src']\n                .indexOf(key) !== -1) {\n                valid = AST_isString(val) && AST.allowedReferences.some((ref) => val.indexOf(ref) === 0);\n            }\n            if (!valid) {\n                AST_error(33, false, void 0, {\n                    'Invalid attribute in config': `${key}`\n                });\n                delete attributes[key];\n            }\n            // #17753, < is not allowed in SVG attributes\n            if (AST_isString(val) && attributes[key]) {\n                attributes[key] = val.replace(/</g, '&lt;');\n            }\n        });\n        return attributes;\n    }\n    static parseStyle(style) {\n        return style\n            .split(';')\n            .reduce((styles, line) => {\n            const pair = line.split(':').map((s) => s.trim()), key = pair.shift();\n            if (key && pair.length) {\n                styles[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = pair.join(':'); // #17146\n            }\n            return styles;\n        }, {});\n    }\n    /**\n     * Utility function to set html content for an element by passing in a\n     * markup string. The markup is safely parsed by the AST class to avoid\n     * XSS vulnerabilities. This function should be used instead of setting\n     * `innerHTML` in all cases where the content is not fully trusted.\n     *\n     * @static\n     * @function Highcharts.AST#setElementHTML\n     *\n     * @param {SVGDOMElement|HTMLDOMElement} el\n     * Node to set content of.\n     *\n     * @param {string} html\n     * Markup string\n     */\n    static setElementHTML(el, html) {\n        el.innerHTML = AST.emptyHTML; // Clear previous\n        if (html) {\n            const ast = new AST(html);\n            ast.addToDOM(el);\n        }\n    }\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n    constructor(source) {\n        this.nodes = typeof source === 'string' ?\n            this.parseMarkup(source) : source;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Add the tree defined as a hierarchical JS structure to the DOM\n     *\n     * @function Highcharts.AST#addToDOM\n     *\n     * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n     * The node where it should be added\n     *\n     * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n     * The inserted node.\n     */\n    addToDOM(parent) {\n        /**\n         * @private\n         * @param {Highcharts.ASTNode} subtree\n         * HTML/SVG definition\n         * @param {Element} [subParent]\n         * parent node\n         * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n         * The inserted node.\n         */\n        function recurse(subtree, subParent) {\n            let ret;\n            AST_splat(subtree).forEach(function (item) {\n                const tagName = item.tagName;\n                const textNode = item.textContent ?\n                    Core_Globals.doc.createTextNode(item.textContent) :\n                    void 0;\n                // Whether to ignore the AST filtering totally, #15345\n                const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n                let node;\n                if (tagName) {\n                    if (tagName === '#text') {\n                        node = textNode;\n                    }\n                    else if (AST.allowedTags.indexOf(tagName) !== -1 ||\n                        bypassHTMLFiltering) {\n                        const NS = tagName === 'svg' ?\n                            SVG_NS :\n                            (subParent.namespaceURI || SVG_NS);\n                        const element = Core_Globals.doc.createElementNS(NS, tagName);\n                        const attributes = item.attributes || {};\n                        // Apply attributes from root of AST node, legacy from\n                        // from before TextBuilder\n                        AST_objectEach(item, function (val, key) {\n                            if (key !== 'tagName' &&\n                                key !== 'attributes' &&\n                                key !== 'children' &&\n                                key !== 'style' &&\n                                key !== 'textContent') {\n                                attributes[key] = val;\n                            }\n                        });\n                        AST_attr(element, bypassHTMLFiltering ?\n                            attributes :\n                            AST.filterUserAttributes(attributes));\n                        if (item.style) {\n                            AST_css(element, item.style);\n                        }\n                        // Add text content\n                        if (textNode) {\n                            element.appendChild(textNode);\n                        }\n                        // Recurse\n                        recurse(item.children || [], element);\n                        node = element;\n                    }\n                    else {\n                        AST_error(33, false, void 0, {\n                            'Invalid tagName in config': tagName\n                        });\n                    }\n                }\n                // Add to the tree\n                if (node) {\n                    subParent.appendChild(node);\n                }\n                ret = node;\n            });\n            // Return last node added (on top level it's the only one)\n            return ret;\n        }\n        return recurse(this.nodes, parent);\n    }\n    /**\n     * Parse HTML/SVG markup into AST Node objects. Used internally from the\n     * constructor.\n     *\n     * @private\n     *\n     * @function Highcharts.AST#getNodesFromMarkup\n     *\n     * @param {string} markup The markup string.\n     *\n     * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n     */\n    parseMarkup(markup) {\n        const nodes = [];\n        markup = markup\n            .trim()\n            // The style attribute throws a warning when parsing when CSP is\n            // enabled (#6884), so use an alias and pick it up below\n            // Make all quotation marks parse correctly to DOM (#17627)\n            .replace(/ style=([\"'])/g, ' data-style=$1');\n        let doc;\n        try {\n            doc = new DOMParser().parseFromString(trustedTypesPolicy ?\n                trustedTypesPolicy.createHTML(markup) :\n                markup, 'text/html');\n        }\n        catch (e) {\n            // There are two cases where this fails:\n            // 1. IE9 and PhantomJS, where the DOMParser only supports parsing\n            //    XML\n            // 2. Due to a Chromium issue where chart redraws are triggered by\n            //    a `beforeprint` event (#16931),\n            //    https://issues.chromium.org/issues/40222135\n        }\n        if (!doc) {\n            const body = AST_createElement('div');\n            body.innerHTML = markup;\n            doc = { body };\n        }\n        const appendChildNodes = (node, addTo) => {\n            const tagName = node.nodeName.toLowerCase();\n            // Add allowed tags\n            const astNode = {\n                tagName\n            };\n            if (tagName === '#text') {\n                astNode.textContent = node.textContent || '';\n            }\n            const parsedAttributes = node.attributes;\n            // Add attributes\n            if (parsedAttributes) {\n                const attributes = {};\n                [].forEach.call(parsedAttributes, (attrib) => {\n                    if (attrib.name === 'data-style') {\n                        astNode.style = AST.parseStyle(attrib.value);\n                    }\n                    else {\n                        attributes[attrib.name] = attrib.value;\n                    }\n                });\n                astNode.attributes = attributes;\n            }\n            // Handle children\n            if (node.childNodes.length) {\n                const children = [];\n                [].forEach.call(node.childNodes, (childNode) => {\n                    appendChildNodes(childNode, children);\n                });\n                if (children.length) {\n                    astNode.children = children;\n                }\n            }\n            addTo.push(astNode);\n        };\n        [].forEach.call(doc.body.childNodes, (childNode) => appendChildNodes(childNode, nodes));\n        return nodes;\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * The list of allowed SVG or HTML attributes, used for sanitizing\n * potentially harmful content from the chart configuration before adding to\n * the DOM.\n *\n * @see [Source code with default values](\n * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n *\n * @example\n * // Allow a custom, trusted attribute\n * Highcharts.AST.allowedAttributes.push('data-value');\n *\n * @name Highcharts.AST.allowedAttributes\n * @type {Array<string>}\n */\nAST.allowedAttributes = [\n    'alt',\n    'aria-controls',\n    'aria-describedby',\n    'aria-expanded',\n    'aria-haspopup',\n    'aria-hidden',\n    'aria-label',\n    'aria-labelledby',\n    'aria-live',\n    'aria-pressed',\n    'aria-readonly',\n    'aria-roledescription',\n    'aria-selected',\n    'class',\n    'clip-path',\n    'color',\n    'colspan',\n    'cx',\n    'cy',\n    'd',\n    'dx',\n    'dy',\n    'disabled',\n    'fill',\n    'filterUnits',\n    'flood-color',\n    'flood-opacity',\n    'height',\n    'href',\n    'id',\n    'in',\n    'in2',\n    'markerHeight',\n    'markerWidth',\n    'offset',\n    'opacity',\n    'operator',\n    'orient',\n    'padding',\n    'paddingLeft',\n    'paddingRight',\n    'patternUnits',\n    'r',\n    'radius',\n    'refX',\n    'refY',\n    'role',\n    'scope',\n    'slope',\n    'src',\n    'startOffset',\n    'stdDeviation',\n    'stroke',\n    'stroke-linecap',\n    'stroke-width',\n    'style',\n    'tableValues',\n    'result',\n    'rowspan',\n    'summary',\n    'target',\n    'tabindex',\n    'text-align',\n    'text-anchor',\n    'textAnchor',\n    'textLength',\n    'title',\n    'type',\n    'valign',\n    'width',\n    'x',\n    'x1',\n    'x2',\n    'xlink:href',\n    'y',\n    'y1',\n    'y2',\n    'zIndex'\n];\n/**\n * The list of allowed references for referring attributes like `href` and\n * `src`. Attribute values will only be allowed if they start with one of\n * these strings.\n *\n * @see [Source code with default values](\n * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n *\n * @example\n * // Allow tel:\n * Highcharts.AST.allowedReferences.push('tel:');\n *\n * @name    Highcharts.AST.allowedReferences\n * @type    {Array<string>}\n */\nAST.allowedReferences = [\n    'https://',\n    'http://',\n    'mailto:',\n    '/',\n    '../',\n    './',\n    '#'\n];\n/**\n * The list of allowed SVG or HTML tags, used for sanitizing potentially\n * harmful content from the chart configuration before adding to the DOM.\n *\n * @see [Source code with default values](\n * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n *\n * @example\n * // Allow a custom, trusted tag\n * Highcharts.AST.allowedTags.push('blink'); // ;)\n *\n * @name    Highcharts.AST.allowedTags\n * @type    {Array<string>}\n */\nAST.allowedTags = [\n    'a',\n    'abbr',\n    'b',\n    'br',\n    'button',\n    'caption',\n    'circle',\n    'clipPath',\n    'code',\n    'dd',\n    'defs',\n    'div',\n    'dl',\n    'dt',\n    'em',\n    'feComponentTransfer',\n    'feComposite',\n    'feDropShadow',\n    'feFlood',\n    'feFuncA',\n    'feFuncB',\n    'feFuncG',\n    'feFuncR',\n    'feGaussianBlur',\n    'feMorphology',\n    'feOffset',\n    'feMerge',\n    'feMergeNode',\n    'filter',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'hr',\n    'i',\n    'img',\n    'li',\n    'linearGradient',\n    'marker',\n    'ol',\n    'p',\n    'path',\n    'pattern',\n    'pre',\n    'rect',\n    'small',\n    'span',\n    'stop',\n    'strong',\n    'style',\n    'sub',\n    'sup',\n    'svg',\n    'table',\n    'text',\n    'textPath',\n    'thead',\n    'title',\n    'tbody',\n    'tspan',\n    'td',\n    'th',\n    'tr',\n    'u',\n    'ul',\n    '#text'\n];\nAST.emptyHTML = emptyHTML;\n/**\n * Allow all custom SVG and HTML attributes, references and tags (together\n * with potentially harmful ones) to be added to the DOM from the chart\n * configuration. In other words, disable the allow-listing which is the\n * primary functionality of the AST.\n *\n * WARNING: Setting this property to `true` while allowing untrusted user\n * data in the chart configuration will expose your application to XSS\n * security risks!\n *\n * Note that in case you want to allow a known set of tags or attributes,\n * you should allow-list them instead of disabling the filtering totally.\n * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n * [allowedReferences](Highcharts.AST#.allowedReferences) and\n * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n * setting is intended only for those cases where allow-listing is not\n * practical, and the chart configuration already comes from a secure\n * source.\n *\n * @example\n * // Allow all custom attributes, references and tags (disable DOM XSS\n * // filtering)\n * Highcharts.AST.bypassHTMLFiltering = true;\n *\n * @name Highcharts.AST.bypassHTMLFiltering\n * @static\n */\nAST.bypassHTMLFiltering = false;\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const HTML_AST = (AST);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Serialized form of an SVG/HTML definition, including children.\n *\n * @interface Highcharts.ASTNode\n */ /**\n* @name Highcharts.ASTNode#attributes\n* @type {Highcharts.SVGAttributes|undefined}\n*/ /**\n* @name Highcharts.ASTNode#children\n* @type {Array<Highcharts.ASTNode>|undefined}\n*/ /**\n* @name Highcharts.ASTNode#tagName\n* @type {string|undefined}\n*/ /**\n* @name Highcharts.ASTNode#textContent\n* @type {string|undefined}\n*/\n(''); // Keeps doclets above in file\n\n;// ./code/grid/es-modules/Core/Chart/ChartDefaults.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  API Options\n *\n * */\n/**\n * General options for the chart.\n *\n * @optionparent chart\n */\nconst ChartDefaults = {\n    /**\n     * Default `mapData` for all series, in terms of a GeoJSON or TopoJSON\n     * object. If set to a string, it functions as an index into the\n     * `Highcharts.maps` array.\n     *\n     * For picking out individual shapes and geometries to use for each series\n     * of the map, see [series.mapData](#series.map.mapData).\n     *\n     * @sample    maps/demo/geojson\n     *            Loading GeoJSON data\n     * @sample    maps/chart/topojson\n     *            Loading TopoJSON data\n     *\n     * @type      {string|Array<*>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n     * @since     5.0.0\n     * @product   highmaps\n     * @apioption chart.map\n     */\n    /**\n     * Set lat/lon transformation definitions for the chart. If not defined,\n     * these are extracted from the map data.\n     *\n     * @type      {*}\n     * @since     5.0.0\n     * @product   highmaps\n     * @apioption chart.mapTransforms\n     */\n    /**\n     * When using multiple axes, the ticks of two or more opposite axes\n     * will automatically be aligned by adding ticks to the axis or axes\n     * with the least ticks, as if `tickAmount` were specified.\n     *\n     * This can be prevented by setting `alignTicks` to false. If the grid\n     * lines look messy, it's a good idea to hide them for the secondary\n     * axis by setting `gridLineWidth` to 0.\n     *\n     * If `startOnTick` or `endOnTick` in the axis options are set to false,\n     * then the `alignTicks ` will be disabled for the axis.\n     *\n     * Disabled for logarithmic axes.\n     *\n     * @sample {highcharts} highcharts/chart/alignticks-true/\n     *         True by default\n     * @sample {highcharts} highcharts/chart/alignticks-false/\n     *         False\n     * @sample {highstock} stock/chart/alignticks-true/\n     *         True by default\n     * @sample {highstock} stock/chart/alignticks-false/\n     *         False\n     *\n     * @type      {boolean}\n     * @default   true\n     * @product   highcharts highstock gantt\n     * @apioption chart.alignTicks\n     */\n    /**\n     * When using multiple axes, align the thresholds. When this is true, other\n     * ticks will also be aligned.\n     *\n     * Note that for line series and some other series types, the `threshold`\n     * option is set to `null` by default. This will in turn cause their y-axis\n     * to not have a threshold. In order to avoid that, set the series\n     * `threshold` to 0 or another number.\n     *\n     * If `startOnTick` or `endOnTick` in the axis options are set to false, or\n     * if the axis is logarithmic, the threshold will not be aligned.\n     *\n     * @sample {highcharts} highcharts/chart/alignthresholds/ Set to true\n     *\n     * @since 10.0.0\n     * @product   highcharts highstock gantt\n     * @apioption chart.alignThresholds\n     */\n    alignThresholds: false,\n    /**\n     * Set the overall animation for all chart updating. Animation can be\n     * disabled throughout the chart by setting it to false here. It can\n     * be overridden for each individual API method as a function parameter.\n     * The only animation not affected by this option is the initial series\n     * animation, see [plotOptions.series.animation](\n     * #plotOptions.series.animation).\n     *\n     * The animation can either be set as a boolean or a configuration\n     * object. If `true`, it will use the 'swing' jQuery easing and a\n     * duration of 500 ms. If used as a configuration object, the following\n     * properties are supported:\n     *\n     * - `defer`: The animation delay time in milliseconds.\n     *\n     * - `duration`: The duration of the animation in milliseconds.\n     *\n     * - `easing`: A string reference to an easing function set on the\n     *   `Math` object. See\n     *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n     *\n     * When zooming on a series with less than 100 points, the chart redraw\n     * will be done with animation, but in case of more data points, it is\n     * necessary to set this option to ensure animation on zoom.\n     *\n     * @sample {highcharts} highcharts/chart/animation-none/\n     *         Updating with no animation\n     * @sample {highcharts} highcharts/chart/animation-duration/\n     *         With a longer duration\n     * @sample {highcharts} highcharts/chart/animation-easing/\n     *         With a jQuery UI easing\n     * @sample {highmaps} maps/chart/animation-none/\n     *         Updating with no animation\n     * @sample {highmaps} maps/chart/animation-duration/\n     *         With a longer duration\n     *\n     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n     * @default   true\n     * @apioption chart.animation\n     */\n    /**\n     * A CSS class name to apply to the charts container `div`, allowing\n     * unique CSS styling for each chart.\n     *\n     * @type      {string}\n     * @apioption chart.className\n     */\n    /**\n     * Event listeners for the chart.\n     *\n     * @apioption chart.events\n     */\n    /**\n     * Fires when a series is added to the chart after load time, using the\n     * `addSeries` method. One parameter, `event`, is passed to the\n     * function, containing common event information. Through\n     * `event.options` you can access the series options that were passed to\n     * the `addSeries` method. Returning false prevents the series from\n     * being added.\n     *\n     * @sample {highcharts} highcharts/chart/events-addseries/\n     *         Alert on add series\n     * @sample {highstock} stock/chart/events-addseries/\n     *         Alert on add series\n     *\n     * @type      {Highcharts.ChartAddSeriesCallbackFunction}\n     * @since     1.2.0\n     * @context   Highcharts.Chart\n     * @apioption chart.events.addSeries\n     */\n    /**\n     * Fires when clicking on the plot background. One parameter, `event`,\n     * is passed to the function, containing common event information.\n     *\n     * Information on the clicked spot can be found through `event.xAxis`\n     * and `event.yAxis`, which are arrays containing the axes of each\n     * dimension and each axis' value at the clicked spot. The primary axes\n     * are `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n     * datetime axis is milliseconds since 1970-01-01 00:00:00.\n     *\n     * ```js\n     * click: function(e) {\n     *     console.log(\n     *         Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n     *         e.yAxis[0].value\n     *     )\n     * }\n     * ```\n     *\n     * @sample {highcharts} highcharts/chart/events-click/\n     *         Alert coordinates on click\n     * @sample {highcharts} highcharts/chart/events-container/\n     *         Alternatively, attach event to container\n     * @sample {highstock} stock/chart/events-click/\n     *         Alert coordinates on click\n     * @sample {highstock} highcharts/chart/events-container/\n     *         Alternatively, attach event to container\n     * @sample {highmaps} maps/chart/events-click/\n     *         Record coordinates on click\n     * @sample {highmaps} highcharts/chart/events-container/\n     *         Alternatively, attach event to container\n     *\n     * @type      {Highcharts.ChartClickCallbackFunction}\n     * @since     1.2.0\n     * @context   Highcharts.Chart\n     * @apioption chart.events.click\n     */\n    /**\n     * Fires when the chart is finished loading. Since v4.2.2, it also waits\n     * for images to be loaded, for example from point markers. One\n     * parameter, `event`, is passed to the function, containing common\n     * event information.\n     *\n     * There is also a second parameter to the chart constructor where a\n     * callback function can be passed to be executed on chart.load.\n     *\n     * @sample {highcharts} highcharts/chart/events-load/\n     *         Alert on chart load\n     * @sample {highcharts} highcharts/chart/events-render/\n     *         Load vs Redraw vs Render\n     * @sample {highstock} stock/chart/events-load/\n     *         Alert on chart load\n     * @sample {highmaps} maps/chart/events-load/\n     *         Add series on chart load\n     *\n     * @type      {Highcharts.ChartLoadCallbackFunction}\n     * @context   Highcharts.Chart\n     * @apioption chart.events.load\n     */\n    /**\n     * Fires when the chart is redrawn, either after a call to\n     * `chart.redraw()` or after an axis, series or point is modified with\n     * the `redraw` option set to `true`. One parameter, `event`, is passed\n     * to the function, containing common event information.\n     *\n     * @sample {highcharts} highcharts/chart/events-redraw/\n     *         Alert on chart redraw\n     * @sample {highcharts} highcharts/chart/events-render/\n     *         Load vs Redraw vs Render\n     * @sample {highstock} stock/chart/events-redraw/\n     *         Alert on chart redraw when adding a series or moving the\n     *         zoomed range\n     * @sample {highmaps} maps/chart/events-redraw/\n     *         Set subtitle on chart redraw\n     *\n     * @type      {Highcharts.ChartRedrawCallbackFunction}\n     * @since     1.2.0\n     * @context   Highcharts.Chart\n     * @apioption chart.events.redraw\n     */\n    /**\n     * Fires after initial load of the chart (directly after the `load`\n     * event), and after each redraw (directly after the `redraw` event).\n     *\n     * @sample {highcharts} highcharts/chart/events-render/\n     *         Load vs Redraw vs Render\n     *\n     * @type      {Highcharts.ChartRenderCallbackFunction}\n     * @since     5.0.7\n     * @context   Highcharts.Chart\n     * @apioption chart.events.render\n     */\n    /**\n     * Fires when an area of the chart has been selected. Selection is\n     * enabled by setting the chart's zoomType. One parameter, `event`, is\n     * passed to the function, containing common event information. The\n     * default action for the selection event is to zoom the chart to the\n     * selected area. It can be prevented by calling\n     * `event.preventDefault()` or return false.\n     *\n     * Information on the selected area can be found through `event.xAxis`\n     * and `event.yAxis`, which are arrays containing the axes of each\n     * dimension and each axis' min and max values. The primary axes are\n     * `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n     * datetime axis is milliseconds since 1970-01-01 00:00:00.\n     *\n     * ```js\n     * selection: function(event) {\n     *     // log the min and max of the primary, datetime x-axis\n     *     console.log(\n     *         Highcharts.dateFormat(\n     *             '%Y-%m-%d %H:%M:%S',\n     *             event.xAxis[0].min\n     *         ),\n     *         Highcharts.dateFormat(\n     *             '%Y-%m-%d %H:%M:%S',\n     *             event.xAxis[0].max\n     *         )\n     *     );\n     *     // log the min and max of the y axis\n     *     console.log(event.yAxis[0].min, event.yAxis[0].max);\n     * }\n     * ```\n     *\n     * @sample {highcharts} highcharts/chart/events-selection/\n     *         Report on selection and reset\n     * @sample {highcharts} highcharts/chart/events-selection-points/\n     *         Select a range of points through a drag selection\n     * @sample {highstock} stock/chart/events-selection/\n     *         Report on selection and reset\n     * @sample {highstock} highcharts/chart/events-selection-points/\n     *         Select a range of points through a drag selection\n     *         (Highcharts)\n     *\n     * @type      {Highcharts.ChartSelectionCallbackFunction}\n     * @apioption chart.events.selection\n     */\n    /**\n     * The margin between the outer edge of the chart and the plot area.\n     * The numbers in the array designate top, right, bottom and left\n     * respectively. Use the options `marginTop`, `marginRight`,\n     * `marginBottom` and `marginLeft` for shorthand setting of one option.\n     *\n     * By default there is no margin. The actual space is dynamically\n     * calculated from the offset of axis labels, axis title, title,\n     * subtitle and legend in addition to the `spacingTop`, `spacingRight`,\n     * `spacingBottom` and `spacingLeft` options.\n     *\n     * @sample {highcharts} highcharts/chart/margins-zero/\n     *         Zero margins\n     * @sample {highstock} stock/chart/margin-zero/\n     *         Zero margins\n     *\n     * @type      {number|Array<number>}\n     * @apioption chart.margin\n     */\n    /**\n     * The margin between the bottom outer edge of the chart and the plot\n     * area. Use this to set a fixed pixel value for the margin as opposed\n     * to the default dynamic margin. See also `spacingBottom`.\n     *\n     * @sample {highcharts} highcharts/chart/marginbottom/\n     *         100px bottom margin\n     * @sample {highstock} stock/chart/marginbottom/\n     *         100px bottom margin\n     * @sample {highmaps} maps/chart/margin/\n     *         100px margins\n     *\n     * @type      {number}\n     * @since     2.0\n     * @apioption chart.marginBottom\n     */\n    /**\n     * The margin between the left outer edge of the chart and the plot\n     * area. Use this to set a fixed pixel value for the margin as opposed\n     * to the default dynamic margin. See also `spacingLeft`.\n     *\n     * @sample {highcharts} highcharts/chart/marginleft/\n     *         150px left margin\n     * @sample {highstock} stock/chart/marginleft/\n     *         150px left margin\n     * @sample {highmaps} maps/chart/margin/\n     *         100px margins\n     *\n     * @type      {number}\n     * @since     2.0\n     * @apioption chart.marginLeft\n     */\n    /**\n     * The margin between the right outer edge of the chart and the plot\n     * area. Use this to set a fixed pixel value for the margin as opposed\n     * to the default dynamic margin. See also `spacingRight`.\n     *\n     * @sample {highcharts} highcharts/chart/marginright/\n     *         100px right margin\n     * @sample {highstock} stock/chart/marginright/\n     *         100px right margin\n     * @sample {highmaps} maps/chart/margin/\n     *         100px margins\n     *\n     * @type      {number}\n     * @since     2.0\n     * @apioption chart.marginRight\n     */\n    /**\n     * The margin between the top outer edge of the chart and the plot area.\n     * Use this to set a fixed pixel value for the margin as opposed to\n     * the default dynamic margin. See also `spacingTop`.\n     *\n     * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n     * @sample {highstock} stock/chart/margintop/\n     *         100px top margin\n     * @sample {highmaps} maps/chart/margin/\n     *         100px margins\n     *\n     * @type      {number}\n     * @since     2.0\n     * @apioption chart.marginTop\n     */\n    /**\n     * Callback function to override the default function that formats all\n     * the numbers in the chart. Returns a string with the formatted number.\n     *\n     * @sample highcharts/members/highcharts-numberformat\n     *      Arabic digits in Highcharts\n     * @type {Highcharts.NumberFormatterCallbackFunction}\n     * @since 8.0.0\n     * @apioption chart.numberFormatter\n     */\n    /**\n     * When a chart with an x and a y-axis is rendered, we first pre-render the\n     * labels of both in order to measure them. Then, if either of the axis\n     * labels take up so much space that it significantly affects the length of\n     * the other axis, we repeat the process.\n     *\n     * By default we stop at two axis layout runs, but it may be that the second\n     * run also alter the space required by either axis, for example if it\n     * causes the labels to rotate. In this situation, a subsequent redraw of\n     * the chart may cause the tick and label placement to change for apparently\n     * no reason.\n     *\n     * Use the `axisLayoutRuns` option to set the maximum allowed number of\n     * repetitions. But keep in mind that the default value of 2 is set because\n     * every run costs performance time.\n     *\n     * **Note:** Changing that option to higher than the default might decrease\n     * performance significantly, especially with bigger sets of data.\n     *\n     * @type      {number}\n     * @default   2\n     * @since     11.3.0\n     * @apioption chart.axisLayoutRuns\n     */\n    /**\n     * Allows setting a key to switch between zooming and panning. Can be\n     * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n     * key on Windows) or `shift`. The keys are mapped directly to the key\n     * properties of the click event argument (`event.altKey`,\n     * `event.ctrlKey`, `event.metaKey` and `event.shiftKey`).\n     *\n     * @type       {string}\n     * @since      4.0.3\n     * @product    highcharts gantt\n     * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n     * @apioption  chart.panKey\n     */\n    /**\n     * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n     * to combine zooming and panning.\n     *\n     * On touch devices, when the [tooltip.followTouchMove](\n     * #tooltip.followTouchMove) option is `true` (default), panning\n     * requires two fingers. To allow panning with one finger, set\n     * `followTouchMove` to `false`.\n     *\n     * @sample  {highcharts} highcharts/chart/pankey/ Zooming and panning\n     * @sample  {highstock} stock/chart/panning/ Zooming and xy panning\n     */\n    panning: {\n        /**\n         * Enable or disable chart panning.\n         *\n         * @type      {boolean}\n         * @default   {highcharts} false\n         * @default   {highstock|highmaps} true\n         */\n        enabled: false,\n        /**\n         * Decides in what dimensions the user can pan the chart. Can be\n         * one of `x`, `y`, or `xy`.\n         *\n         * During panning, all axes will behave as if\n         * [`startOnTick`](#yAxis.startOnTick) and\n         * [`endOnTick`](#yAxis.endOnTick) were set to `false`. After the\n         * panning action is finished, the axes will adjust to their actual\n         * settings.\n         *\n         * @sample {highcharts} highcharts/chart/panning-type\n         *         Zooming and xy panning\n         *\n         * @declare    Highcharts.OptionsChartPanningTypeValue\n         * @type       {string}\n         * @validvalue [\"x\", \"y\", \"xy\"]\n         * @product    highcharts highstock gantt\n         */\n        type: 'x'\n    },\n    /**\n     * Equivalent to [zoomType](#chart.zoomType), but for multitouch\n     * gestures only. By default, the `pinchType` is the same as the\n     * `zoomType` setting. However, pinching can be enabled separately in\n     * some cases, for example in stock charts where a mouse drag pans the\n     * chart, while pinching is enabled. When [tooltip.followTouchMove](\n     * #tooltip.followTouchMove) is true, pinchType only applies to\n     * two-finger touches.\n     *\n     * @type       {string}\n     * @default    {highcharts} undefined\n     * @default    {highstock} undefined\n     * @since      3.0\n     * @product    highcharts highstock gantt\n     * @deprecated\n     * @validvalue [\"x\", \"y\", \"xy\"]\n     * @apioption  chart.pinchType\n     */\n    /**\n     * Whether to apply styled mode. When in styled mode, no presentational\n     * attributes or CSS are applied to the chart SVG. Instead, CSS rules\n     * are required to style the chart. The default style sheet is\n     * available from `https://code.highcharts.com/css/highcharts.css`.\n     *\n     * [Read more in the docs](https://www.highcharts.com/docs/chart-design-and-style/style-by-css)\n     * on what classes and variables are available.\n     *\n     * @sample highcharts/css/colors\n     *         Color theming with CSS\n     * @sample highcharts/css/prefers-color-scheme\n     *         Dynamic theme based on system settings\n     * @type       {boolean}\n     * @default    false\n     * @since      7.0\n     * @apioption  chart.styledMode\n     */\n    styledMode: false,\n    /**\n     * The corner radius of the outer chart border.\n     *\n     * @sample {highcharts} highcharts/chart/borderradius/\n     *         20px radius\n     * @sample {highstock} stock/chart/border/\n     *         10px radius\n     * @sample {highmaps} maps/chart/border/\n     *         Border options\n     *\n     */\n    borderRadius: 0,\n    /**\n     * In styled mode, this sets how many colors the class names\n     * should rotate between. With ten colors, series (or points) are\n     * given class names like `highcharts-color-0`, `highcharts-color-1`\n     * [...] `highcharts-color-9`. The equivalent in non-styled mode\n     * is to set colors using the [colors](#colors) setting.\n     *\n     * @since      5.0.0\n     */\n    colorCount: 10,\n    /**\n     * By default, (because of memory and performance reasons) the chart does\n     * not copy the data but keeps it as a reference. In some cases, this might\n     * result in mutating the original data source. In order to prevent that,\n     * set that property to false. Please note that changing that might decrease\n     * performance, especially with bigger sets of data.\n     *\n     * @type       {boolean}\n     * @since 10.1.0\n     */\n    allowMutatingData: true,\n    /**\n     * If true, the axes will scale to the remaining visible series once\n     * one series is hidden. If false, hiding and showing a series will\n     * not affect the axes or the other series. For stacks, once one series\n     * within the stack is hidden, the rest of the stack will close in\n     * around it even if the axis is not affected.\n     *\n     * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n     *         True by default\n     * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n     *         False\n     * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n     *         True with stack\n     * @sample {highstock} stock/chart/ignorehiddenseries-true/\n     *         True by default\n     * @sample {highstock} stock/chart/ignorehiddenseries-false/\n     *         False\n     *\n     * @since   1.2.0\n     * @product highcharts highstock gantt\n     */\n    ignoreHiddenSeries: true,\n    /**\n     * Whether to invert the axes so that the x axis is vertical and y axis\n     * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n     * by default.\n     *\n     * @productdesc {highcharts}\n     * If a bar series is present in the chart, it will be inverted\n     * automatically. Inverting the chart doesn't have an effect if there\n     * are no cartesian series in the chart.\n     *\n     * @sample {highcharts} highcharts/chart/inverted/\n     *         Inverted line\n     * @sample {highstock} stock/navigator/inverted/\n     *         Inverted stock chart\n     *\n     * @type      {boolean}\n     * @default   false\n     * @product   highcharts highstock gantt\n     * @apioption chart.inverted\n     */\n    /**\n     * The distance between the outer edge of the chart and the content,\n     * like title or legend, or axis title and labels if present. The\n     * numbers in the array designate top, right, bottom and left\n     * respectively. Use the options spacingTop, spacingRight, spacingBottom\n     * and spacingLeft options for shorthand setting of one option.\n     *\n     * @type    {Array<number>}\n     * @see     [chart.margin](#chart.margin)\n     * @default [10, 10, 15, 10]\n     * @since   3.0.6\n     */\n    spacing: [10, 10, 15, 10],\n    /**\n     * The button that appears after a selection zoom, allowing the user\n     * to reset zoom. This option is deprecated in favor of\n     * [zooming](#chart.zooming).\n     *\n     * @since      2.2\n     * @deprecated 10.2.1\n     */\n    resetZoomButton: {\n        /**\n         * What frame the button placement should be related to. Can be\n         * either `plotBox` or `spacingBox`.\n         *\n         * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n         *         Relative to the chart\n         * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n         *         Relative to the chart\n         *\n         * @type      {Highcharts.ButtonRelativeToValue}\n         * @apioption chart.resetZoomButton.relativeTo\n         */\n        /**\n         * A collection of attributes for the button. The object takes SVG\n         * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n         * border radius. The theme also supports `style`, a collection of\n         * CSS properties for the text. Equivalent attributes for the hover\n         * state are given in `theme.states.hover`.\n         *\n         * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n         *         Theming the button\n         * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n         *         Theming the button\n         *\n         * @type {Highcharts.SVGAttributes}\n         */\n        theme: {\n        /**\n         * The z-index of the button.\n         *\n         * @type {number}\n         * @apioption chart.resetZoomButton.theme.zIndex\n         */\n        },\n        /**\n         * The position of the button.\n         *\n         * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n         *         Above the plot area\n         * @sample {highstock} highcharts/chart/resetzoombutton-position/\n         *         Above the plot area\n         * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n         *         Above the plot area\n         *\n         * @type {Highcharts.AlignObject}\n         */\n        position: {\n        /**\n         * The horizontal alignment of the button.\n         *\n         * @type {number}\n         * @apioption chart.resetZoomButton.position.align\n         */\n        /**\n         * The horizontal offset of the button.\n         *\n         * @type {number}\n         * @apioption chart.resetZoomButton.position.x\n         */\n        /**\n         * The vertical alignment of the button.\n         *\n         * @type      {Highcharts.VerticalAlignValue}\n         * @apioption chart.resetZoomButton.position.verticalAlign\n         */\n        /**\n         * The vertical offset of the button.\n         *\n         * @type {number}\n         * @apioption chart.resetZoomButton.position.y\n         */\n        }\n    },\n    /**\n     * The pixel width of the plot area border.\n     *\n     * @sample {highcharts} highcharts/chart/plotborderwidth/\n     *         1px border\n     * @sample {highstock} stock/chart/plotborder/\n     *         2px border\n     * @sample {highmaps} maps/chart/plotborder/\n     *         Plot border options\n     *\n     * @type      {number}\n     * @default   0\n     * @apioption chart.plotBorderWidth\n     */\n    /**\n     * Whether to apply a drop shadow to the plot area. Requires that\n     * plotBackgroundColor be set. The shadow can be an object configuration\n     * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n     *\n     * @sample {highcharts} highcharts/chart/plotshadow/\n     *         Plot shadow\n     * @sample {highstock} stock/chart/plotshadow/\n     *         Plot shadow\n     * @sample {highmaps} maps/chart/plotborder/\n     *         Plot border options\n     *\n     * @type      {boolean|Highcharts.ShadowOptionsObject}\n     * @default   false\n     * @apioption chart.plotShadow\n     */\n    /**\n     * When true, cartesian charts like line, spline, area and column are\n     * transformed into the polar coordinate system. This produces _polar\n     * charts_, also known as _radar charts_.\n     *\n     * @sample {highcharts} highcharts/demo/polar/\n     *         Polar chart\n     * @sample {highcharts} highcharts/demo/polar-wind-rose/\n     *         Wind rose, stacked polar column chart\n     * @sample {highcharts} highcharts/demo/polar-spider/\n     *         Spider web chart\n     * @sample {highcharts} highcharts/parallel-coordinates/polar/\n     *         Star plot, multivariate data in a polar chart\n     *\n     * @type      {boolean}\n     * @default   false\n     * @since     2.3.0\n     * @product   highcharts\n     * @requires  highcharts-more\n     * @apioption chart.polar\n     */\n    /**\n     * Whether to reflow the chart to fit the width of the container div\n     * on resizing the window.\n     *\n     * @sample {highcharts} highcharts/chart/reflow-true/\n     *         True by default\n     * @sample {highcharts} highcharts/chart/reflow-false/\n     *         False\n     * @sample {highstock} stock/chart/reflow-true/\n     *         True by default\n     * @sample {highstock} stock/chart/reflow-false/\n     *         False\n     * @sample {highmaps} maps/chart/reflow-true/\n     *         True by default\n     * @sample {highmaps} maps/chart/reflow-false/\n     *         False\n     *\n     * @since     2.1\n     */\n    reflow: true,\n    /**\n     * The HTML element where the chart will be rendered. If it is a string,\n     * the element by that id is used. The HTML element can also be passed\n     * by direct reference, or as the first argument of the chart\n     * constructor, in which case the option is not needed.\n     *\n     * @sample {highcharts} highcharts/chart/reflow-true/\n     *         String\n     * @sample {highcharts} highcharts/chart/renderto-object/\n     *         Object reference\n     * @sample {highstock} stock/chart/renderto-string/\n     *         String\n     * @sample {highstock} stock/chart/renderto-object/\n     *         Object reference\n     *\n     * @type      {string|Highcharts.HTMLDOMElement}\n     * @apioption chart.renderTo\n     */\n    /**\n     * The background color of the marker square when selecting (zooming\n     * in on) an area of the chart.\n     *\n     * @see In styled mode, the selection marker fill is set with the\n     *      `.highcharts-selection-marker` class.\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @default   rgba(51,92,173,0.25)\n     * @since     2.1.7\n     * @apioption chart.selectionMarkerFill\n     */\n    /**\n     * Whether to apply a drop shadow to the global series group. This causes\n     * all the series to have the same shadow. Contrary to the `series.shadow`\n     * option, this prevents items from casting shadows on each other, like for\n     * others series in a stack. The shadow can be an object configuration\n     * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n     *\n     * @sample highcharts/chart/seriesgroupshadow/ Shadow\n     *\n     * @type      {boolean|Highcharts.ShadowOptionsObject}\n     * @default   false\n     * @apioption chart.shadow\n     */\n    /**\n     * Whether to apply a drop shadow to the outer chart area. Requires\n     * that backgroundColor be set. The shadow can be an object\n     * configuration containing `color`, `offsetX`, `offsetY`, `opacity` and\n     * `width`.\n     *\n     * @sample {highcharts} highcharts/chart/shadow/\n     *         Shadow\n     * @sample {highstock} stock/chart/shadow/\n     *         Shadow\n     * @sample {highmaps} maps/chart/border/\n     *         Chart border and shadow\n     *\n     * @type      {boolean|Highcharts.ShadowOptionsObject}\n     * @default   false\n     * @apioption chart.shadow\n     */\n    /**\n     * Whether to show the axes initially. This only applies to empty charts\n     * where series are added dynamically, as axes are automatically added\n     * to cartesian series.\n     *\n     * @sample {highcharts} highcharts/chart/showaxes-false/\n     *         False by default\n     * @sample {highcharts} highcharts/chart/showaxes-true/\n     *         True\n     *\n     * @type      {boolean}\n     * @since     1.2.5\n     * @product   highcharts gantt\n     * @apioption chart.showAxes\n     */\n    /**\n     * The space between the bottom edge of the chart and the content (plot\n     * area, axis title and labels, title, subtitle or legend in top\n     * position).\n     *\n     * @sample {highcharts} highcharts/chart/spacingbottom/\n     *         Spacing bottom set to 100\n     * @sample {highstock} stock/chart/spacingbottom/\n     *         Spacing bottom set to 100\n     * @sample {highmaps} maps/chart/spacing/\n     *         Spacing 100 all around\n     *\n     * @type      {number}\n     * @default   15\n     * @since     2.1\n     * @apioption chart.spacingBottom\n     */\n    /**\n     * The space between the left edge of the chart and the content (plot\n     * area, axis title and labels, title, subtitle or legend in top\n     * position).\n     *\n     * @sample {highcharts} highcharts/chart/spacingleft/\n     *         Spacing left set to 100\n     * @sample {highstock} stock/chart/spacingleft/\n     *         Spacing left set to 100\n     * @sample {highmaps} maps/chart/spacing/\n     *         Spacing 100 all around\n     *\n     * @type      {number}\n     * @default   10\n     * @since     2.1\n     * @apioption chart.spacingLeft\n     */\n    /**\n     * The space between the right edge of the chart and the content (plot\n     * area, axis title and labels, title, subtitle or legend in top\n     * position).\n     *\n     * @sample {highcharts} highcharts/chart/spacingright-100/\n     *         Spacing set to 100\n     * @sample {highcharts} highcharts/chart/spacingright-legend/\n     *         Legend in right position with default spacing\n     * @sample {highstock} stock/chart/spacingright/\n     *         Spacing set to 100\n     * @sample {highmaps} maps/chart/spacing/\n     *         Spacing 100 all around\n     *\n     * @type      {number}\n     * @default   10\n     * @since     2.1\n     * @apioption chart.spacingRight\n     */\n    /**\n     * The space between the top edge of the chart and the content (plot\n     * area, axis title and labels, title, subtitle or legend in top\n     * position).\n     *\n     * @sample {highcharts} highcharts/chart/spacingtop-100/\n     *         A top spacing of 100\n     * @sample {highcharts} highcharts/chart/spacingtop-10/\n     *         Floating chart title makes the plot area align to the default\n     *         spacingTop of 10.\n     * @sample {highstock} stock/chart/spacingtop/\n     *         A top spacing of 100\n     * @sample {highmaps} maps/chart/spacing/\n     *         Spacing 100 all around\n     *\n     * @type      {number}\n     * @default   10\n     * @since     2.1\n     * @apioption chart.spacingTop\n     */\n    /**\n     * Additional CSS styles to apply inline to the container `div` and the root\n     * SVG.\n     *\n     * According to the CSS syntax documentation, it is recommended to quote\n     * font family names that contain white space, digits, or punctuation\n     * characters other than hyphens. In such cases, wrap the fontFamily\n     * name as follows: `fontFamily: '\"Font name\"'`.\n     *\n     * Since v11, the root font size is 1rem by default, and all child element\n     * are given a relative `em` font size by default. This allows implementers\n     * to control all the chart's font sizes by only setting the root level.\n     *\n     * @see    In styled mode, general chart styles can be set with the\n     *         `.highcharts-root` class.\n     * @sample {highcharts} highcharts/chart/style-serif-font/\n     *         Using a serif type font\n     * @sample {highcharts} highcharts/chart/style-special-font/\n     *         Using a font with special character in name\n     * @sample {highcharts} highcharts/members/relative-font-size/\n     *         Relative font sizes\n     * @sample {highcharts} highcharts/css/em/\n     *         Styled mode with relative font sizes\n     * @sample {highstock} stock/chart/style/\n     *         Using a serif type font\n     * @sample {highmaps} maps/chart/style-serif-font/\n     *         Using a serif type font\n     *\n     * @type      {Highcharts.CSSObject}\n     * @default   {\"fontFamily\": \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', sans-serif\", \"fontSize\":\"1rem\"}\n     * @apioption chart.style\n     */\n    /**\n     * The default series type for the chart. Can be any of the chart types\n     * listed under [plotOptions](#plotOptions) and [series](#series) or can\n     * be a series provided by an additional module.\n     *\n     * In TypeScript this option has no effect in sense of typing and\n     * instead the `type` option must always be set in the series.\n     *\n     * @sample {highcharts} highcharts/chart/type-bar/\n     *         Bar\n     * @sample {highstock} stock/chart/type/\n     *         Areaspline\n     * @sample {highmaps} maps/chart/type-mapline/\n     *         Mapline\n     *\n     * @type       {string}\n     * @default    {highcharts} line\n     * @default    {highstock} line\n     * @default    {highmaps} map\n     * @since      2.1.0\n     * @apioption  chart.type\n     */\n    type: 'line',\n    /**\n     * Decides in what dimensions the user can zoom by dragging the mouse.\n     * Can be one of `x`, `y` or `xy`.\n     *\n     * @see [panKey](#chart.panKey)\n     *\n     * @sample {highcharts} highcharts/chart/zoomtype-none/\n     *         None by default\n     * @sample {highcharts} highcharts/chart/zoomtype-x/\n     *         X\n     * @sample {highcharts} highcharts/chart/zoomtype-y/\n     *         Y\n     * @sample {highcharts} highcharts/chart/zoomtype-xy/\n     *         Xy\n     * @sample {highcharts} highcharts/chart/zoomtype-polar/\n     *         Zoom on polar chart\n     * @sample {highstock} stock/demo/basic-line/\n     *         None by default\n     * @sample {highstock} stock/chart/zoomtype-x/\n     *         X\n     * @sample {highstock} stock/chart/zoomtype-y/\n     *         Y\n     * @sample {highstock} stock/chart/zoomtype-xy/\n     *         Xy\n     * @sample {highmaps} maps/chart/zoomtype-xy/\n     *         Map with selection zoom\n     *\n     * @type       {string}\n     * @validvalue [\"x\", \"y\", \"xy\"]\n     * @deprecated\n     * @apioption  chart.zoomType\n     */\n    /**\n     * Enables zooming by a single touch, in combination with\n     * [chart.zoomType](#chart.zoomType). When enabled, two-finger pinch\n     * will still work as set up by [chart.pinchType](#chart.pinchType).\n     * However, `zoomBySingleTouch` will interfere with touch-dragging the\n     * chart to read the tooltip. And especially when vertical zooming is\n     * enabled, it will make it hard to scroll vertically on the page.\n     * @since      9.0.0\n     * @sample     highcharts/chart/zoombysingletouch\n     *             Zoom by single touch enabled, with buttons to toggle\n     * @product    highcharts highstock gantt\n     * @deprecated\n     */\n    /**\n     * Chart zooming options.\n     * @since 10.2.1\n     */\n    zooming: {\n        /**\n         * Equivalent to [type](#chart.zooming.type), but for multitouch\n         * gestures only. By default, the `pinchType` is the same as the\n         * `type` setting. However, pinching can be enabled separately in\n         * some cases, for example in stock charts where a mouse drag pans the\n         * chart, while pinching is enabled. When [tooltip.followTouchMove](\n         * #tooltip.followTouchMove) is true, pinchType only applies to\n         * two-finger touches.\n         *\n         * @type       {string}\n         * @default    {highcharts} undefined\n         * @default    {highstock} x\n         * @product    highcharts highstock gantt\n         * @validvalue [\"x\", \"y\", \"xy\"]\n         * @apioption  chart.zooming.pinchType\n         */\n        /**\n         * Decides in what dimensions the user can zoom by dragging the mouse.\n         * Can be one of `x`, `y` or `xy`.\n         *\n         * @declare    Highcharts.OptionsChartZoomingTypeValue\n         * @type       {string}\n         * @default    {highcharts} undefined\n         * @product    highcharts highstock gantt\n         * @validvalue [\"x\", \"y\", \"xy\"]\n         * @apioption  chart.zooming.type\n         */\n        /**\n         * Set a key to hold when dragging to zoom the chart. This is useful to\n         * avoid zooming while moving points. Should be set different than\n         * [chart.panKey](#chart.panKey).\n         *\n         * @type       {string}\n         * @default    {highcharts} undefined\n         * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n         * @requires   modules/draggable-points\n         * @apioption  chart.zooming.key\n         */\n        /**\n         * Enables zooming by a single touch, in combination with\n         * [chart.zooming.type](#chart.zooming.type). When enabled, two-finger\n         * pinch will still work as set up by [chart.zooming.pinchType]\n         * (#chart.zooming.pinchType). However, `singleTouch` will interfere\n         * with touch-dragging the chart to read the tooltip. And especially\n         * when vertical zooming is enabled, it will make it hard to scroll\n         * vertically on the page.\n         *\n         * @sample  highcharts/chart/zoombysingletouch\n         *          Zoom by single touch enabled, with buttons to toggle\n         *\n         * @product highcharts highstock gantt\n         */\n        singleTouch: false,\n        /**\n         * The button that appears after a selection zoom, allowing the user\n         * to reset zoom.\n         */\n        resetButton: {\n            /**\n             * What frame the button placement should be related to. Can be\n             * either `plotBox` or `spacingBox`.\n             *\n             * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n             *         Relative to the chart\n             * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n             *         Relative to the chart\n             *\n             * @type      {Highcharts.ButtonRelativeToValue}\n             * @default   plot\n             * @apioption chart.zooming.resetButton.relativeTo\n             */\n            /**\n             * A collection of attributes for the button. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n             * border radius. The theme also supports `style`, a collection of\n             * CSS properties for the text. Equivalent attributes for the hover\n             * state are given in `theme.states.hover`.\n             *\n             * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n             *         Theming the button\n             * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n             *         Theming the button\n             *\n             * @type  {Highcharts.SVGAttributes}\n             * @since 10.2.1\n             */\n            theme: {\n                /** @internal */\n                zIndex: 6\n            },\n            /**\n             * The position of the button.\n             *\n             * Note: Adjusting position values might cause overlap with chart\n             * elements. Ensure coordinates do not obstruct other components or\n             * data visibility.\n             *\n             * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n             *         Above the plot area\n             * @sample {highstock} highcharts/chart/resetzoombutton-position/\n             *         Above the plot area\n             * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n             *         Above the plot area\n             *\n             * @type  {Highcharts.AlignObject}\n             * @since 10.2.1\n             */\n            position: {\n                /**\n                 * The horizontal alignment of the button.\n                 */\n                align: 'right',\n                /**\n                 * The horizontal offset of the button.\n                 */\n                x: -10,\n                /**\n                 * The vertical alignment of the button.\n                 *\n                 * @type       {Highcharts.VerticalAlignValue}\n                 * @default    top\n                 * @apioption  chart.zooming.resetButton.position.verticalAlign\n                 */\n                /**\n                 * The vertical offset of the button.\n                 */\n                y: 10\n            }\n        }\n    },\n    /**\n     * An explicit width for the chart. By default (when `null`) the width\n     * is calculated from the offset width of the containing element.\n     *\n     * @sample {highcharts} highcharts/chart/width/\n     *         800px wide\n     * @sample {highstock} stock/chart/width/\n     *         800px wide\n     * @sample {highmaps} maps/chart/size/\n     *         Chart with explicit size\n     *\n     * @type {null|number|string}\n     */\n    width: null,\n    /**\n     * An explicit height for the chart. If a _number_, the height is\n     * given in pixels. If given a _percentage string_ (for example\n     * `'56%'`), the height is given as the percentage of the actual chart\n     * width. This allows for preserving the aspect ratio across responsive\n     * sizes.\n     *\n     * By default (when `null`) the height is calculated from the offset\n     * height of the containing element, or 400 pixels if the containing\n     * element's height is 0.\n     *\n     * @sample {highcharts} highcharts/chart/height/\n     *         Forced 200px height\n     * @sample {highstock} stock/chart/height/\n     *         300px height\n     * @sample {highmaps} maps/chart/size/\n     *         Chart with explicit size\n     * @sample highcharts/chart/height-percent/\n     *         Highcharts with percentage height\n     * @sample highcharts/chart/height-inherited/\n     *         Chart with inherited height\n     *\n     * @type {null|number|string}\n     */\n    height: null,\n    /**\n     * The color of the outer chart border.\n     *\n     * @see In styled mode, the stroke is set with the\n     *      `.highcharts-background` class.\n     *\n     * @sample {highcharts} highcharts/chart/bordercolor/\n     *         Brown border\n     * @sample {highstock} stock/chart/border/\n     *         Brown border\n     * @sample {highmaps} maps/chart/border/\n     *         Border options\n     *\n     * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     */\n    borderColor: \"#334eff\" /* Palette.highlightColor80 */,\n    /**\n     * The pixel width of the outer chart border.\n     *\n     * @see In styled mode, the stroke is set with the\n     *      `.highcharts-background` class.\n     *\n     * @sample {highcharts} highcharts/chart/borderwidth/\n     *         5px border\n     * @sample {highstock} stock/chart/border/\n     *         2px border\n     * @sample {highmaps} maps/chart/border/\n     *         Border options\n     *\n     * @type      {number}\n     * @default   0\n     * @apioption chart.borderWidth\n     */\n    /**\n     * The background color or gradient for the outer chart area.\n     *\n     * @see In styled mode, the background is set with the\n     *      `.highcharts-background` class.\n     *\n     * @sample {highcharts} highcharts/chart/backgroundcolor-color/\n     *         Color\n     * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/\n     *         Gradient\n     * @sample {highstock} stock/chart/backgroundcolor-color/\n     *         Color\n     * @sample {highstock} stock/chart/backgroundcolor-gradient/\n     *         Gradient\n     * @sample {highmaps} maps/chart/backgroundcolor-color/\n     *         Color\n     * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n     *         Gradient\n     *\n     * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     */\n    backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n    /**\n     * The background color or gradient for the plot area.\n     *\n     * @see In styled mode, the plot background is set with the\n     *      `.highcharts-plot-background` class.\n     *\n     * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n     *         Color\n     * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n     *         Gradient\n     * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n     *         Color\n     * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n     *         Gradient\n     * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n     *         Color\n     * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n     *         Gradient\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @apioption chart.plotBackgroundColor\n     */\n    /**\n     * The URL for an image to use as the plot background. To set an image\n     * as the background for the entire chart, set a CSS background image\n     * to the container element. Note that for the image to be applied to\n     * exported charts, its URL needs to be accessible by the export server.\n     *\n     * @see In styled mode, a plot background image can be set with the\n     *      `.highcharts-plot-background` class and a [custom pattern](\n     *      https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\n     *\n     * @sample {highcharts} highcharts/chart/plotbackgroundimage/\n     *         Skies\n     * @sample {highstock} stock/chart/plotbackgroundimage/\n     *         Skies\n     *\n     * @type      {string}\n     * @apioption chart.plotBackgroundImage\n     */\n    /**\n     * The color of the inner chart or plot area border.\n     *\n     * @see In styled mode, a plot border stroke can be set with the\n     *      `.highcharts-plot-border` class.\n     *\n     * @sample {highcharts} highcharts/chart/plotbordercolor/\n     *         Blue border\n     * @sample {highstock} stock/chart/plotborder/\n     *         Blue border\n     * @sample {highmaps} maps/chart/plotborder/\n     *         Plot border options\n     *\n     * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     */\n    plotBorderColor: \"#cccccc\" /* Palette.neutralColor20 */\n};\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Chart_ChartDefaults = (ChartDefaults);\n\n;// ./code/grid/es-modules/Core/Color/Palettes.js\n/*\n * Series palettes for Highcharts. Series colors are defined in highcharts.css.\n * **Do not edit this file!** This file is generated using the 'gulp palette' task.\n */\nconst SeriesPalettes = {\n    /**\n     * Colors for data series and points\n     */\n    colors: [\n        '#2caffe',\n        '#544fc5',\n        '#00e272',\n        '#fe6a35',\n        '#6b8abc',\n        '#d568fb',\n        '#2ee0ca',\n        '#fa4b42',\n        '#feb56a',\n        '#91e8e1'\n    ],\n};\n/* harmony default export */ const Palettes = (SeriesPalettes);\n\n;// ./code/grid/es-modules/Shared/TimeBase.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { pageLang, win: TimeBase_win } = Core_Globals;\n\nconst { defined: TimeBase_defined, error: TimeBase_error, extend: TimeBase_extend, isNumber: TimeBase_isNumber, isObject: TimeBase_isObject, isString: TimeBase_isString, merge: TimeBase_merge, objectEach: TimeBase_objectEach, pad: TimeBase_pad, splat: TimeBase_splat, timeUnits: TimeBase_timeUnits, ucfirst: TimeBase_ucfirst } = Core_Utilities;\n/* *\n *\n *  Constants\n *\n * */\n// To do: Remove this when we no longer need support for Safari < v14.1\nconst hasOldSafariBug = Core_Globals.isSafari &&\n    TimeBase_win.Intl &&\n    !TimeBase_win.Intl.DateTimeFormat.prototype.formatRange;\nconst isDateTimeFormatOptions = (obj) => obj.main === void 0;\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable no-invalid-this, valid-jsdoc */\n/**\n * The Time class. Time settings are applied in general for each page using\n * `Highcharts.setOptions`, or individually for each Chart item through the\n * [time](https://api.highcharts.com/highcharts/time) options set.\n *\n * The Time object is available from {@link Highcharts.Chart#time}, which refers\n * to  `Highcharts.time` unless individual time settings are applied for each\n * chart.\n *\n * When configuring time settings for individual chart instances, be aware that\n * using `Highcharts.dateFormat` or `Highcharts.time.dateFormat` within\n * formatter callbacks relies on the global time object, which applies the\n * global language and time zone settings. To ensure charts with local time\n * settings function correctly, use `chart.time.dateFormat? instead. However,\n * the recommended best practice is to use `setOptions` to define global time\n * settings unless specific configurations are needed for each chart.\n *\n * @example\n * // Apply time settings globally\n * Highcharts.setOptions({\n *     time: {\n *         timezone: 'Europe/London'\n *     }\n * });\n *\n * // Apply time settings by instance\n * const chart = Highcharts.chart('container', {\n *     time: {\n *         timezone: 'America/New_York'\n *     },\n *     series: [{\n *         data: [1, 4, 3, 5]\n *     }]\n * });\n *\n * // Use the Time object of a chart instance\n * console.log(\n *        'Current time in New York',\n *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n * );\n *\n * // Standalone use\n * const time = new Highcharts.Time({\n *    timezone: 'America/New_York'\n * });\n * const s = time.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2020, 0, 1));\n * console.log(s); // => 2019-12-31 19:00:00\n *\n * @since 6.0.5\n *\n * @class\n * @name Highcharts.Time\n *\n * @param {Highcharts.TimeOptions} [options] Time options as defined in\n * [chart.options.time](/highcharts/time).\n */\nclass TimeBase {\n    /* *\n     *\n     *  Constructors\n     *\n     * */\n    constructor(options, lang) {\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        this.options = {\n            timezone: 'UTC'\n        };\n        this.variableTimezone = false;\n        this.Date = TimeBase_win.Date;\n        this.update(options);\n        this.lang = lang;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Update the Time object with current options. It is called internally on\n     * initializing Highcharts, after running `Highcharts.setOptions` and on\n     * `Chart.update`.\n     *\n     * @private\n     * @function Highcharts.Time#update\n     *\n     * @param {Highcharts.TimeOptions} [options]\n     *\n     */\n    update(options = {}) {\n        this.dTLCache = {};\n        this.options = options = TimeBase_merge(true, this.options, options);\n        const { timezoneOffset, useUTC } = options;\n        // Allow using a different Date class\n        this.Date = options.Date || TimeBase_win.Date || Date;\n        // Assign the time zone. Handle the legacy, deprecated `useUTC` option.\n        let timezone = options.timezone;\n        if (TimeBase_defined(useUTC)) {\n            timezone = useUTC ? 'UTC' : void 0;\n        }\n        // The Etc/GMT time zones do not support offsets with half-hour\n        // resolutions\n        if (timezoneOffset && timezoneOffset % 60 === 0) {\n            timezone = 'Etc/GMT' + ((timezoneOffset > 0 ? '+' : '')) + timezoneOffset / 60;\n        }\n        /*\n         * The time object has options allowing for variable time zones, meaning\n         * the axis ticks or series data needs to consider this.\n         */\n        this.variableTimezone = timezone !== 'UTC' &&\n            timezone?.indexOf('Etc/GMT') !== 0;\n        this.timezone = timezone;\n        // Assign default time formats from locale strings\n        ['months', 'shortMonths', 'weekdays', 'shortWeekdays'].forEach((name) => {\n            const isMonth = /months/i.test(name), isShort = /short/.test(name), options = {\n                timeZone: 'UTC'\n            };\n            options[isMonth ? 'month' : 'weekday'] = isShort ? 'short' : 'long';\n            this[name] = (isMonth ?\n                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] :\n                [3, 4, 5, 6, 7, 8, 9]).map((position) => this.dateFormat(options, (isMonth ? 31 : 1) * 24 * 36e5 * position));\n        });\n    }\n    /**\n     * Get a date in terms of numbers (year, month, day etc) for further\n     * processing. Takes the current `timezone` setting into account. Inverse of\n     * `makeTime` and the native `Date` constructor and `Date.UTC`.\n     *\n     * The date is returned in array format with the following indices:\n     *\n     * 0: year,\n     * 1: month (zero based),\n     * 2: day,\n     * 3: hours,\n     * 4: minutes,\n     * 5: seconds,\n     * 6: milliseconds,\n     * 7: weekday (Sunday as 0)\n     *\n     * @function Highcharts.Time#toParts\n     *\n     * @param {number|Date} [timestamp]\n     *                 The timestamp in milliseconds since January 1st 1970.\n     *                 A Date object is also accepted.\n     *\n     * @return {Array<number>} The date parts in array format.\n     */\n    toParts(timestamp) {\n        const [weekday, dayOfMonth, month, year, hours, minutes, seconds] = this.dateTimeFormat({\n            weekday: 'narrow',\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric'\n        }, timestamp, 'es')\n            // The ', ' splitter is for all modern browsers:\n            //      L, 6/3/2023, 14:30:00\n            // The ' ' splitter is for legacy Safari with no comma between date\n            // and time (#22445):\n            //      L, 6/3/2023 14:30:00\n            .split(/(?:, | |\\/|:)/g);\n        return [\n            year,\n            +month - 1,\n            dayOfMonth,\n            hours,\n            minutes,\n            seconds,\n            // Milliseconds\n            Math.floor(Number(timestamp) || 0) % 1000,\n            // Spanish weekday index\n            'DLMXJVS'.indexOf(weekday)\n        ].map(Number);\n    }\n    /**\n     * Shorthand to get a cached `Intl.DateTimeFormat` instance.\n     */\n    dateTimeFormat(options, timestamp, locale = this.options.locale || pageLang) {\n        const cacheKey = JSON.stringify(options) + locale;\n        if (TimeBase_isString(options)) {\n            options = this.str2dtf(options);\n        }\n        let dTL = this.dTLCache[cacheKey];\n        if (!dTL) {\n            options.timeZone ?? (options.timeZone = this.timezone);\n            try {\n                dTL = new Intl.DateTimeFormat(locale, options);\n            }\n            catch (e) {\n                if (/Invalid time zone/i.test(e.message)) {\n                    TimeBase_error(34);\n                    options.timeZone = 'UTC';\n                    dTL = new Intl.DateTimeFormat(locale, options);\n                }\n                else {\n                    TimeBase_error(e.message, false);\n                }\n            }\n        }\n        this.dTLCache[cacheKey] = dTL;\n        return dTL?.format(timestamp) || '';\n    }\n    /**\n     * Take a locale-aware string format and return a full DateTimeFormat in\n     * object form.\n     */\n    str2dtf(s, dtf = {}) {\n        const mapping = {\n            L: { fractionalSecondDigits: 3 },\n            S: { second: '2-digit' },\n            M: { minute: 'numeric' },\n            H: { hour: '2-digit' },\n            k: { hour: 'numeric' },\n            E: { weekday: 'narrow' },\n            a: { weekday: 'short' },\n            A: { weekday: 'long' },\n            d: { day: '2-digit' },\n            e: { day: 'numeric' },\n            b: { month: 'short' },\n            B: { month: 'long' },\n            m: { month: '2-digit' },\n            o: { month: 'numeric' },\n            y: { year: '2-digit' },\n            Y: { year: 'numeric' }\n        };\n        Object.keys(mapping).forEach((key) => {\n            if (s.indexOf(key) !== -1) {\n                TimeBase_extend(dtf, mapping[key]);\n            }\n        });\n        return dtf;\n    }\n    /**\n     * Make a time and returns milliseconds. Similar to `Date.UTC`, but takes\n     * the current `timezone` setting into account.\n     *\n     * @function Highcharts.Time#makeTime\n     *\n     * @param {number} year\n     *        The year\n     *\n     * @param {number} month\n     *        The month. Zero-based, so January is 0.\n     *\n     * @param {number} [date=1]\n     *        The day of the month\n     *\n     * @param {number} [hours=0]\n     *        The hour of the day, 0-23.\n     *\n     * @param {number} [minutes=0]\n     *        The minutes\n     *\n     * @param {number} [seconds=0]\n     *        The seconds\n     *\n     * @return {number}\n     *         The time in milliseconds since January 1st 1970.\n     */\n    makeTime(year, month, date = 1, hours = 0, minutes, seconds, milliseconds) {\n        // eslint-disable-next-line new-cap\n        let d = this.Date.UTC(year, month, date, hours, minutes || 0, seconds || 0, milliseconds || 0);\n        if (this.timezone !== 'UTC') {\n            const offset = this.getTimezoneOffset(d);\n            d += offset;\n            // Adjustments close to DST transitions\n            if (\n            // Optimize for speed by limiting the number of calls to\n            // `getTimezoneOffset`. According to\n            // https://en.wikipedia.org/wiki/Daylight_saving_time_by_country,\n            // DST change may only occur in these months.\n            [2, 3, 8, 9, 10, 11].indexOf(month) !== -1 &&\n                // DST transitions occur only in the night-time\n                (hours < 5 || hours > 20)) {\n                const newOffset = this.getTimezoneOffset(d);\n                if (offset !== newOffset) {\n                    d += newOffset - offset;\n                    // A special case for transitioning from summer time to winter\n                    // time. When the clock is set back, the same time is repeated\n                    // twice, i.e. 02:30 am is repeated since the clock is set back\n                    // from 3 am to 2 am. We need to make the same time as local\n                    // Date does.\n                }\n                else if (offset - 36e5 === this.getTimezoneOffset(d - 36e5) &&\n                    !hasOldSafariBug) {\n                    d -= 36e5;\n                }\n            }\n        }\n        return d;\n    }\n    /**\n     * Parse a datetime string. Unless the string contains time zone\n     * information, apply the current `timezone` from options. If the argument\n     * is a number, return it.\n     *\n     * @function Highcharts.Time#parse\n     * @param    {string|number|undefined} s The datetime string to parse\n     * @return   {number|undefined}          Parsed JavaScript timestamp\n     */\n    parse(s) {\n        if (!TimeBase_isString(s)) {\n            return s ?? void 0;\n        }\n        s = s\n            // Firefox fails on YYYY/MM/DD\n            .replace(/\\//g, '-')\n            // Replace some non-standard notations\n            .replace(/(GMT|UTC)/, '');\n        // Extend shorthand hour timezone offset like +02\n        // .replace(/([+-][0-9]{2})$/, '$1:00');\n        // Check if the string has time zone information\n        const hasTimezone = s.indexOf('Z') > -1 ||\n            /([+-][0-9]{2}):?[0-9]{2}$/.test(s), isYYYYMMDD = /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(s);\n        if (!hasTimezone && !isYYYYMMDD) {\n            s += 'Z';\n        }\n        const ts = Date.parse(s);\n        if (TimeBase_isNumber(ts)) {\n            // Unless the string contains time zone information, convert from\n            // the local time result of `Date.parse` via UTC into the current\n            // timezone of the time object.\n            return ts + ((!hasTimezone || isYYYYMMDD) ?\n                this.getTimezoneOffset(ts) :\n                0);\n        }\n    }\n    /**\n     * Get the time zone offset based on the current timezone information as\n     * set in the global options.\n     *\n     * @function Highcharts.Time#getTimezoneOffset\n     *\n     * @param {number} timestamp\n     *        The JavaScript timestamp to inspect.\n     *\n     * @return {number}\n     *         The timezone offset in minutes compared to UTC.\n     */\n    getTimezoneOffset(timestamp) {\n        if (this.timezone !== 'UTC') {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const [date, gmt, hours, colon, minutes = 0] = this.dateTimeFormat({ timeZoneName: 'shortOffset' }, timestamp, 'en')\n                .split(/(GMT|:)/)\n                .map(Number), offset = -(hours + minutes / 60) * 60 * 60000;\n            // Possible future NaNs stop here\n            if (TimeBase_isNumber(offset)) {\n                return offset;\n            }\n        }\n        return 0;\n    }\n    /**\n     * Formats a JavaScript date timestamp (milliseconds since January 1 1970)\n     * into a human readable date string.\n     *\n     * The `format` parameter accepts two types of values:\n     * - An object containing settings that are passed directly on to\n     *   [Intl.DateTimeFormat.prototype.format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format).\n     * - A format string containing either individual or locale-aware format\n     *   keys. **Individual keys**, for example `%Y-%m-%d`, are listed below.\n     *   **Locale-aware keys** are grouped by square brackets, for example\n     *   `%[Ymd]`. The order of keys within the square bracket doesn't affect\n     *   the output, which is determined by the locale. See example below.\n     *   Internally, the locale-aware format keys are just a shorthand for the\n     *   full object formats, but are particularly practical in\n     *   [templating](https://www.highcharts.com/docs/chart-concepts/templating)\n     *   where full object definitions are not an option.\n     *\n     * The available string format keys are listed below. Additional formats can\n     * be given in the {@link Highcharts.dateFormats} hook.\n     *\n     * Supported format keys:\n     * | Key  | Description                     | Notes on locale-aware format |\n     * -------|----------------------------------------------|-------|\n     * | `%A` | Long weekday, like 'Monday'                  |       |\n     * | `%a` | Short weekday, like 'Mon'                    |       |\n     * | `%E` | Narrow weekday, single character             |       |\n     * | `%d` | Two digit day of the month, 01 to 31         |       |\n     * | `%e` | Day of the month, 1 through 31               |       |\n     * | `%w` | Day of the week, 0 through 6                 | N/A   |\n     * | `%v` | The prefix \"week from\", read from `lang.weekFrom` | N/A |\n     * | `%b` | Short month, like 'Jan'                      |       |\n     * | `%B` | Long month, like 'January'                   |       |\n     * | `%m` | Two digit month number, 01 through 12        |       |\n     * | `%o` | Month number, 1 through 12                   |       |\n     * | `%y` | Two digits year, like 24 for 2024            |       |\n     * | `%Y` | Four digits year, like 2024                  |       |\n     * | `%H` | Two digits hours in 24h format, 00 through 23 | Depending on the locale, 12h format may be instered. |\n     * | `%k` | Hours in 24h format, 0 through 23            | Depending on the locale, 12h format may be instered. |\n     * | `%I` | Two digits hours in 12h format, 00 through 11 | N/A. The locale determines the hour format. |\n     * | `%l` | Hours in 12h format, 1 through 12            | N/A. The locale determines the hour format. |\n     * | `%M` | Two digits minutes, 00 through 59            |       |\n     * | `%p` | Upper case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n     * | `%P` | Lower case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n     * | `%S` | Two digits seconds, 00 through 59            |       |\n     * | `%L` | Milliseconds (naming from Ruby)              |       |\n     *\n     * @example\n     * // Object format, US English\n     * const time1 = new Highcharts.Time({ locale: 'en-US' });\n     * console.log(\n     *     time1.dateFormat({\n     *         day: 'numeric',\n     *         month: 'short',\n     *         year: 'numeric',\n     *         hour: 'numeric',\n     *         minute: 'numeric'\n     *     }, Date.UTC(2024, 11, 31))\n     * ); // => Dec 31, 2024, 12:00 AM\n     *\n     * // Object format, British English\n     * const time2 = new Highcharts.Time({ locale: 'en-GB' });\n     * console.log(\n     *     time2.dateFormat({\n     *         day: 'numeric',\n     *         month: 'short',\n     *         year: 'numeric',\n     *         hour: 'numeric',\n     *         minute: 'numeric'\n     *     }, Date.UTC(2024, 11, 31))\n     * ); // => 31 Dec 2024, 00:00\n     *\n     * // Individual key string replacement\n     * const time3 = new Highcharts.Time();\n     * console.log(\n     *     time3.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2024, 11, 31))\n     * ); // => 2024-12-31 00:00:00\n     *\n     * // Locale-aware keys, US English\n     * const time4 = new Highcharts.Time({ locale: 'en-US' });\n     * console.log(\n     *     time4.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n     * ); // => Dec 31, 2024, 12:00 AM\n     *\n     * // Locale-aware keys, British English\n     * const time5 = new Highcharts.Time({ locale: 'en-GB' });\n     * console.log(\n     *     time5.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n     * ); // => 31 Dec 2024, 00:00\n     *\n     * // Mixed locale-aware and individual keys\n     * console.log(\n     *     time5.dateFormat('%[Yeb], %H:%M', Date.UTC(2024, 11, 31))\n     * ); // => 31 Dec 2024, 00:00\n     *\n     * @function Highcharts.Time#dateFormat\n     *\n     * @param {string|Highcharts.DateTimeFormatOptions} format\n     *        The desired string format where various time representations are\n     *        prefixed with %, or an object representing the locale-aware format\n     *        options.\n     *\n     * @param {number} [timestamp]\n     *        The JavaScript timestamp.\n     *\n     * @param {boolean} [upperCaseFirst=false]\n     *        Upper case first letter in the return.\n     *\n     * @return {string}\n     *         The formatted date.\n     */\n    dateFormat(format, timestamp, upperCaseFirst) {\n        const lang = this.lang;\n        if (!TimeBase_defined(timestamp) || isNaN(timestamp)) {\n            return lang?.invalidDate || '';\n        }\n        format = format ?? '%Y-%m-%d %H:%M:%S';\n        // First, identify and replace locale-aware formats like %[Ymd]\n        if (TimeBase_isString(format)) {\n            const localeAwareRegex = /%\\[([a-zA-Z]+)\\]/g;\n            let match;\n            while ((match = localeAwareRegex.exec(format))) {\n                format = format.replace(match[0], this.dateTimeFormat(match[1], timestamp, lang?.locale));\n            }\n        }\n        // Then, replace static formats like %Y, %m, %d etc.\n        if (TimeBase_isString(format) && format.indexOf('%') !== -1) {\n            const time = this, [fullYear, month, dayOfMonth, hours, minutes, seconds, milliseconds, weekday] = this.toParts(timestamp), langWeekdays = lang?.weekdays || this.weekdays, shortWeekdays = lang?.shortWeekdays || this.shortWeekdays, months = lang?.months || this.months, shortMonths = lang?.shortMonths || this.shortMonths, \n            // List all format keys. Custom formats can be added from the\n            // outside.\n            replacements = TimeBase_extend({\n                // Day\n                // Short weekday, like 'Mon'\n                a: shortWeekdays ?\n                    shortWeekdays[weekday] :\n                    langWeekdays[weekday].substr(0, 3),\n                // Long weekday, like 'Monday'\n                A: langWeekdays[weekday],\n                // Two digit day of the month, 01 to 31\n                d: TimeBase_pad(dayOfMonth),\n                // Day of the month, 1 through 31\n                e: TimeBase_pad(dayOfMonth, 2, ' '),\n                // Day of the week, 0 through 6\n                w: weekday,\n                // Week (none implemented)\n                // 'W': weekNumber(),\n                v: lang?.weekFrom ?? '',\n                // Month\n                // Short month, like 'Jan'\n                b: shortMonths[month],\n                // Long month, like 'January'\n                B: months[month],\n                // Two digit month number, 01 through 12\n                m: TimeBase_pad(month + 1),\n                // Month number, 1 through 12 (#8150)\n                o: month + 1,\n                // Year\n                // Two digits year, like 09 for 2009\n                y: fullYear.toString().substr(2, 2),\n                // Four digits year, like 2009\n                Y: fullYear,\n                // Time\n                // Two digits hours in 24h format, 00 through 23\n                H: TimeBase_pad(hours),\n                // Hours in 24h format, 0 through 23\n                k: hours,\n                // Two digits hours in 12h format, 00 through 11\n                I: TimeBase_pad((hours % 12) || 12),\n                // Hours in 12h format, 1 through 12\n                l: (hours % 12) || 12,\n                // Two digits minutes, 00 through 59\n                M: TimeBase_pad(minutes),\n                // Upper case AM or PM\n                p: hours < 12 ? 'AM' : 'PM',\n                // Lower case AM or PM\n                P: hours < 12 ? 'am' : 'pm',\n                // Two digits seconds, 00 through 59\n                S: TimeBase_pad(seconds),\n                // Milliseconds (naming from Ruby)\n                L: TimeBase_pad(milliseconds, 3)\n            }, Core_Globals.dateFormats);\n            // Do the replaces\n            TimeBase_objectEach(replacements, function (val, key) {\n                if (TimeBase_isString(format)) {\n                    // Regex would do it in one line, but this is faster\n                    while (format.indexOf('%' + key) !== -1) {\n                        format = format.replace('%' + key, typeof val === 'function' ?\n                            val.call(time, timestamp) :\n                            val);\n                    }\n                }\n            });\n        }\n        else if (TimeBase_isObject(format)) {\n            const tzHours = (this.getTimezoneOffset(timestamp) || 0) /\n                (60000 * 60), timeZone = this.timezone || ('Etc/GMT' + (tzHours >= 0 ? '+' : '') + tzHours), { prefix = '', suffix = '' } = format;\n            format = prefix + this.dateTimeFormat(TimeBase_extend({ timeZone }, format), timestamp) + suffix;\n        }\n        // Optionally sentence-case the string and return\n        return upperCaseFirst ? TimeBase_ucfirst(format) : format;\n    }\n    /**\n     * Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\n     * an object.\n     * @private\n     * @param {string|Array<T>|Highcharts.Dictionary<T>} f\n     * General format description\n     * @return {Highcharts.Dictionary<T>}\n     * The object definition\n     */\n    resolveDTLFormat(f) {\n        if (!TimeBase_isObject(f, true)) { // Check for string or array\n            f = TimeBase_splat(f);\n            return {\n                main: f[0],\n                from: f[1],\n                to: f[2]\n            };\n        }\n        // Type-check DateTimeFormatOptions against DateTimeLabelFormatObject\n        if (TimeBase_isObject(f, true) && isDateTimeFormatOptions(f)) {\n            return { main: f };\n        }\n        return f;\n    }\n    /**\n     * Get the optimal date format for a point, based on a range.\n     *\n     * @private\n     * @function Highcharts.Time#getDateFormat\n     *\n     * @param {number} range\n     *        The time range\n     *\n     * @param {number} timestamp\n     *        The timestamp of the date\n     *\n     * @param {number} startOfWeek\n     *        An integer representing the first day of the week, where 0 is\n     *        Sunday.\n     *\n     * @param {Highcharts.Dictionary<string>} dateTimeLabelFormats\n     *        A map of time units to formats.\n     *\n     * @return {string}\n     *         The optimal date format for a point.\n     */\n    getDateFormat(range, timestamp, startOfWeek, dateTimeLabelFormats) {\n        const dateStr = this.dateFormat('%m-%d %H:%M:%S.%L', timestamp), blank = '01-01 00:00:00.000', strpos = {\n            millisecond: 15,\n            second: 12,\n            minute: 9,\n            hour: 6,\n            day: 3\n        };\n        let n = 'millisecond', \n        // For sub-millisecond data, #4223\n        lastN = n;\n        for (n in TimeBase_timeUnits) { // eslint-disable-line guard-for-in\n            // If the range is exactly one week and we're looking at a\n            // Sunday/Monday, go for the week format\n            if (range &&\n                range === TimeBase_timeUnits.week &&\n                +this.dateFormat('%w', timestamp) === startOfWeek &&\n                dateStr.substr(6) === blank.substr(6)) {\n                n = 'week';\n                break;\n            }\n            // The first format that is too great for the range\n            if (range && TimeBase_timeUnits[n] > range) {\n                n = lastN;\n                break;\n            }\n            // If the point is placed every day at 23:59, we need to show\n            // the minutes as well. #2637.\n            if (strpos[n] &&\n                dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                break;\n            }\n            // Weeks are outside the hierarchy, only apply them on\n            // Mondays/Sundays like in the first condition\n            if (n !== 'week') {\n                lastN = n;\n            }\n        }\n        return this.resolveDTLFormat(dateTimeLabelFormats[n]).main;\n    }\n}\n/* *\n *\n * Default export\n *\n * */\n/* harmony default export */ const Shared_TimeBase = (TimeBase);\n/* *\n *\n * API Declarations\n *\n * */\n/**\n * Normalized interval.\n *\n * @interface Highcharts.TimeNormalizedObject\n */ /**\n* The count.\n*\n* @name Highcharts.TimeNormalizedObject#count\n* @type {number|undefined}\n*/ /**\n* The interval in axis values (ms).\n*\n* @name Highcharts.TimeNormalizedObject#unitRange\n* @type {number}\n*/\n/**\n * Function of an additional date format specifier.\n *\n * @callback Highcharts.TimeFormatCallbackFunction\n *\n * @param {number} timestamp\n *        The time to format.\n *\n * @return {string}\n *         The formatted portion of the date.\n */\n/**\n * Time ticks.\n *\n * @interface Highcharts.AxisTickPositionsArray\n * @extends global.Array<number>\n */ /**\n* @name Highcharts.AxisTickPositionsArray#info\n* @type {Highcharts.TimeTicksInfoObject|undefined}\n*/\n/**\n * A callback to return the time zone offset for a given datetime. It\n * takes the timestamp in terms of milliseconds since January 1 1970,\n * and returns the timezone offset in minutes. This provides a hook\n * for drawing time based charts in specific time zones using their\n * local DST crossover dates, with the help of external libraries.\n *\n * @callback Highcharts.TimezoneOffsetCallbackFunction\n *\n * @param {number} timestamp\n * Timestamp in terms of milliseconds since January 1 1970.\n *\n * @return {number}\n * Timezone offset in minutes.\n */\n/**\n * Options for formatting dates and times using the [Intl.DateTimeFormat](\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\n * ) API, and extended with some custom options for Highcharts.\n *\n * @interface Highcharts.DateTimeFormatOptions\n */ /**\n* The locale matching algorithm to use.\n*\n* @name Highcharts.DateTimeFormatOptions#localeMatcher\n* @type {string|undefined}\n*/ /**\n* The time zone to use. The default is the browser's default time zone.\n*\n* @name Highcharts.DateTimeFormatOptions#timeZone\n* @type {string|undefined}\n*/ /**\n* Whether to use 12-hour time (as opposed to 24-hour time).\n*\n* @name Highcharts.DateTimeFormatOptions#hour12\n* @type {'auto'|'always'|'never'|undefined}\n*/ /**\n* The format matching algorithm to use.\n*\n* @name Highcharts.DateTimeFormatOptions#formatMatcher\n* @type {string|undefined}\n*/ /**\n* The representation of the weekday.\n*\n* @name Highcharts.DateTimeFormatOptions#weekday\n* @type {'narrow'|'short'|'long'|undefined}\n*/ /**\n* The representation of the era.\n*\n* @name Highcharts.DateTimeFormatOptions#era\n* @type {'narrow'|'short'|'long'|undefined}\n*/ /**\n* The representation of the year.\n*\n* @name Highcharts.DateTimeFormatOptions#year\n* @type {'numeric'|'2-digit'|undefined}\n*/ /**\n* The representation of the month.\n* \"narrow\", \"short\", \"long\".\n*\n* @name Highcharts.DateTimeFormatOptions#month\n* @type {'numeric'|'2-digit'|'narrow'|'short'|'long'|undefined}\n*/ /**\n* The representation of the day.\n*\n* @name Highcharts.DateTimeFormatOptions#day\n* @type {'numeric'|'2-digit'|undefined}\n*/ /**\n* The representation of the hour.\n*\n* @name Highcharts.DateTimeFormatOptions#hour\n* @type {'numeric'|'2-digit'|undefined}\n*/ /**\n* The representation of the minute.\n*\n* @name Highcharts.DateTimeFormatOptions#minute\n* @type {'numeric'|'2-digit'|undefined}\n*/ /**\n* The representation of the second.\n*\n* @name Highcharts.DateTimeFormatOptions#second\n* @type {'numeric'|'2-digit'|undefined}\n*/ /**\n* The number of fractional digits to use. 3 means milliseconds.\n*\n* @name Highcharts.DateTimeFormatOptions#fractionalSecondDigits\n* @type {number|undefined}\n*/ /**\n* The representation of the time zone name.\n*\n* @name Highcharts.DateTimeFormatOptions#timeZoneName\n* @type {'short'|'long'|undefined}\n*/ /**\n* A prefix for the time string. Custom Highcharts option.\n*\n* @name Highcharts.DateTimeFormatOptions#prefix\n* @type {'string'|undefined}\n*/ /**\n* A suffix for the time string. Custom Highcharts option.\n*\n* @name Highcharts.DateTimeFormatOptions#suffix\n* @type {'string'|undefined}\n*/\n''; // Keeps doclets above in JS file\n\n;// ./code/grid/es-modules/Core/Time.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { defined: Time_defined, extend: Time_extend, timeUnits: Time_timeUnits } = Core_Utilities;\n/* *\n *\n *  Constants\n *\n * */\nclass Time extends Shared_TimeBase {\n    /**\n     * Return an array with time positions distributed on round time values\n     * right and right after min and max. Used in datetime axes as well as for\n     * grouping data on a datetime axis.\n     *\n     * @function Highcharts.Time#getTimeTicks\n     *\n     * @param {Highcharts.TimeNormalizedObject} normalizedInterval\n     *        The interval in axis values (ms) and the count\n     *\n     * @param {number} [min]\n     *        The minimum in axis values\n     *\n     * @param {number} [max]\n     *        The maximum in axis values\n     *\n     * @param {number} [startOfWeek=1]\n     *\n     * @return {Highcharts.AxisTickPositionsArray}\n     * Time positions\n     */\n    getTimeTicks(normalizedInterval, min, max, startOfWeek) {\n        const time = this, tickPositions = [], higherRanks = {}, { count = 1, unitRange } = normalizedInterval;\n        let [year, month, dayOfMonth, hours, minutes, seconds] = time.toParts(min), milliseconds = (min || 0) % 1000, variableDayLength;\n        startOfWeek ?? (startOfWeek = 1);\n        if (Time_defined(min)) { // #1300\n            milliseconds = unitRange >= Time_timeUnits.second ?\n                0 : // #3935\n                count * Math.floor(milliseconds / count);\n            if (unitRange >= Time_timeUnits.second) { // Second\n                seconds = unitRange >= Time_timeUnits.minute ?\n                    0 : // #3935\n                    count * Math.floor(seconds / count);\n            }\n            if (unitRange >= Time_timeUnits.minute) { // Minute\n                minutes = unitRange >= Time_timeUnits.hour ?\n                    0 :\n                    count * Math.floor(minutes / count);\n            }\n            if (unitRange >= Time_timeUnits.hour) { // Hour\n                hours = unitRange >= Time_timeUnits.day ?\n                    0 :\n                    count * Math.floor(hours / count);\n            }\n            if (unitRange >= Time_timeUnits.day) { // Day\n                dayOfMonth = unitRange >= Time_timeUnits.month ?\n                    1 :\n                    Math.max(1, count * Math.floor(dayOfMonth / count));\n            }\n            if (unitRange >= Time_timeUnits.month) { // Month\n                month = unitRange >= Time_timeUnits.year ? 0 :\n                    count * Math.floor(month / count);\n            }\n            if (unitRange >= Time_timeUnits.year) { // Year\n                year -= year % count;\n            }\n            // Week is a special case that runs outside the hierarchy\n            if (unitRange === Time_timeUnits.week) {\n                if (count) {\n                    min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n                }\n                // Get start of current week, independent of count\n                const weekday = this.dateTimeFormat({\n                    timeZone: this.timezone,\n                    weekday: 'narrow'\n                }, min, 'es'), \n                // Spanish weekday index\n                weekdayNo = 'DLMXJVS'.indexOf(weekday);\n                dayOfMonth += -weekdayNo + startOfWeek +\n                    // We don't want to skip days that are before\n                    // startOfWeek (#7051)\n                    (weekdayNo < startOfWeek ? -7 : 0);\n            }\n            min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n            // Handle local timezone offset\n            if (time.variableTimezone && Time_defined(max)) {\n                // Detect whether we need to take the DST crossover into\n                // consideration. If we're crossing over DST, the day length may\n                // be 23h or 25h and we need to compute the exact clock time for\n                // each tick instead of just adding hours. This comes at a cost,\n                // so first we find out if it is needed (#4951).\n                variableDayLength = (\n                // Long range, assume we're crossing over.\n                max - min > 4 * Time_timeUnits.month ||\n                    // Short range, check if min and max are in different time\n                    // zones.\n                    time.getTimezoneOffset(min) !==\n                        time.getTimezoneOffset(max));\n            }\n            // Iterate and add tick positions at appropriate values\n            let t = min, i = 1;\n            while (t < max) {\n                tickPositions.push(t);\n                // Increase the years\n                if (unitRange === Time_timeUnits.year) {\n                    t = time.makeTime(year + i * count, 0);\n                    // Increase the months\n                }\n                else if (unitRange === Time_timeUnits.month) {\n                    t = time.makeTime(year, month + i * count);\n                    // If we're using local time, the interval is not fixed as it\n                    // jumps one hour at the DST crossover\n                }\n                else if (variableDayLength && (unitRange === Time_timeUnits.day ||\n                    unitRange === Time_timeUnits.week)) {\n                    t = time.makeTime(year, month, dayOfMonth +\n                        i * count * (unitRange === Time_timeUnits.day ? 1 : 7));\n                }\n                else if (variableDayLength &&\n                    unitRange === Time_timeUnits.hour &&\n                    count > 1) {\n                    // Make sure higher ranks are preserved across DST (#6797,\n                    // #7621)\n                    t = time.makeTime(year, month, dayOfMonth, hours + i * count);\n                    // Else, the interval is fixed and we use simple addition\n                }\n                else {\n                    t += unitRange * count;\n                }\n                i++;\n            }\n            // Push the last time\n            tickPositions.push(t);\n            // Handle higher ranks. Mark new days if the time is on midnight\n            // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold\n            // to prevent looping over dense data grouping (#6156).\n            if (unitRange <= Time_timeUnits.hour && tickPositions.length < 10000) {\n                tickPositions.forEach((t) => {\n                    if (\n                    // Speed optimization, no need to run dateFormat unless\n                    // we're on a full or half hour\n                    t % 1800000 === 0 &&\n                        // Check for local or global midnight\n                        time.dateFormat('%H%M%S%L', t) === '000000000') {\n                        higherRanks[t] = 'day';\n                    }\n                });\n            }\n        }\n        // Record information on the chosen unit - for dynamic label formatter\n        tickPositions.info = Time_extend(normalizedInterval, {\n            higherRanks,\n            totalRange: unitRange * count\n        });\n        return tickPositions;\n    }\n}\n/* *\n *\n * Default export\n *\n * */\n/* harmony default export */ const Core_Time = (Time);\n\n;// ./code/grid/es-modules/Core/Defaults.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { isTouchDevice } = Core_Globals;\n\n\n\nconst { fireEvent: Defaults_fireEvent, merge: Defaults_merge } = Core_Utilities;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Global default settings.\n *\n * @name Highcharts.defaultOptions\n * @type {Highcharts.Options}\n */ /**\n* @optionparent\n* @private\n*/\nconst defaultOptions = {\n    /**\n     * An array containing the default colors for the chart's series. When\n     * all colors are used, new colors are pulled from the start again.\n     *\n     * Default colors can also be set on a series or series.type basis,\n     * see [column.colors](#plotOptions.column.colors),\n     * [pie.colors](#plotOptions.pie.colors).\n     *\n     * In styled mode, the colors option doesn't exist. Instead, colors\n     * are defined in CSS and applied either through series or point class\n     * names, or through the [chart.colorCount](#chart.colorCount) option.\n     *\n     * @sample {highcharts} highcharts/chart/colors/\n     *         Assign a global color theme\n     * @sample highcharts/members/theme-v10/\n     *         Latest release styled like version 10\n     *\n     * @type    {Array<(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)>}\n     * @default [\n     *     \"#2caffe\",\n     *     \"#544fc5\",\n     *     \"#00e272\",\n     *     \"#fe6a35\",\n     *     \"#6b8abc\",\n     *     \"#d568fb\",\n     *     \"#2ee0ca\",\n     *     \"#fa4b42\",\n     *     \"#feb56a\",\n     *     \"#91e8e1\"\n     * ]\n     */\n    colors: Palettes.colors,\n    /**\n     * Styled mode only. Configuration object for adding SVG definitions for\n     * reusable elements. See [gradients, shadows and\n     * patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\n     * for more information and code examples.\n     *\n     * @type      {*}\n     * @since     5.0.0\n     * @apioption defs\n     */\n    /**\n     * @ignore-option\n     */\n    symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n    /**\n     * An object containing language-related strings and settings. A typical\n     * setup uses `Highcharts.setOptions` to make the options apply to all\n     * charts in the same page.\n     *\n     * ```js\n     * Highcharts.setOptions({\n     *     lang: {\n     *         locale: 'fr'\n     *     }\n     * });\n     * ```\n     *\n     * @optionparent lang\n     */\n    lang: {\n        weekFrom: 'week from',\n        /**\n         * The default chart title.\n         *\n         * @since next\n         */\n        chartTitle: 'Chart title',\n        /**\n         * The browser locale to use for date and number formatting. The actual\n         * locale used for each chart is determined in three steps:\n         * 1. If this `lang.locale` option is specified, it is used.\n         * 2. Else, look for the closest ancestor HTML element with a `lang`\n         *    attribute, typically the `<html>` element.\n         * 3. If no 'lang' attribute is found, use the default browser locale.\n         *\n         * Use `en-GB`, British English, for approximate consistency with\n         * Highcharts v < 12.\n         *\n         * @sample highcharts/lang/locale/\n         *         Set the locale using the `lang.locale` option\n         * @sample highcharts/lang/locale-attribute/\n         *         Pick up the locale from the HTML `lang` attribute\n         * @sample highcharts/members/highcharts-numberformat\n         *         Arabic locale with digits and dates         *\n         *\n         * @since 12.0.0\n         * @type {string|Array<string>}\n         */\n        locale: void 0,\n        /**\n         * The loading text that appears when the chart is set into the loading\n         * state following a call to `chart.showLoading`.\n         */\n        loading: 'Loading...',\n        /**\n         * An array containing the months names. Corresponds to the `%B` format\n         * in `Highcharts.dateFormat()`. Defaults to 'undefined',\n         * meaning the default month names are used according to the\n         * `lang.locale` setting.\n         *\n         * @type    {Array<string>}\n         */\n        months: void 0,\n        /**\n         * [Format string](https://www.highcharts.com/docs/chart-concepts/templating) for the default series name.\n         *\n         * @since next\n         */\n        seriesName: 'Series {add index 1}',\n        /**\n         * An array containing the months names in abbreviated form. Corresponds\n         * to the `%b` format in `Highcharts.dateFormat()`. Defaults to\n         * 'undefined', meaning the default short month names are used according\n         * to the `lang.locale` setting.\n         *\n         * @type    {Array<string>}\n         */\n        shortMonths: void 0,\n        /**\n         * An array containing the weekday names. Defaults to 'undefined',\n         * meaning the default weekday names are used according to the\n         * `lang.locale` setting.\n         *\n         * @type    {Array<string>}\n         */\n        weekdays: void 0,\n        /**\n         * Short week days, starting Sunday. Defaults to 'undefined', meaning\n         * the default short weekday names are used according to the\n         * `lang.locale` setting.\n         *\n         * @sample highcharts/lang/shortweekdays/\n         *         Finnish two-letter abbreviations\n         *\n         * @type      {Array<string>}\n         * @since     4.2.4\n         * @apioption lang.shortWeekdays\n         */\n        /**\n         * What to show in a date field for invalid dates. Defaults to an empty\n         * string.\n         *\n         * @type      {string}\n         * @since     4.1.8\n         * @product   highcharts highstock\n         * @apioption lang.invalidDate\n         */\n        /**\n         * The title appearing on hovering the zoom in button. The text itself\n         * defaults to \"+\" and can be changed in the button options.\n         *\n         * @type      {string}\n         * @default   Zoom in\n         * @product   highmaps\n         * @apioption lang.zoomIn\n         */\n        /**\n         * The title appearing on hovering the zoom out button. The text itself\n         * defaults to \"-\" and can be changed in the button options.\n         *\n         * @type      {string}\n         * @default   Zoom out\n         * @product   highmaps\n         * @apioption lang.zoomOut\n         */\n        /**\n         * The default decimal point used in the `Highcharts.numberFormat`\n         * method unless otherwise specified in the function arguments. Defaults\n         * to the locale decimal point as determined by `lang.locale`.\n         *\n         * @type      {string}\n         * @default   undefined\n         * @since     1.2.2\n         * @apioption lang.decimalPoint\n         */\n        /**\n         * [Metric prefixes](https://en.wikipedia.org/wiki/Metric_prefix) used\n         * to shorten high numbers in axis labels. Replacing any of the\n         * positions with `null` causes the full number to be written. Setting\n         * `numericSymbols` to `undefined` disables shortening altogether.\n         *\n         * @sample {highcharts} highcharts/lang/numericsymbols/\n         *         Replacing the symbols with text\n         * @sample {highstock} highcharts/lang/numericsymbols/\n         *         Replacing the symbols with text\n         *\n         * @type    {Array<string>}\n         * @default [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n         * @since   2.3.0\n         */\n        numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'],\n        /**\n         * The default name for a pie slice (point).\n         * @since next\n         */\n        pieSliceName: 'Slice',\n        /**\n         * The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\n         * Use 10000 for Japanese, Korean and various Chinese locales, which\n         * use symbols for 10^4, 10^8 and 10^12.\n         *\n         * @sample highcharts/lang/numericsymbolmagnitude/\n         *         10000 magnitude for Japanese\n         *\n         * @type      {number}\n         * @default   1000\n         * @since     5.0.3\n         * @apioption lang.numericSymbolMagnitude\n         */\n        /**\n         * The default thousands separator used in the `Highcharts.numberFormat`\n         * method unless otherwise specified in the function arguments. Defaults\n         * to the locale thousands separator as determined by `lang.locale`.\n         *\n         * @type      {string}\n         * @default   undefined\n         * @since     1.2.2\n         * @apioption lang.thousandsSep\n         */\n        /**\n         * The text for the label appearing when a chart is zoomed.\n         *\n         * @since 1.2.4\n         */\n        resetZoom: 'Reset zoom',\n        /**\n         * The tooltip title for the label appearing when a chart is zoomed.\n         *\n         * @since 1.2.4\n         */\n        /**\n         * The default title of the Y axis\n         *\n         * @since next\n         */\n        yAxisTitle: 'Values',\n        resetZoomTitle: 'Reset zoom level 1:1'\n    },\n    /**\n     * Global options that don't apply to each chart. These options must be set\n     * using the `Highcharts.setOptions` method.\n     *\n     * ```js\n     * Highcharts.setOptions({\n     *     global: {\n     *         buttonTheme: {\n     *             fill: '#d0d0d0'\n     *         }\n     *     }\n     * });\n     * ```\n     */\n    global: {\n        /**\n         * General theme for buttons. This applies to the zoom button, exporting\n         * context menu, map navigation, range selector buttons and custom\n         * buttons generated using the `SVGRenderer.button` function. However,\n         * each of these may be overridden with more specific options.\n         *\n         * @sample highcharts/global/buttontheme\n         *         General button theme\n         * @since 11.4.2\n         */\n        buttonTheme: {\n            /**\n             * The fill color for buttons\n             */\n            fill: \"#f7f7f7\" /* Palette.neutralColor3 */,\n            /**\n             * The padding of buttons\n             */\n            padding: 8,\n            /**\n             * The border radius for buttons\n             */\n            r: 2,\n            /**\n             * The stroke color for buttons\n             */\n            stroke: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The stroke width for buttons\n             */\n            'stroke-width': 1,\n            /**\n             * CSS styling for the buttons' text\n             */\n            style: {\n                color: \"#333333\" /* Palette.neutralColor80 */,\n                cursor: 'pointer',\n                fontSize: '0.8em',\n                fontWeight: 'normal'\n            },\n            /**\n             * State overrides for the buttons\n             */\n            states: {\n                /**\n                 * Hover state overrides for the buttons are applied in addition\n                 * to the normal state options\n                 */\n                hover: {\n                    fill: \"#e6e6e6\" /* Palette.neutralColor10 */\n                },\n                /**\n                 * Select state overrides for the buttons are applied in\n                 * addition to the normal state options\n                 */\n                select: {\n                    fill: \"#e6e9ff\" /* Palette.highlightColor10 */,\n                    style: {\n                        color: \"#000000\" /* Palette.neutralColor100 */,\n                        fontWeight: 'bold'\n                    }\n                },\n                /**\n                 * Disabled state overrides for the buttons are applied in\n                 * addition to the normal state options\n                 */\n                disabled: {\n                    /**\n                     * Disabled state CSS style overrides for the buttons' text\n                     */\n                    style: {\n                        color: \"#cccccc\" /* Palette.neutralColor20 */\n                    }\n                }\n            }\n        }\n    },\n    /**\n     * Time options that can apply globally or to individual charts. These\n     * settings affect how `datetime` axes are laid out, how tooltips are\n     * formatted, how series\n     * [pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\n     * the Highcharts Stock range selector handles time.\n     *\n     * The common use case is that all charts in the same Highcharts object\n     * share the same time settings, in which case the global settings are set\n     * using `setOptions`.\n     *\n     * ```js\n     * // Apply time settings globally\n     * Highcharts.setOptions({\n     *     time: {\n     *         timezone: 'Europe/London'\n     *     }\n     * });\n     * // Apply time settings by instance\n     * const chart = Highcharts.chart('container', {\n     *     time: {\n     *         timezone: 'America/New_York'\n     *     },\n     *     series: [{\n     *         data: [1, 4, 3, 5]\n     *     }]\n     * });\n     *\n     * // Use the Time object\n     * console.log(\n     *        'Current time in New York',\n     *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n     * );\n     * ```\n     *\n     * Since v6.0.5, the time options were moved from the `global` object to the\n     * `time` object, and time options can be set on each individual chart.\n     *\n     * @sample {highcharts|highstock}\n     *         highcharts/time/timezone/\n     *         Set the timezone globally\n     * @sample {highcharts}\n     *         highcharts/time/individual/\n     *         Set the timezone per chart instance\n     * @sample {highstock}\n     *         stock/time/individual/\n     *         Set the timezone per chart instance\n     *\n     * @since     6.0.5\n     * @optionparent time\n     */\n    time: {\n        /**\n         * A custom `Date` class for advanced date handling. For example,\n         * [JDate](https://github.com/tahajahangir/jdate) can be hooked in to\n         * handle Jalali dates.\n         *\n         * @type      {*}\n         * @since     4.0.4\n         * @product   highcharts highstock gantt\n         */\n        Date: void 0,\n        /**\n         * A named time zone. Supported time zone names rely on the browser\n         * implementations, as described in the [mdn\n         * docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#timezone).\n         * If the given time zone is not recognized by the browser, Highcharts\n         * provides a warning and falls back to returning a 0 offset,\n         * corresponding to the UTC time zone.\n         *\n         * The time zone affects axis scaling, tickmark placement and\n         * time display in `Highcharts.dateFormat`.\n         *\n         * Setting `timezone` to `undefined` falls back to the default browser\n         * timezone setting.\n         *\n         * Until v11.2.0, this option depended on moment.js.\n         *\n         * @sample {highcharts|highstock} highcharts/time/timezone/ Europe/Oslo\n         *\n         * @type      {string}\n         * @since     5.0.7\n         * @product   highcharts highstock gantt\n         */\n        timezone: 'UTC',\n        /**\n         * The timezone offset in minutes. Positive values are west, negative\n         * values are east of UTC, as in the ECMAScript\n         * [getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n         * method. Use this to display UTC based data in a predefined time zone.\n         *\n         * This option is deprecated as of v11.4.1 and will be removed in a\n         * future release. Use the [time.timezone](#time.timezone) option\n         * instead.\n         *\n         * @see [time.getTimezoneOffset](#time.getTimezoneOffset)\n         *\n         * @sample {highcharts|highstock} highcharts/time/timezoneoffset/\n         *         Timezone offset\n         *\n         * @since     3.0.8\n         * @deprecated 11.4.2\n         * @product   highcharts highstock gantt\n         */\n        timezoneOffset: 0,\n        /**\n         * Whether to use UTC time for axis scaling, tickmark placement and\n         * time display in `Highcharts.dateFormat`. Advantages of using UTC\n         * is that the time displays equally regardless of the user agent's\n         * time zone settings. Local time can be used when the data is loaded\n         * in real time or when correct Daylight Saving Time transitions are\n         * required.\n         *\n         * Setting `useUTC` to true is equivalent to setting `time.timezone` to\n         * `\"UTC\"`. Setting `useUTC` to false is equivalent to setting\n         * `time.timezone` to `undefined`.\n         *\n         * @see [time.timezone](#timezone)\n         *\n         * @sample {highcharts} highcharts/time/useutc-true/\n         *         True by default\n         * @sample {highcharts} highcharts/time/useutc-false/\n         *         False\n         *\n         * @deprecated\n         */\n        useUTC: void 0\n    },\n    chart: Chart_ChartDefaults,\n    /**\n     * The chart's main title.\n     *\n     * @sample {highmaps} maps/title/title/\n     *         Title options demonstrated\n     * @sample {highcharts} highcharts/title/align-auto/\n     *         Default title alignment\n     */\n    title: {\n        /**\n         * When the title is floating, the plot area will not move to make space\n         * for it.\n         *\n         * @sample {highcharts} highcharts/chart/zoomtype-none/\n         *         False by default\n         * @sample {highcharts} highcharts/title/floating/\n         *         True - title on top of the plot area\n         * @sample {highstock} stock/chart/title-floating/\n         *         True - title on top of the plot area\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     2.1\n         * @apioption title.floating\n         */\n        /**\n         * Whether to\n         * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n         * to render the text.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption title.useHTML\n         */\n        /**\n         * The vertical alignment of the title. Can be one of `\"top\"`,\n         * `\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\n         * as if [floating](#title.floating) were `true`.\n         *\n         * @sample {highcharts} highcharts/title/verticalalign/\n         *         Chart title in bottom right corner\n         * @sample {highstock} stock/chart/title-verticalalign/\n         *         Chart title in bottom right corner\n         *\n         * @type      {Highcharts.VerticalAlignValue}\n         * @since     2.1\n         * @apioption title.verticalAlign\n         */\n        /**\n         * The x position of the title relative to the alignment within\n         * `chart.spacingLeft` and `chart.spacingRight`.\n         *\n         * @sample {highcharts} highcharts/title/align/\n         *         Aligned to the plot area (x = 70px = margin left - spacing\n         *         left)\n         * @sample {highstock} stock/chart/title-align/\n         *         Aligned to the plot area (x = 50px = margin left - spacing\n         *         left)\n         *\n         * @type      {number}\n         * @default   0\n         * @since     2.0\n         * @apioption title.x\n         */\n        /**\n         * The y position of the title relative to the alignment within\n         * [chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](\n         * #chart.spacingBottom). By default it depends on the font size.\n         *\n         * @sample {highcharts} highcharts/title/y/\n         *         Title inside the plot area\n         * @sample {highstock} stock/chart/title-verticalalign/\n         *         Chart title in bottom right corner\n         *\n         * @type      {number}\n         * @since     2.0\n         * @apioption title.y\n         */\n        /**\n         * CSS styles for the title. Use this for font styling, but use `align`,\n         * `x` and `y` for text alignment.\n         *\n         * Note that the default [title.minScale](#title.minScale) option also\n         * affects the rendered font size. In order to keep the font size fixed\n         * regardless of title length, set `minScale` to 1.\n         *\n         * In styled mode, the title style is given in the `.highcharts-title`\n         * class.\n         *\n         * @sample {highcharts} highcharts/title/style/\n         *         Custom color and weight\n         * @sample {highstock} stock/chart/title-style/\n         *         Custom color and weight\n         * @sample highcharts/css/titles/\n         *         Styled mode\n         *\n         * @type      {Highcharts.CSSObject}\n         * @default   {highcharts|highmaps} { \"color\": \"#333333\", \"fontSize\": \"18px\" }\n         * @default   {highstock} { \"color\": \"#333333\", \"fontSize\": \"16px\" }\n         */\n        style: {\n            color: \"#333333\" /* Palette.neutralColor80 */,\n            fontWeight: 'bold'\n        },\n        /**\n         * The title of the chart. To disable the title, set the `text` to\n         * `undefined`.\n         *\n         * @sample {highcharts} highcharts/title/text/\n         *         Custom title\n         * @sample {highstock} stock/chart/title-text/\n         *         Custom title\n         *\n         * @default {highcharts|highmaps} Chart title\n         * @default {highstock} undefined\n         */\n        text: 'Chart title',\n        /**\n         * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n         * and \"right\".\n         *\n         * Since v12 it defaults to `undefined`, meaning the alignment is\n         * computed for best fit. If the text fits in one line, it aligned to\n         * the center, but if it is wrapped into multiple lines, it is aligned\n         * to the left.\n         *\n         * @sample {highcharts} highcharts/title/align-auto/\n         *         Default alignment, dynamic\n         * @sample {highcharts} highcharts/title/align/\n         *         Aligned to the plot area (x = 70px = margin left - spacing\n         *         left)\n         * @sample {highstock} stock/chart/title-align/\n         *         Aligned to the plot area (x = 50px = margin left - spacing\n         *         left)\n         *\n         * @type      {Highcharts.AlignValue}\n         * @default   undefined\n         * @since     2.0\n         * @apioption title.align\n         */\n        /**\n         * The margin between the title and the plot area, or if a subtitle\n         * is present, the margin between the subtitle and the plot area.\n         *\n         * @sample {highcharts} highcharts/title/margin-50/\n         *         A chart title margin of 50\n         * @sample {highcharts} highcharts/title/margin-subtitle/\n         *         The same margin applied with a subtitle\n         * @sample {highstock} stock/chart/title-margin/\n         *         A chart title margin of 50\n         *\n         * @since 2.1\n         */\n        margin: 15,\n        /**\n         * When the title is too wide to fit in the chart, the default behavior\n         * is to scale it down to fit, or apply word wrap if it is scaled down\n         * to `minScale` and still doesn't fit.\n         *\n         * The default value reflects the scale, when using default font sizes,\n         * when the title font size matches that of the subtitle. The title\n         * still stands out as it is bold by default.\n         *\n         * Set `minScale` to 1 to avoid downscaling.\n         *\n         * @sample {highcharts} highcharts/title/align-auto/\n         *         Downscaling demonstrated\n         *\n         * @since 12.0.0\n         */\n        minScale: 0.67\n    },\n    /**\n     * The chart's subtitle. This can be used both to display a subtitle below\n     * the main title, and to display random text anywhere in the chart. The\n     * subtitle can be updated after chart initialization through the\n     * `Chart.setTitle` method.\n     *\n     * @sample {highcharts} highcharts/title/align-auto/\n     *         Default title alignment\n     * @sample {highmaps} maps/title/subtitle/\n     *         Subtitle options demonstrated\n     */\n    subtitle: {\n        /**\n         * The horizontal alignment of the subtitle. Can be one of \"left\",\n         * \"center\" and \"right\". Since v12, it defaults to `undefined`, meaning\n         * the actual alignment is inherited from the alignment of the main\n         * title.\n         *\n         * @sample {highcharts} highcharts/title/align-auto/\n         *         Default title and subtitle alignment, dynamic\n         * @sample {highcharts} highcharts/subtitle/align/\n         *         Footnote at right of plot area\n         * @sample {highstock} stock/chart/subtitle-footnote\n         *         Footnote at bottom right of plot area\n         *\n         * @type  {Highcharts.AlignValue}\n         * @default undefined\n         * @since 2.0\n         * @apioption subtitle.align\n         */\n        /**\n         * When the subtitle is floating, the plot area will not move to make\n         * space for it.\n         *\n         * @sample {highcharts} highcharts/subtitle/floating/\n         *         Floating title and subtitle\n         * @sample {highstock} stock/chart/subtitle-footnote\n         *         Footnote floating at bottom right of plot area\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     2.1\n         * @apioption subtitle.floating\n         */\n        /**\n         * CSS styles for the title.\n         *\n         * In styled mode, the subtitle style is given in the\n         * `.highcharts-subtitle` class.\n         *\n         * @sample {highcharts} highcharts/subtitle/style/\n         *         Custom color and weight\n         * @sample {highcharts} highcharts/css/titles/\n         *         Styled mode\n         * @sample {highstock} stock/chart/subtitle-style\n         *         Custom color and weight\n         * @sample {highstock} highcharts/css/titles/\n         *         Styled mode\n         * @sample {highmaps} highcharts/css/titles/\n         *         Styled mode\n         *\n         * @type      {Highcharts.CSSObject}\n         * @default   {\"color\": \"#666666\"}\n         * @apioption subtitle.style\n         */\n        /**\n         * Whether to\n         * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n         * to render the text.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption subtitle.useHTML\n         */\n        /**\n         * The vertical alignment of the title. Can be one of `\"top\"`,\n         * `\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\n         * floating.\n         *\n         * @sample {highcharts} highcharts/subtitle/verticalalign/\n         *         Footnote at the bottom right of plot area\n         * @sample {highstock} stock/chart/subtitle-footnote\n         *         Footnote at the bottom right of plot area\n         *\n         * @type      {Highcharts.VerticalAlignValue}\n         * @since     2.1\n         * @apioption subtitle.verticalAlign\n         */\n        /**\n         * The x position of the subtitle relative to the alignment within\n         * `chart.spacingLeft` and `chart.spacingRight`.\n         *\n         * @sample {highcharts} highcharts/subtitle/align/\n         *         Footnote at right of plot area\n         * @sample {highstock} stock/chart/subtitle-footnote\n         *         Footnote at the bottom right of plot area\n         *\n         * @type      {number}\n         * @default   0\n         * @since     2.0\n         * @apioption subtitle.x\n         */\n        /**\n         * The y position of the subtitle relative to the alignment within\n         * `chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\n         * is laid out below the title unless the title is floating.\n         *\n         * @sample {highcharts} highcharts/subtitle/verticalalign/\n         *         Footnote at the bottom right of plot area\n         * @sample {highstock} stock/chart/subtitle-footnote\n         *         Footnote at the bottom right of plot area\n         *\n         * @type      {number}\n         * @since     2.0\n         * @apioption subtitle.y\n         */\n        /**\n         * CSS styles for the title.\n         *\n         * In styled mode, the subtitle style is given in the\n         * `.highcharts-subtitle` class.\n         *\n         * @sample {highcharts} highcharts/subtitle/style/\n         *         Custom color and weight\n         * @sample {highcharts} highcharts/css/titles/\n         *         Styled mode\n         * @sample {highstock} stock/chart/subtitle-style\n         *         Custom color and weight\n         * @sample {highstock} highcharts/css/titles/\n         *         Styled mode\n         * @sample {highmaps} highcharts/css/titles/\n         *         Styled mode\n         *\n         * @type      {Highcharts.CSSObject}\n         * @default   {\"color\": \"#666666\"}\n         */\n        style: {\n            color: \"#666666\" /* Palette.neutralColor60 */,\n            /**\n             * @type {number|string}\n             */\n            fontSize: '0.8em'\n        },\n        /**\n         * The subtitle of the chart.\n         *\n         * @sample {highcharts|highstock} highcharts/subtitle/text/\n         *         Custom subtitle\n         * @sample {highcharts|highstock} highcharts/subtitle/text-formatted/\n         *         Formatted and linked text.\n         */\n        text: ''\n    },\n    /**\n     * The chart's caption, which will render below the chart and will be part\n     * of exported charts. The caption can be updated after chart initialization\n     * through the `Chart.update` or `Chart.caption.update` methods.\n     *\n     * @sample highcharts/caption/text/\n     *         A chart with a caption\n     * @since  7.2.0\n     */\n    caption: {\n        /**\n         * When the caption is floating, the plot area will not move to make\n         * space for it.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption caption.floating\n         */\n        /**\n         * The margin between the caption and the plot area.\n         */\n        margin: 15,\n        /**\n         * Whether to\n         * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n         * to render the text.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption caption.useHTML\n         */\n        /**\n         * The x position of the caption relative to the alignment within\n         * `chart.spacingLeft` and `chart.spacingRight`.\n         *\n         * @type      {number}\n         * @default   0\n         * @apioption caption.x\n         */\n        /**\n         * The y position of the caption relative to the alignment within\n         * `chart.spacingTop` and `chart.spacingBottom`.\n         *\n         * @type      {number}\n         * @apioption caption.y\n         */\n        /**\n         * CSS styles for the caption.\n         *\n         * In styled mode, the caption style is given in the\n         * `.highcharts-caption` class.\n         *\n         * @sample {highcharts} highcharts/css/titles/\n         *         Styled mode\n         *\n         * @type      {Highcharts.CSSObject}\n         * @default   {\"color\": \"#666666\"}\n         */\n        style: {\n            color: \"#666666\" /* Palette.neutralColor60 */,\n            /**\n             * @type {number|string}\n             */\n            fontSize: '0.8em'\n        },\n        /**\n         * The caption text of the chart.\n         *\n         * @sample {highcharts} highcharts/caption/text/\n         *         Custom caption\n         */\n        text: '',\n        /**\n         * The horizontal alignment of the caption. Can be one of \"left\",\n         *  \"center\" and \"right\".\n         *\n         * @type  {Highcharts.AlignValue}\n         */\n        align: 'left',\n        /**\n         * The vertical alignment of the caption. Can be one of `\"top\"`,\n         * `\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\n         * floating.\n         *\n         * @type      {Highcharts.VerticalAlignValue}\n         */\n        verticalAlign: 'bottom'\n    },\n    /**\n     * The plotOptions is a wrapper object for config objects for each series\n     * type. The config objects for each series can also be overridden for\n     * each series item as given in the series array.\n     *\n     * Configuration options for the series are given in three levels. Options\n     * for all series in a chart are given in the [plotOptions.series](\n     * #plotOptions.series) object. Then options for all series of a specific\n     * type are given in the plotOptions of that type, for example\n     * `plotOptions.line`. Next, options for one single series are given in\n     * [the series array](#series).\n     */\n    plotOptions: {},\n    /**\n     * The legend is a box containing a symbol and name for each series\n     * item or point item in the chart. Each series (or points in case\n     * of pie charts) is represented by a symbol and its name in the legend.\n     *\n     * It is possible to override the symbol creator function and create\n     * [custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/).\n     *\n     * @productdesc {highmaps}\n     * A Highmaps legend by default contains one legend item per series, but if\n     * a `colorAxis` is defined, the axis will be displayed in the legend.\n     * Either as a gradient, or as multiple legend items for `dataClasses`.\n     */\n    legend: {\n        /**\n         * The background color of the legend.\n         *\n         * @see In styled mode, the legend background fill can be applied with\n         *      the `.highcharts-legend-box` class.\n         *\n         * @sample {highcharts} highcharts/legend/backgroundcolor/\n         *         Yellowish background\n         * @sample {highstock} stock/legend/align/\n         *         Various legend options\n         * @sample {highmaps} maps/legend/border-background/\n         *         Border and background options\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption legend.backgroundColor\n         */\n        /**\n         * The width of the drawn border around the legend.\n         *\n         * @see In styled mode, the legend border stroke width can be applied\n         *      with the `.highcharts-legend-box` class.\n         *\n         * @sample {highcharts} highcharts/legend/borderwidth/\n         *         2px border width\n         * @sample {highstock} stock/legend/align/\n         *         Various legend options\n         * @sample {highmaps} maps/legend/border-background/\n         *         Border and background options\n         *\n         * @type      {number}\n         * @default   0\n         * @apioption legend.borderWidth\n         */\n        /**\n         * Enable or disable the legend. There is also a series-specific option,\n         * [showInLegend](#plotOptions.series.showInLegend), that can hide the\n         * series from the legend. In some series types this is `false` by\n         * default, so it must set to `true` in order to show the legend for the\n         * series.\n         *\n         * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n         * @sample {highstock} stock/legend/align/ Various legend options\n         * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n         *\n         * @default {highstock} false\n         * @default {highmaps} true\n         * @default {gantt} false\n         */\n        enabled: true,\n        /**\n         * The horizontal alignment of the legend box within the chart area.\n         * Valid values are `left`, `center` and `right`.\n         *\n         * In the case that the legend is aligned in a corner position, the\n         * `layout` option will determine whether to place it above/below\n         * or on the side of the plot area.\n         *\n         * @sample {highcharts} highcharts/legend/align/\n         *         Legend at the right of the chart\n         * @sample {highstock} stock/legend/align/\n         *         Various legend options\n         * @sample {highmaps} maps/legend/alignment/\n         *         Legend alignment\n         *\n         * @type  {Highcharts.AlignValue}\n         * @since 2.0\n         */\n        align: 'center',\n        /**\n         * If the [layout](legend.layout) is `horizontal` and the legend items\n         * span over two lines or more, whether to align the items into vertical\n         * columns. Setting this to `false` makes room for more items, but will\n         * look more messy.\n         *\n         * @since 6.1.0\n         */\n        alignColumns: true,\n        /**\n         * A CSS class name to apply to the legend group.\n         */\n        className: 'highcharts-no-tooltip',\n        /**\n         * General event handlers for the legend. These event hooks can\n         * also be attached to the legend at run time using the\n         * `Highcharts.addEvent` function.\n         *\n         * @declare Highcharts.LegendEventsOptionsObject\n         *\n         * @private\n         */\n        events: {},\n        /**\n         * Fires when the legend item belonging to the series is clicked. One\n         * parameter, `event`, is passed to the function. The default action\n         * is to toggle the visibility of the series, point or data class. This\n         * can be prevented by returning `false` or calling\n         * `event.preventDefault()`.\n         *\n         * @sample {highcharts} highcharts/legend/itemclick/\n         *         Confirm hiding and showing\n         * @sample {highcharts} highcharts/legend/pie-legend-itemclick/\n         *         Confirm toggle visibility of pie slices\n         *\n         * @type      {Highcharts.LegendItemClickCallbackFunction}\n         * @context   Highcharts.Legend\n         * @apioption legend.events.itemClick\n         */\n        /**\n         * When the legend is floating, the plot area ignores it and is allowed\n         * to be placed below it.\n         *\n         * @sample {highcharts} highcharts/legend/floating-false/\n         *         False by default\n         * @sample {highcharts} highcharts/legend/floating-true/\n         *         True\n         * @sample {highmaps} maps/legend/alignment/\n         *         Floating legend\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     2.1\n         * @apioption legend.floating\n         */\n        /**\n         * The layout of the legend items. Can be one of `horizontal` or\n         * `vertical` or `proximate`. When `proximate`, the legend items will be\n         * placed as close as possible to the graphs they're representing,\n         * except in inverted charts or when the legend position doesn't allow\n         * it.\n         *\n         * @sample {highcharts} highcharts/legend/layout-horizontal/\n         *         Horizontal by default\n         * @sample {highcharts} highcharts/legend/layout-vertical/\n         *         Vertical\n         * @sample highcharts/legend/layout-proximate\n         *         Labels proximate to the data\n         * @sample {highstock} stock/legend/layout-horizontal/\n         *         Horizontal by default\n         * @sample {highmaps} maps/legend/padding-itemmargin/\n         *         Vertical with data classes\n         * @sample {highmaps} maps/legend/layout-vertical/\n         *         Vertical with color axis gradient\n         *\n         * @validvalue [\"horizontal\", \"vertical\", \"proximate\"]\n         */\n        layout: 'horizontal',\n        /**\n         * In a legend with horizontal layout, the itemDistance defines the\n         * pixel distance between each item.\n         *\n         * @sample {highcharts} highcharts/legend/layout-horizontal/\n         *         50px item distance\n         * @sample {highstock} highcharts/legend/layout-horizontal/\n         *         50px item distance\n         *\n         * @type      {number}\n         * @default   {highcharts} 20\n         * @default   {highstock} 20\n         * @default   {highmaps} 8\n         * @since     3.0.3\n         * @apioption legend.itemDistance\n         */\n        /**\n         * The pixel bottom margin for each legend item.\n         *\n         * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n         *         Padding and item margins demonstrated\n         * @sample {highmaps} maps/legend/padding-itemmargin/\n         *         Padding and item margins demonstrated\n         *\n         * @since     2.2.0\n         */\n        itemMarginBottom: 2,\n        /**\n         * The pixel top margin for each legend item.\n         *\n         * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n         *         Padding and item margins demonstrated\n         * @sample {highmaps} maps/legend/padding-itemmargin/\n         *         Padding and item margins demonstrated\n         *\n         * @since     2.2.0\n         */\n        itemMarginTop: 2,\n        /**\n         * The width for each legend item. By default the items are laid out\n         * successively. In a [horizontal layout](legend.layout), if the items\n         * are laid out across two rows or more, they will be vertically aligned\n         * depending on the [legend.alignColumns](legend.alignColumns) option.\n         *\n         * @sample {highcharts} highcharts/legend/itemwidth-default/\n         *         Undefined by default\n         * @sample {highcharts} highcharts/legend/itemwidth-80/\n         *         80 for aligned legend items\n         *\n         * @type      {number}\n         * @since     2.0\n         * @apioption legend.itemWidth\n         */\n        /**\n         * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n         * for each legend label. Available variables relates to properties on\n         * the series, or the point in case of pies.\n         *\n         * @type      {string}\n         * @default   {name}\n         * @since     1.3\n         * @apioption legend.labelFormat\n         */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Callback function to format each of the series' labels. The `this`\n         * keyword refers to the series object, or the point object in case of\n         * pie charts. By default the series or point name is printed.\n         *\n         * @productdesc {highmaps}\n         * In Highmaps the context can also be a data class in case of a\n         * `colorAxis`.\n         *\n         * @sample {highcharts} highcharts/legend/labelformatter/\n         *         Add text\n         * @sample {highmaps} maps/legend/labelformatter/\n         *         Data classes with label formatter\n         *\n         * @type {Highcharts.FormatterCallbackFunction<Point|Series>}\n         */\n        labelFormatter: function () {\n            // eslint-enable valid-jsdoc\n            return this.name;\n        },\n        /**\n         * Line height for the legend items. Deprecated as of 2.1\\. Instead,\n         * the line height for each item can be set using\n         * `itemStyle.lineHeight`, and the padding between items using\n         * `itemMarginTop` and `itemMarginBottom`.\n         *\n         * @sample {highcharts} highcharts/legend/lineheight/\n         *         Setting padding\n         *\n         * @deprecated\n         *\n         * @type      {number}\n         * @default   16\n         * @since     2.0\n         * @product   highcharts gantt\n         * @apioption legend.lineHeight\n         */\n        /**\n         * If the plot area sized is calculated automatically and the legend is\n         * not floating, the legend margin is the space between the legend and\n         * the axis labels or plot area.\n         *\n         * @sample {highcharts} highcharts/legend/margin-default/\n         *         12 pixels by default\n         * @sample {highcharts} highcharts/legend/margin-30/\n         *         30 pixels\n         *\n         * @type      {number}\n         * @default   12\n         * @since     2.1\n         * @apioption legend.margin\n         */\n        /**\n         * Maximum pixel height for the legend. When the maximum height is\n         * extended, navigation will show.\n         *\n         * @type      {number}\n         * @since     2.3.0\n         * @apioption legend.maxHeight\n         */\n        /**\n         * The color of the drawn border around the legend.\n         *\n         * @see In styled mode, the legend border stroke can be applied with the\n         *      `.highcharts-legend-box` class.\n         *\n         * @sample {highcharts} highcharts/legend/bordercolor/\n         *         Brown border\n         * @sample {highstock} stock/legend/align/\n         *         Various legend options\n         * @sample {highmaps} maps/legend/border-background/\n         *         Border and background options\n         *\n         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         */\n        borderColor: \"#999999\" /* Palette.neutralColor40 */,\n        /**\n         * The border corner radius of the legend.\n         *\n         * @sample {highcharts} highcharts/legend/borderradius-default/\n         *         Square by default\n         * @sample {highcharts} highcharts/legend/borderradius-round/\n         *         5px rounded\n         * @sample {highmaps} maps/legend/border-background/\n         *         Border and background options\n         */\n        borderRadius: 0,\n        /**\n         * Options for the paging or navigation appearing when the legend is\n         * overflown. Navigation works well on screen, but not in static\n         * exported images. One way of working around that is to\n         * [increase the chart height in\n         * export](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/).\n         *\n         * @sample highcharts/legend/scrollable-vertical/\n         *         Legend with vertical scrollable extension\n         * @sample highcharts/legend/scrollable-horizontal/\n         *         Legend with horizontal scrollable extension\n         *\n         */\n        navigation: {\n            /**\n             * How to animate the pages when navigating up or down. A value of\n             * `true` applies the default navigation given in the\n             * `chart.animation` option. Additional options can be given as an\n             * object containing values for easing and duration.\n             *\n             * @sample {highcharts} highcharts/legend/navigation/\n             *         Legend page navigation demonstrated\n             * @sample {highstock} highcharts/legend/navigation/\n             *         Legend page navigation demonstrated\n             *\n             * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @default   true\n             * @since     2.2.4\n             * @apioption legend.navigation.animation\n             */\n            /**\n             * The pixel size of the up and down arrows in the legend paging\n             * navigation.\n             *\n             * @sample {highcharts} highcharts/legend/navigation/\n             *         Legend page navigation demonstrated\n             * @sample {highstock} highcharts/legend/navigation/\n             *         Legend page navigation demonstrated\n             *\n             * @type      {number}\n             * @default   12\n             * @since     2.2.4\n             * @apioption legend.navigation.arrowSize\n             */\n            /**\n             * Whether to enable the legend navigation. In most cases, disabling\n             * the navigation results in an unwanted overflow.\n             *\n             * See also the\n             * [adapt chart to legend](https://github.com/highcharts/adapt-chart-to-legend)\n             * plugin for a solution to extend the chart height to make room for\n             * the legend, optionally in exported charts only.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     4.2.4\n             * @apioption legend.navigation.enabled\n             */\n            /**\n             * Text styles for the legend page navigation.\n             *\n             * @see In styled mode, the navigation items are styled with the\n             *      `.highcharts-legend-navigation` class.\n             *\n             * @sample {highcharts} highcharts/legend/navigation/\n             *         Legend page navigation demonstrated\n             * @sample {highstock} highcharts/legend/navigation/\n             *         Legend page navigation demonstrated\n             *\n             * @type      {Highcharts.CSSObject}\n             * @since     2.2.4\n             * @apioption legend.navigation.style\n             */\n            style: {\n                /**\n                 * @type {number|string}\n                 */\n                fontSize: '0.8em'\n            },\n            /**\n             * The color for the active up or down arrow in the legend page\n             * navigation.\n             *\n             * @see In styled mode, the active arrow be styled with the\n             *      `.highcharts-legend-nav-active` class.\n             *\n             * @sample  {highcharts} highcharts/legend/navigation/\n             *          Legend page navigation demonstrated\n             * @sample  {highstock} highcharts/legend/navigation/\n             *          Legend page navigation demonstrated\n             *\n             * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since 2.2.4\n             */\n            activeColor: \"#0022ff\" /* Palette.highlightColor100 */,\n            /**\n             * The color of the inactive up or down arrow in the legend page\n             * navigation. .\n             *\n             * @see In styled mode, the inactive arrow be styled with the\n             *      `.highcharts-legend-nav-inactive` class.\n             *\n             * @sample {highcharts} highcharts/legend/navigation/\n             *         Legend page navigation demonstrated\n             * @sample {highstock} highcharts/legend/navigation/\n             *         Legend page navigation demonstrated\n             *\n             * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since 2.2.4\n             */\n            inactiveColor: \"#cccccc\" /* Palette.neutralColor20 */\n        },\n        /**\n         * The inner padding of the legend box.\n         *\n         * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n         *         Padding and item margins demonstrated\n         * @sample {highmaps} maps/legend/padding-itemmargin/\n         *         Padding and item margins demonstrated\n         *\n         * @type      {number}\n         * @default   8\n         * @since     2.2.0\n         * @apioption legend.padding\n         */\n        /**\n         * Whether to reverse the order of the legend items compared to the\n         * order of the series or points as defined in the configuration object.\n         *\n         * @see [yAxis.reversedStacks](#yAxis.reversedStacks),\n         *      [series.legendIndex](#series.legendIndex)\n         *\n         * @sample {highcharts} highcharts/legend/reversed/\n         *         Stacked bar with reversed legend\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     1.2.5\n         * @apioption legend.reversed\n         */\n        /**\n         * Whether to show the symbol on the right side of the text rather than\n         * the left side. This is common in Arabic and Hebrew.\n         *\n         * @sample {highcharts} highcharts/legend/rtl/\n         *         Symbol to the right\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     2.2\n         * @apioption legend.rtl\n         */\n        /**\n         * CSS styles for the legend area. In the 1.x versions the position\n         * of the legend area was determined by CSS. In 2.x, the position is\n         * determined by properties like `align`, `verticalAlign`, `x` and `y`,\n         * but the styles are still parsed for backwards compatibility.\n         *\n         * @deprecated\n         *\n         * @type      {Highcharts.CSSObject}\n         * @product   highcharts highstock\n         * @apioption legend.style\n         */\n        /**\n         * CSS styles for each legend item. Only a subset of CSS is supported,\n         * notably those options related to text. The default `textOverflow`\n         * property makes long texts truncate. Set it to `undefined` to wrap\n         * text instead. A `width` property can be added to control the text\n         * width.\n         *\n         * @see In styled mode, the legend items can be styled with the\n         *      `.highcharts-legend-item` class.\n         *\n         * @sample {highcharts} highcharts/legend/itemstyle/\n         *         Bold black text\n         * @sample {highmaps} maps/legend/itemstyle/\n         *         Item text styles\n         *\n         * @type    {Highcharts.CSSObject}\n         * @default {\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"0.8em\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}\n         */\n        itemStyle: {\n            /**\n             * @ignore\n             */\n            color: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * @ignore\n             */\n            cursor: 'pointer',\n            /**\n             * @ignore\n             */\n            fontSize: '0.8em',\n            /**\n             * @ignore\n             */\n            textDecoration: 'none',\n            /**\n             * @ignore\n             */\n            textOverflow: 'ellipsis'\n        },\n        /**\n         * CSS styles for each legend item in hover mode. Only a subset of\n         * CSS is supported, notably those options related to text. Properties\n         * are inherited from `style` unless overridden here.\n         *\n         * @see In styled mode, the hovered legend items can be styled with\n         *      the `.highcharts-legend-item:hover` pseudo-class.\n         *\n         * @sample {highcharts} highcharts/legend/itemhoverstyle/\n         *         Red on hover\n         * @sample {highmaps} maps/legend/itemstyle/\n         *         Item text styles\n         *\n         * @type    {Highcharts.CSSObject}\n         * @default {\"color\": \"#000000\"}\n         */\n        itemHoverStyle: {\n            /**\n             * @ignore\n             */\n            color: \"#000000\" /* Palette.neutralColor100 */\n        },\n        /**\n         * CSS styles for each legend item when the corresponding series or\n         * point is hidden. Only a subset of CSS is supported, notably those\n         * options related to text. Properties are inherited from `style`\n         * unless overridden here.\n         *\n         * @see In styled mode, the hidden legend items can be styled with\n         *      the `.highcharts-legend-item-hidden` class.\n         *\n         * @sample {highcharts} highcharts/legend/itemhiddenstyle/\n         *         Darker gray color\n         *\n         * @type    {Highcharts.CSSObject}\n         * @default {\"color\": \"#cccccc\"}\n         */\n        itemHiddenStyle: {\n            /**\n             * @ignore\n             */\n            color: \"#666666\" /* Palette.neutralColor60 */,\n            /**\n             * @ignore\n             */\n            textDecoration: 'line-through'\n        },\n        /**\n         * Whether to apply a drop shadow to the legend. A `backgroundColor`\n         * also needs to be applied for this to take effect. The shadow can be\n         * an object configuration containing `color`, `offsetX`, `offsetY`,\n         * `opacity` and `width`.\n         *\n         * @sample {highcharts} highcharts/legend/shadow/\n         *         White background and drop shadow\n         * @sample {highstock} stock/legend/align/\n         *         Various legend options\n         * @sample {highmaps} maps/legend/border-background/\n         *         Border and background options\n         *\n         * @type {boolean|Highcharts.CSSObject}\n         */\n        shadow: false,\n        /**\n         * Default styling for the checkbox next to a legend item when\n         * `showCheckbox` is true.\n         *\n         * @type {Highcharts.CSSObject}\n         * @default {\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}\n         */\n        itemCheckboxStyle: {\n            /**\n             * @ignore\n             */\n            position: 'absolute',\n            /**\n             * @ignore\n             */\n            width: '13px', // For IE precision\n            /**\n             * @ignore\n             */\n            height: '13px'\n        },\n        /// itemWidth: undefined,\n        /**\n         * When this is true, the legend symbol width will be the same as\n         * the symbol height, which in turn defaults to the font size of the\n         * legend items.\n         *\n         * @since 5.0.0\n         */\n        squareSymbol: true,\n        /**\n         * The pixel height of the symbol for series types that use a rectangle\n         * in the legend. Defaults to the font size of legend items.\n         *\n         * Note: This option is a default source of color axis height, if the\n         * [colorAxis.height](https://api.highcharts.com/highcharts/colorAxis.height)\n         * option is not set.\n         *\n         * @productdesc {highmaps}\n         * In Highmaps, when the symbol is the gradient of a vertical color\n         * axis, the height defaults to 200.\n         *\n         * @sample {highmaps} maps/legend/layout-vertical-sized/\n         *         Sized vertical gradient\n         * @sample {highmaps} maps/legend/padding-itemmargin/\n         *         No distance between data classes\n         *\n         * @type      {number}\n         * @since     3.0.8\n         * @apioption legend.symbolHeight\n         */\n        /**\n         * The border radius of the symbol for series types that use a rectangle\n         * in the legend. Defaults to half the `symbolHeight`, effectively\n         * creating a circle.\n         *\n         * For color axis scales, it defaults to 3.\n         *\n         * @sample {highcharts} highcharts/legend/symbolradius/\n         *         Round symbols\n         * @sample {highstock} highcharts/legend/symbolradius/\n         *         Round symbols\n         * @sample {highmaps} highcharts/legend/symbolradius/\n         *         Round symbols\n         *\n         * @type      {number}\n         * @since     3.0.8\n         * @apioption legend.symbolRadius\n         */\n        /**\n         * The pixel width of the legend item symbol. When the `squareSymbol`\n         * option is set, this defaults to the `symbolHeight`, otherwise 16.\n         *\n         * Note: This option is a default source of color axis width, if the\n         * [colorAxis.width](https://api.highcharts.com/highcharts/colorAxis.width)\n         * option is not set.\n         *\n         * @productdesc {highmaps}\n         * In Highmaps, when the symbol is the gradient of a horizontal color\n         * axis, the width defaults to 200.\n         *\n         * @sample {highcharts} highcharts/legend/symbolwidth/\n         *         Greater symbol width and padding\n         * @sample {highmaps} maps/legend/padding-itemmargin/\n         *         Padding and item margins demonstrated\n         * @sample {highmaps} maps/legend/layout-vertical-sized/\n         *         Sized vertical gradient\n         *\n         * @type      {number}\n         * @apioption legend.symbolWidth\n         */\n        /**\n         * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n         * to render the legend item texts.\n         *\n         * Prior to 4.1.7, when using HTML, [legend.navigation](\n         * #legend.navigation) was disabled.\n         *\n         * @sample highcharts/legend/scrollable-vertical/\n         *         Legend with vertical scrollable extension\n         * @sample highcharts/legend/scrollable-horizontal/\n         *         Legend with horizontal scrollable extension\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption legend.useHTML\n         */\n        /**\n         * For a color axis with data classes, how many decimals to render in\n         * the legend. The default preserves the decimals of the range numbers.\n         *\n         * @type      {number}\n         * @default   -1\n         * @product   highcharts highmaps\n         * @apioption legend.valueDecimals\n         */\n        /**\n         * For a color axis with data classes, a suffix for the range numbers in\n         * the legend.\n         *\n         * @type      {string}\n         * @default   ''\n         * @product   highcharts highmaps\n         * @apioption legend.valueSuffix\n         */\n        /**\n         * The width of the legend box. If a number is set, it translates to\n         * pixels. Since v7.0.2 it allows setting a percent string of the full\n         * chart width, for example `40%`.\n         *\n         * Defaults to the full chart width for legends below or above the\n         * chart, half the chart width for legends to the left and right.\n         *\n         * @sample {highcharts} highcharts/legend/width/\n         *         Aligned to the plot area\n         * @sample {highcharts} highcharts/legend/width-percent/\n         *         A percent of the chart width\n         *\n         * @type      {number|string}\n         * @since     2.0\n         * @apioption legend.width\n         */\n        /**\n         * The pixel padding between the legend item symbol and the legend\n         * item text.\n         *\n         * @sample {highcharts} highcharts/legend/symbolpadding/\n         *         Greater symbol width and padding\n         */\n        symbolPadding: 5,\n        /**\n         * The vertical alignment of the legend box. Can be one of `top`,\n         * `middle` or `bottom`. Vertical position can be further determined\n         * by the `y` option.\n         *\n         * In the case that the legend is aligned in a corner position, the\n         * `layout` option will determine whether to place it above/below\n         * or on the side of the plot area.\n         *\n         * When the [layout](#legend.layout) option is `proximate`, the\n         * `verticalAlign` option doesn't apply.\n         *\n         * @sample {highcharts} highcharts/legend/verticalalign/\n         *         Legend 100px from the top of the chart\n         * @sample {highstock} stock/legend/align/\n         *         Various legend options\n         * @sample {highmaps} maps/legend/alignment/\n         *         Legend alignment\n         *\n         * @type  {Highcharts.VerticalAlignValue}\n         * @since 2.0\n         */\n        verticalAlign: 'bottom',\n        // Width: undefined,\n        /**\n         * The x offset of the legend relative to its horizontal alignment\n         * `align` within chart.spacingLeft and chart.spacingRight. Negative\n         * x moves it to the left, positive x moves it to the right.\n         *\n         * @sample {highcharts} highcharts/legend/width/\n         *         Aligned to the plot area\n         *\n         * @since 2.0\n         */\n        x: 0,\n        /**\n         * The vertical offset of the legend relative to it's vertical alignment\n         * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n         *  Negative y moves it up, positive y moves it down.\n         *\n         * @sample {highcharts} highcharts/legend/verticalalign/\n         *         Legend 100px from the top of the chart\n         * @sample {highstock} stock/legend/align/\n         *         Various legend options\n         * @sample {highmaps} maps/legend/alignment/\n         *         Legend alignment\n         *\n         * @since 2.0\n         */\n        y: 0,\n        /**\n         * A title to be added on top of the legend.\n         *\n         * @sample {highcharts} highcharts/legend/title/\n         *         Legend title\n         * @sample {highmaps} maps/legend/alignment/\n         *         Legend with title\n         *\n         * @since 3.0\n         */\n        title: {\n            /**\n             * A text or HTML string for the title.\n             *\n             * @type      {string}\n             * @since     3.0\n             * @apioption legend.title.text\n             */\n            /**\n             * Generic CSS styles for the legend title.\n             *\n             * @see In styled mode, the legend title is styled with the\n             *      `.highcharts-legend-title` class.\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"fontSize\": \"0.8em\", \"fontWeight\": \"bold\"}\n             * @since   3.0\n             */\n            style: {\n                /**\n                 * @ignore\n                 */\n                fontSize: '0.8em',\n                /**\n                 * @ignore\n                 */\n                fontWeight: 'bold'\n            }\n        }\n    },\n    /**\n     * The loading options control the appearance of the loading screen\n     * that covers the plot area on chart operations. This screen only\n     * appears after an explicit call to `chart.showLoading()`. It is a\n     * utility for developers to communicate to the end user that something\n     * is going on, for example while retrieving new data via an XHR connection.\n     * The \"Loading...\" text itself is not part of this configuration\n     * object, but part of the `lang` object.\n     */\n    loading: {\n        /**\n         * The duration in milliseconds of the fade out effect.\n         *\n         * @sample highcharts/loading/hideduration/\n         *         Fade in and out over a second\n         *\n         * @type      {number}\n         * @default   100\n         * @since     1.2.0\n         * @apioption loading.hideDuration\n         */\n        /**\n         * The duration in milliseconds of the fade in effect.\n         *\n         * @sample highcharts/loading/hideduration/\n         *         Fade in and out over a second\n         *\n         * @type      {number}\n         * @default   100\n         * @since     1.2.0\n         * @apioption loading.showDuration\n         */\n        /**\n         * CSS styles for the loading label `span`.\n         *\n         * @see In styled mode, the loading label is styled with the\n         *      `.highcharts-loading-inner` class.\n         *\n         * @sample {highcharts|highmaps} highcharts/loading/labelstyle/\n         *         Vertically centered\n         * @sample {highstock} stock/loading/general/\n         *         Label styles\n         *\n         * @type    {Highcharts.CSSObject}\n         * @default {\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}\n         * @since   1.2.0\n         */\n        labelStyle: {\n            /**\n             * @ignore\n             */\n            fontWeight: 'bold',\n            /**\n             * @ignore\n             */\n            position: 'relative',\n            /**\n             * @ignore\n             */\n            top: '45%'\n        },\n        /**\n         * CSS styles for the loading screen that covers the plot area.\n         *\n         * In styled mode, the loading label is styled with the\n         * `.highcharts-loading` class.\n         *\n         * @sample  {highcharts|highmaps} highcharts/loading/style/\n         *          Gray plot area, white text\n         * @sample  {highstock} stock/loading/general/\n         *          Gray plot area, white text\n         *\n         * @type    {Highcharts.CSSObject}\n         * @default {\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}\n         * @since   1.2.0\n         */\n        style: {\n            /**\n             * @ignore\n             */\n            position: 'absolute',\n            /**\n             * @ignore\n             */\n            backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * @ignore\n             */\n            opacity: 0.5,\n            /**\n             * @ignore\n             */\n            textAlign: 'center'\n        }\n    },\n    /**\n     * Options for the tooltip that appears when the user hovers over a\n     * series or point.\n     *\n     * @declare Highcharts.TooltipOptions\n     */\n    tooltip: {\n        /**\n         * The color of the tooltip border. When `undefined`, the border takes\n         * the color of the corresponding series or point.\n         *\n         * Note that the [borderWidth](#tooltip.borderWidth) is usually 0 by\n         * default, so the border color may not be visible until a border width\n         * is set.\n         *\n         * @sample {highcharts} highcharts/tooltip/bordercolor-default/ Follow\n         *         series by default\n         * @sample {highcharts} highcharts/tooltip/bordercolor-black/ Black\n         *         border\n         * @sample {highstock} stock/tooltip/general/ Styled tooltip\n         * @sample {highmaps} maps/tooltip/background-border/ Background and\n         *         border demo\n         *\n         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption tooltip.borderColor\n         */\n        /**\n         * A CSS class name to apply to the tooltip's container div,\n         * allowing unique CSS styling for each chart.\n         *\n         * @type      {string}\n         * @apioption tooltip.className\n         */\n        /**\n         * Since 4.1, the crosshair definitions are moved to the Axis object\n         * in order for a better separation from the tooltip. See\n         * [xAxis.crosshair](#xAxis.crosshair).\n         *\n         * @sample {highcharts} highcharts/tooltip/crosshairs-x/\n         *         Enable a crosshair for the x value\n         *\n         * @deprecated\n         *\n         * @type      {*}\n         * @default   true\n         * @apioption tooltip.crosshairs\n         */\n        /**\n         * Distance from point to tooltip in pixels.\n         *\n         * @type      {number}\n         * @default   16\n         * @apioption tooltip.distance\n         */\n        /**\n         * Whether the tooltip should follow the mouse as it moves across\n         * columns, pie slices and other point types with an extent.\n         * By default it behaves this way for pie, polygon, map, sankey\n         * and wordcloud series by override in the `plotOptions`\n         * for those series types.\n         *\n         * Does not apply if [split](#tooltip.split) is `true`.\n         *\n         * For touch moves to behave the same way, [followTouchMove](\n         * #tooltip.followTouchMove) must be `true` also.\n         *\n         * @sample highcharts/tooltip/followpointer/\n         *         Tooltip follow pointer comparison\n         *\n         * @type      {boolean}\n         * @default   {highcharts} false\n         * @default   {highstock} false\n         * @default   {highmaps} true\n         * @since     3.0\n         * @apioption tooltip.followPointer\n         */\n        /**\n         * Whether the tooltip should update as the finger moves on a touch\n         * device. If this is `true` and [chart.panning](#chart.panning) is\n         * set,`followTouchMove` will take over one-finger touches, so the user\n         * needs to use two fingers for zooming and panning.\n         *\n         * Note the difference to [followPointer](#tooltip.followPointer) that\n         * only defines the _position_ of the tooltip. If `followPointer` is\n         * false in for example a column series, the tooltip will show above or\n         * below the column, but as `followTouchMove` is true, the tooltip will\n         * jump from column to column as the user swipes across the plot area.\n         *\n         * @type      {boolean}\n         * @default   {highcharts} true\n         * @default   {highstock} true\n         * @default   {highmaps} false\n         * @since     3.0.1\n         * @apioption tooltip.followTouchMove\n         */\n        /**\n         * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n         * for the whole shared tooltip. When format strings are a requirement,\n         * it is usually more convenient to use `headerFormat`, `pointFormat`\n         * and `footerFormat`, but the `format` option allows combining them\n         * into one setting.\n         *\n         * The context of the format string is the same as that of the\n         * `tooltip.formatter` callback.\n         *\n         * @sample {highcharts} highcharts/tooltip/format-shared/\n         *         Format for shared tooltip\n         *\n         * @type      {string}\n         * @default   undefined\n         * @since     11.1.0\n         * @apioption tooltip.format\n         */\n        /**\n         * Callback function to format the text of the tooltip from scratch. In\n         * case of single or [shared](#tooltip.shared) tooltips, a string should\n         * be returned. In case of [split](#tooltip.split) tooltips, it should\n         * return an array where the first item is the header, and subsequent\n         * items are mapped to the points. Return `false` to disable tooltip for\n         * a specific point on series.\n         *\n         * A subset of HTML is supported. Unless `useHTML` is true, the HTML of\n         * the tooltip is parsed and converted to SVG, therefore this isn't a\n         * complete HTML renderer. The following HTML tags are supported: `b`,\n         * `br`, `em`, `i`, `span`, `strong`. Spans can be styled with a `style`\n         * attribute, but only text-related CSS, that is shared with SVG, is\n         * handled.\n         *\n         * The context of the formatter (since v12) is the\n         * [Point](https://api.highcharts.com/class-reference/Highcharts.Point)\n         * instance. If the tooltip is shared or split, an array `this.points`\n         * contains all points of the hovered x-value.\n         *\n         * Common properties from the Point to use in the formatter include:\n         *\n         * - **Point.percentage**:\n         *   Stacked series and pies only. The point's percentage of the total.\n         *\n         * - **Point.points**:\n         *   In a shared or split tooltip, this is an array containing all the\n         *   hovered points.\n         *\n         * - **this.series**:\n         *   The series object. The series name is available through\n         *   `this.series.name`.\n         *\n         * - **this.total**:\n         *   The total value at this point's x value in a stacked series, or the\n         *   sum of all slices in a pie series.\n         *\n         * - **this.x**:\n         *   The x value.\n         *\n         * - **this.y**:\n         *   The y value.\n         *\n         * @sample {highcharts} highcharts/tooltip/formatter-simple/\n         *         Simple string formatting\n         * @sample {highcharts} highcharts/tooltip/formatter-shared/\n         *         Formatting with shared tooltip\n         * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n         *         Formatting with split tooltip\n         * @sample highcharts/tooltip/formatter-conditional-default/\n         *         Extending default formatter\n         * @sample {highstock} stock/tooltip/formatter/\n         *         Formatting with shared tooltip\n         * @sample {highmaps} maps/tooltip/formatter/\n         *         String formatting\n         *\n         * @type      {Highcharts.TooltipFormatterCallbackFunction}\n         * @apioption tooltip.formatter\n         */\n        /**\n         * Callback function to format the text of the tooltip for\n         * visible null points.\n         * Works analogously to [formatter](#tooltip.formatter).\n         *\n         * @sample highcharts/plotoptions/series-nullformat\n         *         Format data label and tooltip for null point.\n         *\n         * @type      {Highcharts.TooltipFormatterCallbackFunction}\n         * @apioption tooltip.nullFormatter\n         */\n        /**\n         * Whether to allow the tooltip to render outside the chart's SVG\n         * element box. By default (`false`), the tooltip is rendered within the\n         * chart's SVG element, which results in the tooltip being aligned\n         * inside the chart area. For small charts, this may result in clipping\n         * or overlapping. When `true`, a separate SVG element is created and\n         * overlaid on the page, allowing the tooltip to be aligned inside the\n         * page itself. Beware that with this option active, CSS classes on the\n         * chart's target container, with classnames matching the pattern\n         * 'highcharts-*', will be set on the tooltip as well. This is done to\n         * support theming for tooltips with this option.\n         *\n         * Defaults to `true` if `chart.scrollablePlotArea` is activated,\n         * otherwise `false`.\n         *\n         * @sample highcharts/tooltip/outside\n         *         Small charts with tooltips outside\n         *\n         * @type      {boolean|undefined}\n         * @default   undefined\n         * @since     6.1.1\n         * @apioption tooltip.outside\n         */\n        /**\n         * A callback function for formatting the HTML output for a single point\n         * in the tooltip. Like the `pointFormat` string, but with more\n         * flexibility.\n         *\n         * @type      {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n         * @since     4.1.0\n         * @context   Highcharts.Point\n         * @apioption tooltip.pointFormatter\n         */\n        /**\n         * A callback function to place the tooltip in a custom position. The\n         * callback receives three parameters: `labelWidth`, `labelHeight` and\n         * `point`, where point contains values for `plotX` and `plotY` telling\n         * where the reference point is in the plot area. Add `chart.plotLeft`\n         * and `chart.plotTop` to get the full coordinates.\n         *\n         * To find the actual hovered `Point` instance, use\n         * `this.chart.hoverPoint`. For shared or split tooltips, all the hover\n         * points are available in `this.chart.hoverPoints`.\n         *\n         * Since v7, when [tooltip.split](#tooltip.split) option is enabled,\n         * positioner is called for each of the boxes separately, including\n         * xAxis header. xAxis header is not a point, instead `point` argument\n         * contains info: `{ plotX: Number, plotY: Number, isHeader: Boolean }`\n         *\n         * The return should be an object containing x and y values, for example\n         * `{ x: 100, y: 100 }`.\n         *\n         * @sample {highcharts} highcharts/tooltip/positioner/\n         *         A fixed tooltip position\n         * @sample {highstock} stock/tooltip/positioner/\n         *         A fixed tooltip position on top of the chart\n         * @sample {highmaps} maps/tooltip/positioner/\n         *         A fixed tooltip position\n         * @sample {highstock} stock/tooltip/split-positioner/\n         *         Split tooltip with fixed positions\n         * @sample {highstock} stock/tooltip/positioner-scrollable-plotarea/\n         *         Scrollable plot area combined with tooltip positioner\n         *\n         * @type      {Highcharts.TooltipPositionerCallbackFunction}\n         * @since     2.2.4\n         * @apioption tooltip.positioner\n         */\n        /**\n         * Shows tooltip for all points with the same X value. Splits the\n         * tooltip into one label per series, with the header close to the axis.\n         * This is recommended over [shared](#tooltip.shared)\n         * tooltips for charts with multiple line series, generally making them\n         * easier to read. This option takes precedence over `tooltip.shared`.\n         *\n         * Not supported for [polar](#chart.polar) and [inverted](#chart.inverted) charts.\n         *\n         * @productdesc {highstock} In Highcharts Stock, tooltips are split\n         * by default since v6.0.0. Stock charts typically contain\n         * multi-dimension points and multiple panes, making split tooltips\n         * the preferred layout over\n         * the previous `shared` tooltip.\n         *\n         * @sample highcharts/tooltip/split/\n         *         Split tooltip\n         * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n         *         Split tooltip and custom formatter callback\n         *\n         * @type      {boolean}\n         * @default   {highcharts} false\n         * @default   {highstock} true\n         * @since     5.0.0\n         * @product   highcharts highstock\n         * @apioption tooltip.split\n         */\n        /**\n         * Prevents the tooltip from switching or closing, when touched or\n         * pointed.\n         *\n         * @sample highcharts/tooltip/stickoncontact/\n         *         Tooltip sticks on pointer contact\n         *\n         * @type      {boolean}\n         * @since     8.0.1\n         * @apioption tooltip.stickOnContact\n         */\n        /**\n         * Use HTML to render the contents of the tooltip instead of SVG. Using\n         * HTML allows advanced formatting like tables and images in the\n         * tooltip. It is also recommended for rtl languages as it works around\n         * rtl bugs in early Firefox.\n         *\n         * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n         *         A table for value alignment\n         * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n         *         Full HTML tooltip\n         * @sample {highmaps} maps/tooltip/usehtml/\n         *         Pure HTML tooltip\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     2.2\n         * @apioption tooltip.useHTML\n         */\n        /**\n         * How many decimals to show in each series' y value. This is\n         * overridable in each series' tooltip options object. The default is to\n         * preserve all decimals.\n         *\n         * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n         *         Set decimals, prefix and suffix for the value\n         * @sample {highmaps} maps/tooltip/valuedecimals/\n         *         Set decimals, prefix and suffix for the value\n         *\n         * @type      {number|undefined}\n         * @since     2.2\n         * @apioption tooltip.valueDecimals\n         */\n        /**\n         * A string to prepend to each series' y value. Overridable in each\n         * series' tooltip options object.\n         *\n         * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n         *         Set decimals, prefix and suffix for the value\n         * @sample {highmaps} maps/tooltip/valuedecimals/\n         *         Set decimals, prefix and suffix for the value\n         *\n         * @type      {string}\n         * @since     2.2\n         * @apioption tooltip.valuePrefix\n         */\n        /**\n         * A string to append to each series' y value. Overridable in each\n         * series' tooltip options object.\n         *\n         * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n         *         Set decimals, prefix and suffix for the value\n         * @sample {highmaps} maps/tooltip/valuedecimals/\n         *         Set decimals, prefix and suffix for the value\n         *\n         * @type      {string}\n         * @since     2.2\n         * @apioption tooltip.valueSuffix\n         */\n        /**\n         * The format for the date in the tooltip header if the X axis is a\n         * datetime axis. The default is a best guess based on the smallest\n         * distance between points in the chart.\n         *\n         * @sample {highcharts} highcharts/tooltip/xdateformat/\n         *         A different format\n         *\n         * @type      {string|Highcharts.DateTimeFormatOptions}\n         * @product   highcharts highstock gantt\n         * @apioption tooltip.xDateFormat\n         */\n        /**\n         * How many decimals to show for the `point.change`\n         * or the `point.cumulativeSum` value when the `series.compare`\n         * or the `series.cumulative` option is set.\n         * This is overridable in each series' tooltip options object.\n         *\n         * @type      {number}\n         * @default   2\n         * @since     1.0.1\n         * @product   highstock\n         * @apioption tooltip.changeDecimals\n         */\n        /**\n         * Enable or disable the tooltip.\n         *\n         * @sample {highcharts} highcharts/tooltip/enabled/\n         *         Disabled\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n         *         Disable tooltip and show values on chart instead\n         */\n        enabled: true,\n        /**\n         * Enable or disable animation of the tooltip.\n         *\n         * @type       {boolean|Partial<Highcharts.AnimationOptionsObject>}\n         * @since      2.3.0\n         */\n        animation: {\n            duration: 300,\n            // EaseOutCirc\n            easing: (x) => Math.sqrt(1 - Math.pow(x - 1, 2))\n        },\n        /**\n         * The radius of the rounded border corners.\n         *\n         * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n         *         Default border radius\n         * @sample {highcharts} highcharts/tooltip/borderradius-0/\n         *         Square borders\n         * @sample {highmaps} maps/tooltip/background-border/\n         *         Background and border demo\n         */\n        borderRadius: 3,\n        /**\n         * For series on datetime axes, the date format in the tooltip's\n         * header will by default be guessed based on the closest data points.\n         * This member gives the default string representations used for\n         * each unit. For an overview of the string or object configuration, see\n         * [dateFormat](/class-reference/Highcharts.Time#dateFormat).\n         *\n         * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n         *\n         * @type    {Highcharts.Dictionary<string|Highcharts.DateTimeFormatOptions>}\n         * @product highcharts highstock gantt\n         */\n        dateTimeLabelFormats: {\n            /** @internal */\n            millisecond: '%[AebHMSL]',\n            /** @internal */\n            second: '%[AebHMS]',\n            /** @internal */\n            minute: '%[AebHM]',\n            /** @internal */\n            hour: '%[AebHM]',\n            /** @internal */\n            day: '%[AebY]',\n            /** @internal */\n            week: '%v %[AebY]',\n            /** @internal */\n            month: '%[BY]',\n            /** @internal */\n            year: '%Y'\n        },\n        /**\n         * A string to append to the tooltip format.\n         *\n         * @sample {highcharts} highcharts/tooltip/footerformat/\n         *         A table for value alignment\n         * @sample {highmaps} maps/tooltip/format/\n         *         Format demo\n         *\n         * @since 2.2\n         */\n        footerFormat: '',\n        /**\n         * The name of a symbol to use for the border around the tooltip\n         * header. Applies only when [tooltip.split](#tooltip.split) is\n         * enabled.\n         *\n         * Custom callbacks for symbol path generation can also be added to\n         * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n         * [series.marker.symbol](plotOptions.line.marker.symbol).\n         *\n         * @see [tooltip.shape](#tooltip.shape)\n         *\n         * @sample {highstock} stock/tooltip/split-positioner/\n         *         Different shapes for header and split boxes\n         *\n         * @type       {Highcharts.TooltipShapeValue}\n         * @validvalue [\"callout\", \"rect\"]\n         * @since      7.0\n         */\n        headerShape: 'callout',\n        /**\n         * The number of milliseconds to wait until the tooltip is hidden when\n         * mouse out from a point or chart.\n         *\n         * @since 3.0\n         */\n        hideDelay: 500,\n        /**\n         * Padding inside the tooltip, in pixels.\n         *\n         * @since 5.0.0\n         */\n        padding: 8,\n        /**\n         * The name of a symbol to use for the border around the tooltip. Can\n         * be one of: `\"callout\"`, `\"circle\"` or `\"rect\"`. When\n         * [tooltip.split](#tooltip.split)\n         * option is enabled, shape is applied to all boxes except header, which\n         * is controlled by\n         * [tooltip.headerShape](#tooltip.headerShape).\n         *\n         * Custom callbacks for symbol path generation can also be added to\n         * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n         * [series.marker.symbol](plotOptions.line.marker.symbol).\n         *\n         * @type  {Highcharts.TooltipShapeValue}\n         * @since 4.0\n         */\n        shape: 'callout',\n        /**\n         * Shows information in the tooltip for all points with the same X\n         * value. When the tooltip is shared, the entire plot area will capture\n         * mouse movement or touch events. Tooltip texts for series types with\n         * ordered data (not pie, scatter, flags etc) will be shown in a single\n         * bubble. This is recommended for single series charts and for\n         * tablet/mobile optimized charts.\n         *\n         * See also [tooltip.split](#tooltip.split), that is better suited for\n         * charts with many series, especially line-type series. The\n         * `tooltip.split` option takes precedence over `tooltip.shared`.\n         *\n         * @sample {highcharts} highcharts/tooltip/shared-false/\n         *         False by default\n         * @sample {highcharts} highcharts/tooltip/shared-true/\n         *         True\n         * @sample {highcharts} highcharts/tooltip/shared-x-crosshair/\n         *         True with x axis crosshair\n         * @sample {highcharts} highcharts/tooltip/shared-true-mixed-types/\n         *         True with mixed series types\n         *\n         * @since   2.1\n         * @product highcharts highstock\n         */\n        shared: false,\n        /**\n         * Proximity snap for graphs or single points. It defaults to 10 for\n         * mouse-powered devices and 25 for touch devices.\n         *\n         * Note that in most cases the whole plot area captures the mouse\n         * movement, and in these cases `tooltip.snap` doesn't make sense. This\n         * applies when [stickyTracking](#plotOptions.series.stickyTracking)\n         * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n         * or [split](#tooltip.split).\n         *\n         * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n         *         10 px by default\n         * @sample {highcharts} highcharts/tooltip/snap-50/\n         *         50 px on graph\n         *\n         * @type    {number}\n         * @default 10/25\n         * @since   1.2.0\n         * @product highcharts highstock\n         */\n        snap: isTouchDevice ? 25 : 10,\n        /**\n         * The HTML of the tooltip header line. The context is the\n         * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n         * Variables are enclosed in curly brackets. Examples of common\n         * variables to include are `x`, `y`, `series.name` and `series.color`\n         * and other properties on the same form. The `point.key` variable\n         * contains the category name, x value or datetime string depending on\n         * the type of axis. For datetime axes, the `point.key` date format can\n         * be set using `tooltip.xDateFormat`.\n         *\n         * @sample {highcharts} highcharts/tooltip/footerformat/\n         *         An HTML table in the tooltip\n         * @sample {highstock} highcharts/tooltip/footerformat/\n         *         An HTML table in the tooltip\n         * @sample {highmaps} maps/tooltip/format/\n         *         Format demo\n         *\n         * @type      {string}\n         * @apioption tooltip.headerFormat\n         */\n        headerFormat: '<span style=\"font-size: 0.8em\">{ucfirst point.key}</span><br/>',\n        /**\n         * The HTML of the null point's line in the tooltip. Works analogously\n         * to [pointFormat](#tooltip.pointFormat).\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-nullformat\n         *         Format data label and tooltip for null point.\n         *\n         * @type      {string}\n         * @apioption tooltip.nullFormat\n         */\n        /**\n         * The HTML of the point's line in the tooltip. The context is the\n         * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n         * Variables are enclosed in curly brackets. Examples of common\n         * variables to include are `x`, `y`, `series.name` and `series.color`\n         * and other properties on the same form. Furthermore, `y` can be\n         * extended by the `tooltip.valuePrefix` and `tooltip.valueSuffix`\n         * variables. This can also be overridden for each series, which makes\n         * it a good hook for displaying units.\n         *\n         * In styled mode, the dot is colored by a class name rather than the\n         * point color.\n         *\n         * @sample {highcharts} highcharts/tooltip/pointformat/\n         *         A different point format with value suffix\n         * @sample {highcharts|highstock} highcharts/tooltip/pointformat-extra-information/\n         *         Show extra information about points in the tooltip\n         * @sample {highmaps} maps/tooltip/format/\n         *         Format demo\n         *\n         * @type       {string}\n         * @since      2.2\n         * @apioption  tooltip.pointFormat\n         */\n        pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n        /**\n         * The background color or gradient for the tooltip.\n         *\n         * In styled mode, the stroke width is set in the\n         * `.highcharts-tooltip-box` class.\n         *\n         * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/\n         *         Yellowish background\n         * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/\n         *         Gradient\n         * @sample {highcharts} highcharts/css/tooltip-border-background/\n         *         Tooltip in styled mode\n         * @sample {highstock} stock/tooltip/general/\n         *         Custom tooltip\n         * @sample {highstock} highcharts/css/tooltip-border-background/\n         *         Tooltip in styled mode\n         * @sample {highmaps} maps/tooltip/background-border/\n         *         Background and border demo\n         * @sample {highmaps} highcharts/css/tooltip-border-background/\n         *         Tooltip in styled mode\n         *\n         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         */\n        backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n        /**\n         * The pixel width of the tooltip border. Defaults to 0 for single\n         * tooltips and 1 for split tooltips.\n         *\n         * In styled mode, the stroke width is set in the\n         * `.highcharts-tooltip-box` class.\n         *\n         * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n         *         2 pixels\n         * @sample {highcharts} highcharts/tooltip/borderwidth/\n         *         No border (shadow only)\n         * @sample {highcharts} highcharts/css/tooltip-border-background/\n         *         Tooltip in styled mode\n         * @sample {highstock} stock/tooltip/general/\n         *         Custom tooltip\n         * @sample {highstock} highcharts/css/tooltip-border-background/\n         *         Tooltip in styled mode\n         * @sample {highmaps} maps/tooltip/background-border/\n         *         Background and border demo\n         * @sample {highmaps} highcharts/css/tooltip-border-background/\n         *         Tooltip in styled mode\n         *\n         * @type {number}\n         */\n        borderWidth: void 0,\n        /**\n         * Whether to apply a drop shadow to the tooltip.\n         *\n         * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n         *         True by default\n         * @sample {highcharts} highcharts/tooltip/shadow/\n         *         False\n         * @sample {highmaps} maps/tooltip/positioner/\n         *         Fixed tooltip position, border and shadow disabled\n         *\n         * @type {boolean|Highcharts.ShadowOptionsObject}\n         */\n        shadow: true,\n        /**\n         * Prevents the tooltip from switching or closing when touched or\n         * pointed.\n         *\n         * @sample highcharts/tooltip/stickoncontact/\n         *         Tooltip sticks on pointer contact\n         *\n         * @since 8.0.1\n         */\n        stickOnContact: false,\n        /**\n         * CSS styles for the tooltip. The tooltip can also be styled through\n         * the CSS class `.highcharts-tooltip`.\n         *\n         * Note that the default `pointerEvents` style makes the tooltip ignore\n         * mouse events, so in order to use clickable tooltips, this value must\n         * be set to `auto`.\n         *\n         * @sample {highcharts} highcharts/tooltip/style/\n         *         Greater padding, bold text\n         *\n         * @type {Highcharts.CSSObject}\n         */\n        style: {\n            /** @internal */\n            color: \"#333333\" /* Palette.neutralColor80 */,\n            /** @internal */\n            cursor: 'default',\n            /**\n             * @type {number|string}\n             */\n            fontSize: '0.8em'\n        },\n        /**\n         * Use HTML to render the contents of the tooltip instead of SVG. Using\n         * HTML allows advanced formatting like tables and images in the\n         * tooltip. It is also recommended for rtl languages as it works around\n         * rtl bugs in early Firefox.\n         *\n         * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n         *         A table for value alignment\n         * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n         *         Full HTML tooltip\n         * @sample {highmaps} maps/tooltip/usehtml/\n         *         Pure HTML tooltip\n         *\n         * @since 2.2\n         */\n        useHTML: false\n    },\n    /**\n     * Highchart by default puts a credits label in the lower right corner\n     * of the chart. This can be changed using these options.\n     */\n    credits: {\n        /**\n         * Credits for map source to be concatenated with conventional credit\n         * text. By default this is a format string that collects copyright\n         * information from the map if available.\n         *\n         * @see [mapTextFull](#credits.mapTextFull)\n         * @see [text](#credits.text)\n         *\n         * @type      {string}\n         * @default   \\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>\n         * @since     4.2.2\n         * @product   highmaps\n         * @apioption credits.mapText\n         */\n        /**\n         * Detailed credits for map source to be displayed on hover of credits\n         * text. By default this is a format string that collects copyright\n         * information from the map if available.\n         *\n         * @see [mapText](#credits.mapText)\n         * @see [text](#credits.text)\n         *\n         * @type      {string}\n         * @default   {geojson.copyright}\n         * @since     4.2.2\n         * @product   highmaps\n         * @apioption credits.mapTextFull\n         */\n        /**\n         * Whether to show the credits text.\n         *\n         * @sample {highcharts} highcharts/credits/enabled-false/\n         *         Credits disabled\n         * @sample {highstock} stock/credits/enabled/\n         *         Credits disabled\n         * @sample {highmaps} maps/credits/enabled-false/\n         *         Credits disabled\n         */\n        enabled: true,\n        /**\n         * The URL for the credits label.\n         *\n         * @sample {highcharts} highcharts/credits/href/\n         *         Custom URL and text\n         * @sample {highmaps} maps/credits/customized/\n         *         Custom URL and text\n         */\n        href: 'https://www.highcharts.com?credits',\n        /**\n         * Position configuration for the credits label.\n         *\n         * @sample {highcharts} highcharts/credits/position-left/\n         *         Left aligned\n         * @sample {highcharts} highcharts/credits/position-left/\n         *         Left aligned\n         * @sample {highmaps} maps/credits/customized/\n         *         Left aligned\n         * @sample {highmaps} maps/credits/customized/\n         *         Left aligned\n         *\n         * @type    {Highcharts.AlignObject}\n         * @since   2.1\n         */\n        position: {\n            /** @internal */\n            align: 'right',\n            /** @internal */\n            x: -10,\n            /** @internal */\n            verticalAlign: 'bottom',\n            /** @internal */\n            y: -5\n        },\n        /**\n         * CSS styles for the credits label.\n         *\n         * @see In styled mode, credits styles can be set with the\n         *      `.highcharts-credits` class.\n         *\n         * @type {Highcharts.CSSObject}\n         */\n        style: {\n            /** @internal */\n            cursor: 'pointer',\n            /** @internal */\n            color: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * @type {number|string}\n             */\n            fontSize: '0.6em'\n        },\n        /**\n         * The text for the credits label.\n         *\n         * @productdesc {highmaps}\n         * If a map is loaded as GeoJSON, the text defaults to\n         * `Highcharts @ {map-credits}`. Otherwise, it defaults to\n         * `Highcharts.com`.\n         *\n         * @sample {highcharts} highcharts/credits/href/\n         *         Custom URL and text\n         * @sample {highmaps} maps/credits/customized/\n         *         Custom URL and text\n         */\n        text: 'Highcharts.com'\n    }\n};\nconst defaultTime = new Core_Time(defaultOptions.time, defaultOptions.lang);\n/**\n * Get the updated default options. Until 3.0.7, merely exposing defaultOptions\n * for outside modules wasn't enough because the setOptions method created a new\n * object.\n *\n * @function Highcharts.getOptions\n *\n * @return {Highcharts.Options}\n * Default options.\n */\nfunction getOptions() {\n    return defaultOptions;\n}\n/**\n * Merge the default options with custom options and return the new options\n * structure. Commonly used for defining reusable templates.\n *\n * @sample highcharts/members/setoptions Applying a global theme\n *\n * @function Highcharts.setOptions\n *\n * @param {Highcharts.Options} options\n * The new custom chart options.\n *\n * @return {Highcharts.Options}\n * Updated options.\n */\nfunction setOptions(options) {\n    Defaults_fireEvent(Core_Globals, 'setOptions', { options });\n    // Copy in the default options\n    Defaults_merge(true, defaultOptions, options);\n    // Update the time object\n    if (options.time) {\n        defaultTime.update(defaultOptions.time);\n    }\n    if (options.lang && 'locale' in options.lang) {\n        defaultTime.update({\n            locale: options.lang.locale\n        });\n    }\n    if (options.lang?.chartTitle) {\n        defaultOptions.title = {\n            ...defaultOptions.title,\n            text: options.lang.chartTitle\n        };\n    }\n    return defaultOptions;\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst DefaultOptions = {\n    defaultOptions,\n    defaultTime,\n    getOptions,\n    setOptions\n};\n/* harmony default export */ const Defaults = (DefaultOptions);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * @typedef {\"plotBox\"|\"spacingBox\"} Highcharts.ButtonRelativeToValue\n */\n/**\n * Gets fired when a series is added to the chart after load time, using the\n * `addSeries` method. Returning `false` prevents the series from being added.\n *\n * @callback Highcharts.ChartAddSeriesCallbackFunction\n *\n * @param {Highcharts.Chart} this\n *        The chart on which the event occurred.\n *\n * @param {Highcharts.ChartAddSeriesEventObject} event\n *        The event that occurred.\n */\n/**\n * Contains common event information. Through the `options` property you can\n * access the series options that were passed to the `addSeries` method.\n *\n * @interface Highcharts.ChartAddSeriesEventObject\n */ /**\n* The series options that were passed to the `addSeries` method.\n* @name Highcharts.ChartAddSeriesEventObject#options\n* @type {Highcharts.SeriesOptionsType}\n*/ /**\n* Prevents the default behaviour of the event.\n* @name Highcharts.ChartAddSeriesEventObject#preventDefault\n* @type {Function}\n*/ /**\n* The event target.\n* @name Highcharts.ChartAddSeriesEventObject#target\n* @type {Highcharts.Chart}\n*/ /**\n* The event type.\n* @name Highcharts.ChartAddSeriesEventObject#type\n* @type {\"addSeries\"}\n*/\n/**\n * Gets fired when clicking on the plot background.\n *\n * @callback Highcharts.ChartClickCallbackFunction\n *\n * @param {Highcharts.Chart} this\n *        The chart on which the event occurred.\n *\n * @param {Highcharts.PointerEventObject} event\n *        The event that occurred.\n */\n/**\n * Contains an axes of the clicked spot.\n *\n * @interface Highcharts.ChartClickEventAxisObject\n */ /**\n* Axis at the clicked spot.\n* @name Highcharts.ChartClickEventAxisObject#axis\n* @type {Highcharts.Axis}\n*/ /**\n* Axis value at the clicked spot.\n* @name Highcharts.ChartClickEventAxisObject#value\n* @type {number}\n*/\n/**\n * Contains information about the clicked spot on the chart. Remember the unit\n * of a datetime axis is milliseconds since 1970-01-01 00:00:00.\n *\n * @interface Highcharts.ChartClickEventObject\n * @extends Highcharts.PointerEventObject\n */ /**\n* Information about the x-axis on the clicked spot.\n* @name Highcharts.ChartClickEventObject#xAxis\n* @type {Array<Highcharts.ChartClickEventAxisObject>}\n*/ /**\n* Information about the y-axis on the clicked spot.\n* @name Highcharts.ChartClickEventObject#yAxis\n* @type {Array<Highcharts.ChartClickEventAxisObject>}\n*/ /**\n* Information about the z-axis on the clicked spot.\n* @name Highcharts.ChartClickEventObject#zAxis\n* @type {Array<Highcharts.ChartClickEventAxisObject>|undefined}\n*/\n/**\n * Gets fired when the chart is finished loading.\n *\n * @callback Highcharts.ChartLoadCallbackFunction\n *\n * @param {Highcharts.Chart} this\n *        The chart on which the event occurred.\n *\n * @param {global.Event} event\n *        The event that occurred.\n */\n/**\n * Fires when the chart is redrawn, either after a call to `chart.redraw()` or\n * after an axis, series or point is modified with the `redraw` option set to\n * `true`.\n *\n * @callback Highcharts.ChartRedrawCallbackFunction\n *\n * @param {Highcharts.Chart} this\n *        The chart on which the event occurred.\n *\n * @param {global.Event} event\n *        The event that occurred.\n */\n/**\n * Gets fired after initial load of the chart (directly after the `load` event),\n * and after each redraw (directly after the `redraw` event).\n *\n * @callback Highcharts.ChartRenderCallbackFunction\n *\n * @param {Highcharts.Chart} this\n *        The chart on which the event occurred.\n *\n * @param {global.Event} event\n *        The event that occurred.\n */\n/**\n * Gets fired when an area of the chart has been selected. The default action\n * for the selection event is to zoom the chart to the selected area. It can be\n * prevented by calling `event.preventDefault()` or return false.\n *\n * @callback Highcharts.ChartSelectionCallbackFunction\n *\n * @param {Highcharts.Chart} this\n *        The chart on which the event occurred.\n *\n * @param {Highcharts.SelectEventObject} event\n *        Event informations\n *\n * @return {boolean|undefined}\n *         Return false to prevent the default action, usually zoom.\n */\n(''); // Detach doclets above\n\n;// ./code/grid/es-modules/Core/Templating.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { defaultOptions: Templating_defaultOptions, defaultTime: Templating_defaultTime } = Defaults;\n\nconst { pageLang: Templating_pageLang } = Core_Globals;\n\nconst { extend: Templating_extend, getNestedProperty: Templating_getNestedProperty, isArray: Templating_isArray, isNumber: Templating_isNumber, isObject: Templating_isObject, isString: Templating_isString, pick: Templating_pick, ucfirst: Templating_ucfirst } = Core_Utilities;\nconst helpers = {\n    // Built-in helpers\n    add: (a, b) => a + b,\n    divide: (a, b) => (b !== 0 ? a / b : ''),\n    // eslint-disable-next-line eqeqeq\n    eq: (a, b) => a == b,\n    each: function (arr) {\n        const match = arguments[arguments.length - 1];\n        return Templating_isArray(arr) ?\n            arr.map((item, i) => format(match.body, Templating_extend(Templating_isObject(item) ? item : { '@this': item }, {\n                '@index': i,\n                '@first': i === 0,\n                '@last': i === arr.length - 1\n            }))).join('') :\n            false;\n    },\n    ge: (a, b) => a >= b,\n    gt: (a, b) => a > b,\n    'if': (condition) => !!condition,\n    le: (a, b) => a <= b,\n    lt: (a, b) => a < b,\n    multiply: (a, b) => a * b,\n    // eslint-disable-next-line eqeqeq\n    ne: (a, b) => a != b,\n    subtract: (a, b) => a - b,\n    ucfirst: Templating_ucfirst,\n    unless: (condition) => !condition\n};\nconst numberFormatCache = {};\n/* *\n *\n *  Functions\n *\n * */\n// Internal convenience function\nconst isQuotedString = (str) => /^[\"'].+[\"']$/.test(str);\n/**\n * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n * human readable date string. The format is a subset of the formats for PHP's\n * [strftime](https://www.php.net/manual/en/function.strftime.php) function.\n * Additional formats can be given in the {@link Highcharts.dateFormats} hook.\n *\n * Since v6.0.5, all internal dates are formatted through the\n * {@link Highcharts.Chart#time} instance to respect chart-level time settings.\n * The `Highcharts.dateFormat` function only reflects global time settings set\n * with `setOptions`.\n *\n * Supported format keys:\n * - `%a`: Short weekday, like 'Mon'\n * - `%A`: Long weekday, like 'Monday'\n * - `%d`: Two digit day of the month, 01 to 31\n * - `%e`: Day of the month, 1 through 31\n * - `%w`: Day of the week, 0 through 6\n * - `%b`: Short month, like 'Jan'\n * - `%B`: Long month, like 'January'\n * - `%m`: Two digit month number, 01 through 12\n * - `%y`: Two digits year, like 09 for 2009\n * - `%Y`: Four digits year, like 2009\n * - `%H`: Two digits hours in 24h format, 00 through 23\n * - `%k`: Hours in 24h format, 0 through 23\n * - `%I`: Two digits hours in 12h format, 00 through 11\n * - `%l`: Hours in 12h format, 1 through 12\n * - `%M`: Two digits minutes, 00 through 59\n * - `%p`: Upper case AM or PM\n * - `%P`: Lower case AM or PM\n * - `%S`: Two digits seconds, 00 through 59\n * - `%L`: Milliseconds (naming from Ruby)\n *\n * @function Highcharts.dateFormat\n *\n * @param {string} format\n *        The desired format where various time representations are prefixed\n *        with `%`.\n *\n * @param {number} timestamp\n *        The JavaScript timestamp.\n *\n * @param {boolean} [upperCaseFirst=false]\n *        Upper case first letter in the return.\n *\n * @return {string}\n *         The formatted date.\n */\nfunction dateFormat(format, timestamp, upperCaseFirst) {\n    return Templating_defaultTime.dateFormat(format, timestamp, upperCaseFirst);\n}\n/**\n * Format a string according to a subset of the rules of Python's String.format\n * method.\n *\n * @example\n * let s = Highcharts.format(\n *     'The {color} fox was {len:.2f} feet long',\n *     { color: 'red', len: Math.PI }\n * );\n * // => The red fox was 3.14 feet long\n *\n * @function Highcharts.format\n *\n * @param {string} str\n *        The string to format.\n *\n * @param {Record<string, *>} ctx\n *        The context, a collection of key-value pairs where each key is\n *        replaced by its value.\n *\n * @param {Highcharts.Chart} [owner]\n *        A `Chart` or `DataGrid` instance used to get numberFormatter and time.\n *\n * @return {string}\n *         The formatted string.\n */\nfunction format(str = '', ctx, owner) {\n    // Notice: using u flag will require a refactor for ES5 (#22450).\n    const regex = /\\{([a-zA-Z\\u00C0-\\u017F\\d:\\.,;\\-\\/<>\\[\\]%_@+\"'’= #\\(\\)]+)\\}/g, // eslint-disable-line max-len\n    // The sub expression regex is the same as the top expression regex,\n    // but except parens and block helpers (#), and surrounded by parens\n    // instead of curly brackets.\n    subRegex = /\\(([a-zA-Z\\u00C0-\\u017F\\d:\\.,;\\-\\/<>\\[\\]%_@+\"'= ]+)\\)/g, matches = [], floatRegex = /f$/, decRegex = /\\.(\\d)/, lang = owner?.options?.lang || Templating_defaultOptions.lang, time = owner?.time || Templating_defaultTime, numberFormatter = owner?.numberFormatter || numberFormat;\n    /*\n     * Get a literal or variable value inside a template expression. May be\n     * extended with other types like string or null if needed, but keep it\n     * small for now.\n     */\n    const resolveProperty = (key = '') => {\n        let n;\n        // Literals\n        if (key === 'true') {\n            return true;\n        }\n        if (key === 'false') {\n            return false;\n        }\n        if ((n = Number(key)).toString() === key) {\n            return n;\n        }\n        if (isQuotedString(key)) {\n            return key.slice(1, -1);\n        }\n        // Variables and constants\n        return Templating_getNestedProperty(key, ctx);\n    };\n    let match, currentMatch, depth = 0, hasSub;\n    // Parse and create tree\n    while ((match = regex.exec(str)) !== null) {\n        // When a sub expression is found, it is evaluated first, and the\n        // results recursively evaluated until no subexpression exists.\n        const mainMatch = match, subMatch = subRegex.exec(match[1]);\n        if (subMatch) {\n            match = subMatch;\n            hasSub = true;\n        }\n        if (!currentMatch?.isBlock) {\n            currentMatch = {\n                ctx,\n                expression: match[1],\n                find: match[0],\n                isBlock: match[1].charAt(0) === '#',\n                start: match.index,\n                startInner: match.index + match[0].length,\n                length: match[0].length\n            };\n        }\n        // Identify helpers\n        const fn = (currentMatch.isBlock ? mainMatch : match)[1].split(' ')[0].replace('#', '');\n        if (helpers[fn]) {\n            // Block helper, only 0 level is handled\n            if (currentMatch.isBlock && fn === currentMatch.fn) {\n                depth++;\n            }\n            if (!currentMatch.fn) {\n                currentMatch.fn = fn;\n            }\n        }\n        // Closing a block helper\n        const startingElseSection = match[1] === 'else';\n        if (currentMatch.isBlock &&\n            currentMatch.fn && (match[1] === `/${currentMatch.fn}` ||\n            startingElseSection)) {\n            if (!depth) { // === 0\n                const start = currentMatch.startInner, body = str.substr(start, match.index - start);\n                // Either closing without an else section, or when encountering\n                // an else section\n                if (currentMatch.body === void 0) {\n                    currentMatch.body = body;\n                    currentMatch.startInner = match.index + match[0].length;\n                    // The body exists already, so this is the else section\n                }\n                else {\n                    currentMatch.elseBody = body;\n                }\n                currentMatch.find += body + match[0];\n                if (!startingElseSection) {\n                    matches.push(currentMatch);\n                    currentMatch = void 0;\n                }\n            }\n            else if (!startingElseSection) {\n                depth--;\n            }\n            // Common expression\n        }\n        else if (!currentMatch.isBlock) {\n            matches.push(currentMatch);\n        }\n        // Evaluate sub-matches one by one to prevent orphaned block closers\n        if (subMatch && !currentMatch?.isBlock) {\n            break;\n        }\n    }\n    // Execute\n    matches.forEach((match) => {\n        const { body, elseBody, expression, fn } = match;\n        let replacement, i;\n        // Helper function\n        if (fn) {\n            // Pass the helpers the amount of arguments defined by the function,\n            // then the match as the last argument.\n            const args = [match], parts = [], len = expression.length;\n            let start = 0, startChar;\n            for (i = 0; i <= len; i++) {\n                const char = expression.charAt(i);\n                // Start of string\n                if (!startChar && (char === '\"' || char === '\\'')) {\n                    startChar = char;\n                    // End of string\n                }\n                else if (startChar === char) {\n                    startChar = '';\n                }\n                if (!startChar &&\n                    (char === ' ' || i === len)) {\n                    parts.push(expression.substr(start, i - start));\n                    start = i + 1;\n                }\n            }\n            i = helpers[fn].length;\n            while (i--) {\n                args.unshift(resolveProperty(parts[i + 1]));\n            }\n            replacement = helpers[fn].apply(ctx, args);\n            // Block helpers may return true or false. They may also return a\n            // string, like the `each` helper.\n            if (match.isBlock && typeof replacement === 'boolean') {\n                replacement = format(replacement ? body : elseBody, ctx, owner);\n            }\n            // Simple variable replacement\n        }\n        else {\n            const valueAndFormat = isQuotedString(expression) ?\n                [expression] : expression.split(':');\n            replacement = resolveProperty(valueAndFormat.shift() || '');\n            // Format the replacement\n            if (valueAndFormat.length && typeof replacement === 'number') {\n                const segment = valueAndFormat.join(':');\n                if (floatRegex.test(segment)) { // Float\n                    const decimals = parseInt((segment.match(decRegex) || ['', '-1'])[1], 10);\n                    if (replacement !== null) {\n                        replacement = numberFormatter(replacement, decimals, lang.decimalPoint, segment.indexOf(',') > -1 ? lang.thousandsSep : '');\n                    }\n                }\n                else {\n                    replacement = time.dateFormat(segment, replacement);\n                }\n            }\n            // Use string literal in order to be preserved in the outer\n            // expression\n            subRegex.lastIndex = 0;\n            if (subRegex.test(match.find) && Templating_isString(replacement)) {\n                replacement = `\"${replacement}\"`;\n            }\n        }\n        str = str.replace(match.find, Templating_pick(replacement, ''));\n    });\n    return hasSub ? format(str, ctx, owner) : str;\n}\n/**\n * Format a number and return a string based on input settings.\n *\n * @sample highcharts/members/highcharts-numberformat/\n *         Custom number format\n *\n * @function Highcharts.numberFormat\n *\n * @param {number} number\n *        The input number to format.\n *\n * @param {number} decimals\n *        The amount of decimals. A value of -1 preserves the amount in the\n *        input number.\n *\n * @param {string} [decimalPoint]\n *        The decimal point, defaults to the one given in the lang options, or\n *        a dot.\n *\n * @param {string} [thousandsSep]\n *        The thousands separator, defaults to the one given in the lang\n *        options, or a space character.\n *\n * @return {string}\n *         The formatted number.\n */\nfunction numberFormat(number, decimals, decimalPoint, thousandsSep) {\n    number = +number || 0;\n    decimals = +decimals;\n    let ret, fractionDigits, [mantissa, exp] = number.toString().split('e').map(Number);\n    const lang = this?.options?.lang || Templating_defaultOptions.lang, origDec = (number.toString().split('.')[1] || '').split('e')[0].length, firstDecimals = decimals, options = {};\n    decimalPoint ?? (decimalPoint = lang.decimalPoint);\n    thousandsSep ?? (thousandsSep = lang.thousandsSep);\n    if (decimals === -1) {\n        // Preserve decimals. Not huge numbers (#3793).\n        decimals = Math.min(origDec, 20);\n    }\n    else if (!Templating_isNumber(decimals)) {\n        decimals = 2;\n    }\n    else if (decimals && exp < 0) {\n        // Expose decimals from exponential notation (#7042)\n        fractionDigits = decimals + exp;\n        if (fractionDigits >= 0) {\n            // Remove too small part of the number while keeping the notation\n            mantissa = +mantissa.toExponential(fractionDigits).split('e')[0];\n            decimals = fractionDigits;\n        }\n        else {\n            // `fractionDigits < 0`\n            mantissa = Math.floor(mantissa);\n            if (decimals < 20) {\n                // Use number instead of exponential notation (#7405)\n                number = +(mantissa * Math.pow(10, exp)).toFixed(decimals);\n            }\n            else {\n                // Or zero\n                number = 0;\n            }\n            exp = 0;\n        }\n    }\n    if (exp) {\n        decimals ?? (decimals = 2);\n        number = mantissa;\n    }\n    if (Templating_isNumber(decimals) && decimals >= 0) {\n        options.minimumFractionDigits = decimals;\n        options.maximumFractionDigits = decimals;\n    }\n    if (thousandsSep === '') {\n        options.useGrouping = false;\n    }\n    const hasSeparators = thousandsSep || decimalPoint, locale = hasSeparators ?\n        'en' :\n        (this?.locale || lang.locale || Templating_pageLang), cacheKey = JSON.stringify(options) + locale, nf = numberFormatCache[cacheKey] ?? (numberFormatCache[cacheKey] = new Intl.NumberFormat(locale, options));\n    ret = nf.format(number);\n    // If thousandsSep or decimalPoint are set, fall back to using English\n    // format with string replacement for the separators.\n    if (hasSeparators) {\n        ret = ret\n            // Preliminary step to avoid re-swapping (#22402)\n            .replace(/([,\\.])/g, '_$1')\n            .replace(/_\\,/g, thousandsSep ?? ',')\n            .replace('_.', decimalPoint ?? '.');\n    }\n    if (\n    // Remove signed zero (#20564)\n    (!decimals && +ret === 0) ||\n        // Small numbers, no decimals (#14023)\n        (exp < 0 && !firstDecimals)) {\n        ret = '0';\n    }\n    if (exp && +ret !== 0) {\n        ret += 'e' + (exp < 0 ? '' : '+') + exp;\n    }\n    return ret;\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst Templating = {\n    dateFormat,\n    format,\n    helpers,\n    numberFormat\n};\n/* harmony default export */ const Core_Templating = (Templating);\n\n;// ./code/grid/es-modules/Data/Modifiers/DataModifier.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - Gøran Slettemark\n *\n * */\n\n\nconst { addEvent: DataModifier_addEvent, fireEvent: DataModifier_fireEvent, merge: DataModifier_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Abstract class to provide an interface for modifying a table.\n *\n */\nclass DataModifier {\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Runs a timed execution of the modifier on the given datatable.\n     * Can be configured to run multiple times.\n     *\n     * @param {DataTable} dataTable\n     * The datatable to execute\n     *\n     * @param {DataModifier.BenchmarkOptions} options\n     * Options. Currently supports `iterations` for number of iterations.\n     *\n     * @return {Array<number>}\n     * An array of times in milliseconds\n     *\n     */\n    benchmark(dataTable, options) {\n        const results = [];\n        const modifier = this;\n        const execute = () => {\n            modifier.modifyTable(dataTable);\n            modifier.emit({\n                type: 'afterBenchmarkIteration'\n            });\n        };\n        const defaultOptions = {\n            iterations: 1\n        };\n        const { iterations } = DataModifier_merge(defaultOptions, options);\n        modifier.on('afterBenchmarkIteration', () => {\n            if (results.length === iterations) {\n                modifier.emit({\n                    type: 'afterBenchmark',\n                    results\n                });\n                return;\n            }\n            // Run again\n            execute();\n        });\n        const times = {\n            startTime: 0,\n            endTime: 0\n        };\n        // Add timers\n        modifier.on('modify', () => {\n            times.startTime = window.performance.now();\n        });\n        modifier.on('afterModify', () => {\n            times.endTime = window.performance.now();\n            results.push(times.endTime - times.startTime);\n        });\n        // Initial run\n        execute();\n        return results;\n    }\n    /**\n     * Emits an event on the modifier to all registered callbacks of this event.\n     *\n     * @param {DataModifier.Event} [e]\n     * Event object containing additonal event information.\n     */\n    emit(e) {\n        DataModifier_fireEvent(this, e.type, e);\n    }\n    /**\n     * Returns a modified copy of the given table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Table to modify.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Promise<Highcharts.DataTable>}\n     * Table with `modified` property as a reference.\n     */\n    modify(table, eventDetail) {\n        const modifier = this;\n        return new Promise((resolve, reject) => {\n            if (table.modified === table) {\n                table.modified = table.clone(false, eventDetail);\n            }\n            try {\n                resolve(modifier.modifyTable(table, eventDetail));\n            }\n            catch (e) {\n                modifier.emit({\n                    type: 'error',\n                    detail: eventDetail,\n                    table\n                });\n                reject(e);\n            }\n        });\n    }\n    /**\n     * Applies partial modifications of a cell change to the property `modified`\n     * of the given modified table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {string} columnName\n     * Column name of changed cell.\n     *\n     * @param {number|undefined} rowIndex\n     * Row index of changed cell.\n     *\n     * @param {Highcharts.DataTableCellType} cellValue\n     * Changed cell value.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyCell(table, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    columnName, rowIndex, cellValue, eventDetail\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ) {\n        return this.modifyTable(table);\n    }\n    /**\n     * Applies partial modifications of column changes to the property\n     * `modified` of the given table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {Highcharts.DataTableColumnCollection} columns\n     * Changed columns as a collection, where the keys are the column names.\n     *\n     * @param {number} [rowIndex=0]\n     * Index of the first changed row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyColumns(table, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    columns, rowIndex, eventDetail\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ) {\n        return this.modifyTable(table);\n    }\n    /**\n     * Applies partial modifications of row changes to the property `modified`\n     * of the given table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n     * Changed rows.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first changed row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyRows(table, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    rows, rowIndex, eventDetail\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ) {\n        return this.modifyTable(table);\n    }\n    /**\n     * Registers a callback for a specific modifier event.\n     *\n     * @param {string} type\n     * Event type as a string.\n     *\n     * @param {DataEventEmitter.Callback} callback\n     * Function to register for an modifier callback.\n     *\n     * @return {Function}\n     * Function to unregister callback from the modifier event.\n     */\n    on(type, callback) {\n        return DataModifier_addEvent(this, type, callback);\n    }\n}\n/* *\n *\n *  Class Namespace\n *\n * */\n/**\n * Additionally provided types for modifier events and options.\n */\n(function (DataModifier) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    /**\n     * Registry as a record object with modifier names and their class\n     * constructor.\n     */\n    DataModifier.types = {};\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Adds a modifier class to the registry. The modifier class has to provide\n     * the `DataModifier.options` property and the `DataModifier.modifyTable`\n     * method to modify the table.\n     *\n     * @private\n     *\n     * @param {string} key\n     * Registry key of the modifier class.\n     *\n     * @param {DataModifierType} DataModifierClass\n     * Modifier class (aka class constructor) to register.\n     *\n     * @return {boolean}\n     * Returns true, if the registration was successful. False is returned, if\n     * their is already a modifier registered with this key.\n     */\n    function registerType(key, DataModifierClass) {\n        return (!!key &&\n            !DataModifier.types[key] &&\n            !!(DataModifier.types[key] = DataModifierClass));\n    }\n    DataModifier.registerType = registerType;\n})(DataModifier || (DataModifier = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Modifiers_DataModifier = (DataModifier);\n\n;// ./code/grid/es-modules/Data/ColumnUtils.js\n/* *\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *\n * */\n/**\n * Utility functions for columns that can be either arrays or typed arrays.\n * @private\n */\nvar ColumnUtils;\n(function (ColumnUtils) {\n    /* *\n    *\n    *  Declarations\n    *\n    * */\n    /* *\n    *\n    * Functions\n    *\n    * */\n    /**\n     * Sets the length of the column array.\n     *\n     * @param {DataTable.Column} column\n     * Column to be modified.\n     *\n     * @param {number} length\n     * New length of the column.\n     *\n     * @param {boolean} asSubarray\n     * If column is a typed array, return a subarray instead of a new array. It\n     * is faster `O(1)`, but the entire buffer will be kept in memory until all\n     * views to it are destroyed. Default is `false`.\n     *\n     * @return {DataTable.Column}\n     * Modified column.\n     *\n     * @private\n     */\n    function setLength(column, length, asSubarray) {\n        if (Array.isArray(column)) {\n            column.length = length;\n            return column;\n        }\n        return column[asSubarray ? 'subarray' : 'slice'](0, length);\n    }\n    ColumnUtils.setLength = setLength;\n    /**\n     * Splices a column array.\n     *\n     * @param {DataTable.Column} column\n     * Column to be modified.\n     *\n     * @param {number} start\n     * Index at which to start changing the array.\n     *\n     * @param {number} deleteCount\n     * An integer indicating the number of old array elements to remove.\n     *\n     * @param {boolean} removedAsSubarray\n     * If column is a typed array, return a subarray instead of a new array. It\n     * is faster `O(1)`, but the entire buffer will be kept in memory until all\n     * views to it are destroyed. Default is `true`.\n     *\n     * @param {Array<number>|TypedArray} items\n     * The elements to add to the array, beginning at the start index. If you\n     * don't specify any elements, `splice()` will only remove elements from the\n     * array.\n     *\n     * @return {SpliceResult}\n     * Object containing removed elements and the modified column.\n     *\n     * @private\n     */\n    function splice(column, start, deleteCount, removedAsSubarray, items = []) {\n        if (Array.isArray(column)) {\n            if (!Array.isArray(items)) {\n                items = Array.from(items);\n            }\n            return {\n                removed: column.splice(start, deleteCount, ...items),\n                array: column\n            };\n        }\n        const Constructor = Object.getPrototypeOf(column)\n            .constructor;\n        const removed = column[removedAsSubarray ? 'subarray' : 'slice'](start, start + deleteCount);\n        const newLength = column.length - deleteCount + items.length;\n        const result = new Constructor(newLength);\n        result.set(column.subarray(0, start), 0);\n        result.set(items, start);\n        result.set(column.subarray(start + deleteCount), start + items.length);\n        return {\n            removed: removed,\n            array: result\n        };\n    }\n    ColumnUtils.splice = splice;\n})(ColumnUtils || (ColumnUtils = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Data_ColumnUtils = (ColumnUtils);\n\n;// ./code/grid/es-modules/Data/DataTableCore.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - Gøran Slettemark\n *  - Torstein Hønsi\n *\n * */\n\n\nconst { setLength, splice } = Data_ColumnUtils;\n\nconst { fireEvent: DataTableCore_fireEvent, objectEach: DataTableCore_objectEach, uniqueKey: DataTableCore_uniqueKey } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class to manage columns and rows in a table structure. It provides methods\n * to add, remove, and manipulate columns and rows, as well as to retrieve data\n * from specific cells.\n *\n * @class\n * @name Highcharts.DataTable\n *\n * @param {Highcharts.DataTableOptions} [options]\n * Options to initialize the new DataTable instance.\n */\nclass DataTableCore {\n    /**\n     * Constructs an instance of the DataTable class.\n     *\n     * @example\n     * const dataTable = new Highcharts.DataTableCore({\n     *   columns: {\n     *     year: [2020, 2021, 2022, 2023],\n     *     cost: [11, 13, 12, 14],\n     *     revenue: [12, 15, 14, 18]\n     *   }\n     * });\n\n     *\n     * @param {Highcharts.DataTableOptions} [options]\n     * Options to initialize the new DataTable instance.\n     */\n    constructor(options = {}) {\n        /**\n         * Whether the ID was automatic generated or given in the constructor.\n         *\n         * @name Highcharts.DataTable#autoId\n         * @type {boolean}\n         */\n        this.autoId = !options.id;\n        this.columns = {};\n        /**\n         * ID of the table for identification purposes.\n         *\n         * @name Highcharts.DataTable#id\n         * @type {string}\n         */\n        this.id = (options.id || DataTableCore_uniqueKey());\n        this.modified = this;\n        this.rowCount = 0;\n        this.versionTag = DataTableCore_uniqueKey();\n        let rowCount = 0;\n        DataTableCore_objectEach(options.columns || {}, (column, columnName) => {\n            this.columns[columnName] = column.slice();\n            rowCount = Math.max(rowCount, column.length);\n        });\n        this.applyRowCount(rowCount);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Applies a row count to the table by setting the `rowCount` property and\n     * adjusting the length of all columns.\n     *\n     * @private\n     * @param {number} rowCount The new row count.\n     */\n    applyRowCount(rowCount) {\n        this.rowCount = rowCount;\n        DataTableCore_objectEach(this.columns, (column, columnName) => {\n            if (column.length !== rowCount) {\n                this.columns[columnName] = setLength(column, rowCount);\n            }\n        });\n    }\n    /**\n     * Delete rows. Simplified version of the full\n     * `DataTable.deleteRows` method.\n     *\n     * @param {number} rowIndex\n     * The start row index\n     *\n     * @param {number} [rowCount=1]\n     * The number of rows to delete\n     *\n     * @return {void}\n     *\n     * @emits #afterDeleteRows\n     */\n    deleteRows(rowIndex, rowCount = 1) {\n        if (rowCount > 0 && rowIndex < this.rowCount) {\n            let length = 0;\n            DataTableCore_objectEach(this.columns, (column, columnName) => {\n                this.columns[columnName] =\n                    splice(column, rowIndex, rowCount).array;\n                length = column.length;\n            });\n            this.rowCount = length;\n        }\n        DataTableCore_fireEvent(this, 'afterDeleteRows', { rowIndex, rowCount });\n        this.versionTag = DataTableCore_uniqueKey();\n    }\n    /**\n     * Fetches the given column by the canonical column name. Simplified version\n     * of the full `DataTable.getRow` method, always returning by reference.\n     *\n     * @param {string} columnName\n     * Name of the column to get.\n     *\n     * @return {Highcharts.DataTableColumn|undefined}\n     * A copy of the column, or `undefined` if not found.\n     */\n    getColumn(columnName, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    asReference) {\n        return this.columns[columnName];\n    }\n    /**\n     * Retrieves all or the given columns. Simplified version of the full\n     * `DataTable.getColumns` method, always returning by reference.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names to retrieve.\n     *\n     * @return {Highcharts.DataTableColumnCollection}\n     * Collection of columns. If a requested column was not found, it is\n     * `undefined`.\n     */\n    getColumns(columnNames, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    asReference) {\n        return (columnNames || Object.keys(this.columns)).reduce((columns, columnName) => {\n            columns[columnName] = this.columns[columnName];\n            return columns;\n        }, {});\n    }\n    /**\n     * Retrieves the row at a given index.\n     *\n     * @param {number} rowIndex\n     * Row index to retrieve. First row has index 0.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names to retrieve.\n     *\n     * @return {Record<string, number|string|undefined>|undefined}\n     * Returns the row values, or `undefined` if not found.\n     */\n    getRow(rowIndex, columnNames) {\n        return (columnNames || Object.keys(this.columns)).map((key) => this.columns[key]?.[rowIndex]);\n    }\n    /**\n     * Sets cell values for a column. Will insert a new column, if not found.\n     *\n     * @param {string} columnName\n     * Column name to set.\n     *\n     * @param {Highcharts.DataTableColumn} [column]\n     * Values to set in the column.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to change. (Default: 0)\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setColumns\n     * @emits #afterSetColumns\n     */\n    setColumn(columnName, column = [], rowIndex = 0, eventDetail) {\n        this.setColumns({ [columnName]: column }, rowIndex, eventDetail);\n    }\n    /**\n     * Sets cell values for multiple columns. Will insert new columns, if not\n     * found. Simplified version of the full `DataTableCore.setColumns`, limited\n     * to full replacement of the columns (undefined `rowIndex`).\n     *\n     * @param {Highcharts.DataTableColumnCollection} columns\n     * Columns as a collection, where the keys are the column names.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to change. Ignored in the `DataTableCore`, as it\n     * always replaces the full column.\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setColumns\n     * @emits #afterSetColumns\n     */\n    setColumns(columns, rowIndex, eventDetail) {\n        let rowCount = this.rowCount;\n        DataTableCore_objectEach(columns, (column, columnName) => {\n            this.columns[columnName] = column.slice();\n            rowCount = column.length;\n        });\n        this.applyRowCount(rowCount);\n        if (!eventDetail?.silent) {\n            DataTableCore_fireEvent(this, 'afterSetColumns');\n            this.versionTag = DataTableCore_uniqueKey();\n        }\n    }\n    /**\n     * Sets cell values of a row. Will insert a new row if no index was\n     * provided, or if the index is higher than the total number of table rows.\n     * A simplified version of the full `DateTable.setRow`, limited to objects.\n     *\n     * @param {Record<string, number|string|undefined>} row\n     * Cell values to set.\n     *\n     * @param {number} [rowIndex]\n     * Index of the row to set. Leave `undefined` to add as a new row.\n     *\n     * @param {boolean} [insert]\n     * Whether to insert the row at the given index, or to overwrite the row.\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #afterSetRows\n     */\n    setRow(row, rowIndex = this.rowCount, insert, eventDetail) {\n        const { columns } = this, indexRowCount = insert ? this.rowCount + 1 : rowIndex + 1;\n        DataTableCore_objectEach(row, (cellValue, columnName) => {\n            let column = columns[columnName] ||\n                eventDetail?.addColumns !== false && new Array(indexRowCount);\n            if (column) {\n                if (insert) {\n                    column = splice(column, rowIndex, 0, true, [cellValue]).array;\n                }\n                else {\n                    column[rowIndex] = cellValue;\n                }\n                columns[columnName] = column;\n            }\n        });\n        if (indexRowCount > this.rowCount) {\n            this.applyRowCount(indexRowCount);\n        }\n        if (!eventDetail?.silent) {\n            DataTableCore_fireEvent(this, 'afterSetRows');\n            this.versionTag = DataTableCore_uniqueKey();\n        }\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Data_DataTableCore = (DataTableCore);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * A typed array.\n * @typedef {Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} Highcharts.TypedArray\n * //**\n * A column of values in a data table.\n * @typedef {Array<boolean|null|number|string|undefined>|Highcharts.TypedArray} Highcharts.DataTableColumn\n */ /**\n* A collection of data table columns defined by a object where the key is the\n* column name and the value is an array of the column values.\n* @typedef {Record<string, Highcharts.DataTableColumn>} Highcharts.DataTableColumnCollection\n*/\n/**\n * Options for the `DataTable` or `DataTableCore` classes.\n * @interface Highcharts.DataTableOptions\n */ /**\n* The column options for the data table. The columns are defined by an object\n* where the key is the column ID and the value is an array of the column\n* values.\n*\n* @name Highcharts.DataTableOptions.columns\n* @type {Highcharts.DataTableColumnCollection|undefined}\n*/ /**\n* Custom ID to identify the new DataTable instance.\n*\n* @name Highcharts.DataTableOptions.id\n* @type {string|undefined}\n*/\n(''); // Keeps doclets above in JS file\n\n;// ./code/grid/es-modules/Data/DataTable.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - Gøran Slettemark\n *  - Jomar Hønsi\n *  - Dawid Dragula\n *\n * */\n\n\n\n\nconst { addEvent: DataTable_addEvent, defined: DataTable_defined, extend: DataTable_extend, fireEvent: DataTable_fireEvent, isNumber: DataTable_isNumber, uniqueKey: DataTable_uniqueKey } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class to manage columns and rows in a table structure. It provides methods\n * to add, remove, and manipulate columns and rows, as well as to retrieve data\n * from specific cells.\n *\n * @class\n * @name Highcharts.DataTable\n *\n * @param {Highcharts.DataTableOptions} [options]\n * Options to initialize the new DataTable instance.\n */\nclass DataTable extends Data_DataTableCore {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * Tests whether a row contains only `null` values or is equal to\n     * DataTable.NULL. If all columns have `null` values, the function returns\n     * `true`. Otherwise, it returns `false` to indicate that the row contains\n     * at least one non-null value.\n     *\n     * @function Highcharts.DataTable.isNull\n     *\n     * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n     * Row to test.\n     *\n     * @return {boolean}\n     * Returns `true`, if the row contains only null, otherwise `false`.\n     *\n     * @example\n     * if (DataTable.isNull(row)) {\n     *   // handle null row\n     * }\n     */\n    static isNull(row) {\n        if (row === DataTable.NULL) {\n            return true;\n        }\n        if (row instanceof Array) {\n            if (!row.length) {\n                return false;\n            }\n            for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                if (row[i] !== null) {\n                    return false;\n                }\n            }\n        }\n        else {\n            const columnNames = Object.keys(row);\n            if (!columnNames.length) {\n                return false;\n            }\n            for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                if (row[columnNames[i]] !== null) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(options = {}) {\n        super(options);\n        this.modified = this;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Returns a clone of this table. The cloned table is completely independent\n     * of the original, and any changes made to the clone will not affect\n     * the original table.\n     *\n     * @function Highcharts.DataTable#clone\n     *\n     * @param {boolean} [skipColumns]\n     * Whether to clone columns or not.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Clone of this data table.\n     *\n     * @emits #cloneTable\n     * @emits #afterCloneTable\n     */\n    clone(skipColumns, eventDetail) {\n        const table = this, tableOptions = {};\n        table.emit({ type: 'cloneTable', detail: eventDetail });\n        if (!skipColumns) {\n            tableOptions.columns = table.columns;\n        }\n        if (!table.autoId) {\n            tableOptions.id = table.id;\n        }\n        const tableClone = new DataTable(tableOptions);\n        if (!skipColumns) {\n            tableClone.versionTag = table.versionTag;\n            tableClone.originalRowIndexes = table.originalRowIndexes;\n            tableClone.localRowIndexes = table.localRowIndexes;\n        }\n        table.emit({\n            type: 'afterCloneTable',\n            detail: eventDetail,\n            tableClone\n        });\n        return tableClone;\n    }\n    /**\n     * Deletes columns from the table.\n     *\n     * @function Highcharts.DataTable#deleteColumns\n     *\n     * @param {Array<string>} [columnNames]\n     * Names of columns to delete. If no array is provided, all\n     * columns will be deleted.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTableColumnCollection|undefined}\n     * Returns the deleted columns, if found.\n     *\n     * @emits #deleteColumns\n     * @emits #afterDeleteColumns\n     */\n    deleteColumns(columnNames, eventDetail) {\n        const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n        columnNames = (columnNames || Object.keys(columns));\n        if (columnNames.length) {\n            table.emit({\n                type: 'deleteColumns',\n                columnNames,\n                detail: eventDetail\n            });\n            for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                columnName = columnNames[i];\n                column = columns[columnName];\n                if (column) {\n                    deletedColumns[columnName] = column;\n                    modifiedColumns[columnName] = new Array(rowCount);\n                }\n                delete columns[columnName];\n            }\n            if (!Object.keys(columns).length) {\n                table.rowCount = 0;\n                this.deleteRowIndexReferences();\n            }\n            if (modifier) {\n                modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n            }\n            table.emit({\n                type: 'afterDeleteColumns',\n                columns: deletedColumns,\n                columnNames,\n                detail: eventDetail\n            });\n            return deletedColumns;\n        }\n    }\n    /**\n     * Deletes the row index references. This is useful when the original table\n     * is deleted, and the references are no longer needed. This table is\n     * then considered an original table or a table that has the same row's\n     * order as the original table.\n     */\n    deleteRowIndexReferences() {\n        delete this.originalRowIndexes;\n        delete this.localRowIndexes;\n        // Here, in case of future need, can be implemented updating of the\n        // modified tables' row indexes references.\n    }\n    /**\n     * Deletes rows in this table.\n     *\n     * @function Highcharts.DataTable#deleteRows\n     *\n     * @param {number} [rowIndex]\n     * Index to start delete of rows. If not specified, all rows will be\n     * deleted.\n     *\n     * @param {number} [rowCount=1]\n     * Number of rows to delete.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Array<Highcharts.DataTableRow>}\n     * Returns the deleted rows, if found.\n     *\n     * @emits #deleteRows\n     * @emits #afterDeleteRows\n     */\n    deleteRows(rowIndex, rowCount = 1, eventDetail) {\n        const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n        table.emit({\n            type: 'deleteRows',\n            detail: eventDetail,\n            rowCount,\n            rowIndex: (rowIndex || 0)\n        });\n        if (typeof rowIndex === 'undefined') {\n            rowIndex = 0;\n            rowCount = table.rowCount;\n        }\n        if (rowCount > 0 && rowIndex < table.rowCount) {\n            const columns = table.columns, columnNames = Object.keys(columns);\n            for (let i = 0, iEnd = columnNames.length, column, deletedCells, columnName; i < iEnd; ++i) {\n                columnName = columnNames[i];\n                column = columns[columnName];\n                const result = Data_ColumnUtils.splice(column, rowIndex, rowCount);\n                deletedCells = result.removed;\n                columns[columnName] = column = result.array;\n                if (!i) {\n                    table.rowCount = column.length;\n                }\n                for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                    deletedRows[j] = (deletedRows[j] || []);\n                    deletedRows[j][i] = deletedCells[j];\n                }\n                modifiedRows.push(new Array(iEnd));\n            }\n        }\n        if (modifier) {\n            modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n        }\n        table.emit({\n            type: 'afterDeleteRows',\n            detail: eventDetail,\n            rowCount,\n            rowIndex: (rowIndex || 0),\n            rows: deletedRows\n        });\n        return deletedRows;\n    }\n    /**\n     * Emits an event on this table to all registered callbacks of the given\n     * event.\n     * @private\n     *\n     * @param {DataTable.Event} e\n     * Event object with event information.\n     */\n    emit(e) {\n        if ([\n            'afterDeleteColumns',\n            'afterDeleteRows',\n            'afterSetCell',\n            'afterSetColumns',\n            'afterSetRows'\n        ].includes(e.type)) {\n            this.versionTag = DataTable_uniqueKey();\n        }\n        DataTable_fireEvent(this, e.type, e);\n    }\n    /**\n     * Fetches a single cell value.\n     *\n     * @function Highcharts.DataTable#getCell\n     *\n     * @param {string} columnName\n     * Column name of the cell to retrieve.\n     *\n     * @param {number} rowIndex\n     * Row index of the cell to retrieve.\n     *\n     * @return {Highcharts.DataTableCellType|undefined}\n     * Returns the cell value or `undefined`.\n     */\n    getCell(columnName, rowIndex) {\n        const table = this;\n        const column = table.columns[columnName];\n        if (column) {\n            return column[rowIndex];\n        }\n    }\n    /**\n     * Fetches a cell value for the given row as a boolean.\n     *\n     * @function Highcharts.DataTable#getCellAsBoolean\n     *\n     * @param {string} columnName\n     * Column name to fetch.\n     *\n     * @param {number} rowIndex\n     * Row index to fetch.\n     *\n     * @return {boolean}\n     * Returns the cell value of the row as a boolean.\n     */\n    getCellAsBoolean(columnName, rowIndex) {\n        const table = this;\n        const column = table.columns[columnName];\n        return !!(column && column[rowIndex]);\n    }\n    /**\n     * Fetches a cell value for the given row as a number.\n     *\n     * @function Highcharts.DataTable#getCellAsNumber\n     *\n     * @param {string} columnName\n     * Column name or to fetch.\n     *\n     * @param {number} rowIndex\n     * Row index to fetch.\n     *\n     * @param {boolean} [useNaN]\n     * Whether to return NaN instead of `null` and `undefined`.\n     *\n     * @return {number|null}\n     * Returns the cell value of the row as a number.\n     */\n    getCellAsNumber(columnName, rowIndex, useNaN) {\n        const table = this;\n        const column = table.columns[columnName];\n        let cellValue = (column && column[rowIndex]);\n        switch (typeof cellValue) {\n            case 'boolean':\n                return (cellValue ? 1 : 0);\n            case 'number':\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n        }\n        cellValue = parseFloat(`${cellValue ?? ''}`);\n        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n    }\n    /**\n     * Fetches a cell value for the given row as a string.\n     *\n     * @function Highcharts.DataTable#getCellAsString\n     *\n     * @param {string} columnName\n     * Column name to fetch.\n     *\n     * @param {number} rowIndex\n     * Row index to fetch.\n     *\n     * @return {string}\n     * Returns the cell value of the row as a string.\n     */\n    getCellAsString(columnName, rowIndex) {\n        const table = this;\n        const column = table.columns[columnName];\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        return `${(column && column[rowIndex])}`;\n    }\n    /**\n     * Fetches the given column by the canonical column name.\n     * This function is a simplified wrap of {@link getColumns}.\n     *\n     * @function Highcharts.DataTable#getColumn\n     *\n     * @param {string} columnName\n     * Name of the column to get.\n     *\n     * @param {boolean} [asReference]\n     * Whether to return the column as a readonly reference.\n     *\n     * @return {Highcharts.DataTableColumn|undefined}\n     * A copy of the column, or `undefined` if not found.\n     */\n    getColumn(columnName, asReference) {\n        return this.getColumns([columnName], asReference)[columnName];\n    }\n    /**\n     * Fetches the given column by the canonical column name, and\n     * validates the type of the first few cells. If the first defined cell is\n     * of type number, it assumes for performance reasons, that all cells are of\n     * type number or `null`. Otherwise it will convert all cells to number\n     * type, except `null`.\n     *\n     * @deprecated\n     *\n     * @function Highcharts.DataTable#getColumnAsNumbers\n     *\n     * @param {string} columnName\n     * Name of the column to get.\n     *\n     * @param {boolean} [useNaN]\n     * Whether to use NaN instead of `null` and `undefined`.\n     *\n     * @return {Array<(number|null)>}\n     * A copy of the column, or an empty array if not found.\n     */\n    getColumnAsNumbers(columnName, useNaN) {\n        const table = this, columns = table.columns;\n        const column = columns[columnName], columnAsNumber = [];\n        if (column) {\n            const columnLength = column.length;\n            if (useNaN) {\n                for (let i = 0; i < columnLength; ++i) {\n                    columnAsNumber.push(table.getCellAsNumber(columnName, i, true));\n                }\n            }\n            else {\n                for (let i = 0, cellValue; i < columnLength; ++i) {\n                    cellValue = column[i];\n                    if (typeof cellValue === 'number') {\n                        // Assume unmixed data for performance reasons\n                        return column.slice();\n                    }\n                    if (cellValue !== null &&\n                        typeof cellValue !== 'undefined') {\n                        break;\n                    }\n                }\n                for (let i = 0; i < columnLength; ++i) {\n                    columnAsNumber.push(table.getCellAsNumber(columnName, i));\n                }\n            }\n        }\n        return columnAsNumber;\n    }\n    /**\n     * Fetches all column names.\n     *\n     * @function Highcharts.DataTable#getColumnNames\n     *\n     * @return {Array<string>}\n     * Returns all column names.\n     */\n    getColumnNames() {\n        const table = this, columnNames = Object.keys(table.columns);\n        return columnNames;\n    }\n    /**\n     * Retrieves all or the given columns.\n     *\n     * @function Highcharts.DataTable#getColumns\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names to retrieve.\n     *\n     * @param {boolean} [asReference]\n     * Whether to return columns as a readonly reference.\n     *\n     * @param {boolean} [asBasicColumns]\n     * Whether to transform all typed array columns to normal arrays.\n     *\n     * @return {Highcharts.DataTableColumnCollection}\n     * Collection of columns. If a requested column was not found, it is\n     * `undefined`.\n     */\n    getColumns(columnNames, asReference, asBasicColumns) {\n        const table = this, tableColumns = table.columns, columns = {};\n        columnNames = (columnNames || Object.keys(tableColumns));\n        for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n            columnName = columnNames[i];\n            column = tableColumns[columnName];\n            if (column) {\n                if (asReference) {\n                    columns[columnName] = column;\n                }\n                else if (asBasicColumns && !Array.isArray(column)) {\n                    columns[columnName] = Array.from(column);\n                }\n                else {\n                    columns[columnName] = column.slice();\n                }\n            }\n        }\n        return columns;\n    }\n    /**\n     * Takes the original row index and returns the local row index in the\n     * modified table for which this function is called.\n     *\n     * @param {number} originalRowIndex\n     * Original row index to get the local row index for.\n     *\n     * @return {number|undefined}\n     * Returns the local row index or `undefined` if not found.\n     */\n    getLocalRowIndex(originalRowIndex) {\n        const { localRowIndexes } = this;\n        if (localRowIndexes) {\n            return localRowIndexes[originalRowIndex];\n        }\n        return originalRowIndex;\n    }\n    /**\n     * Retrieves the modifier for the table.\n     * @private\n     *\n     * @return {Highcharts.DataModifier|undefined}\n     * Returns the modifier or `undefined`.\n     */\n    getModifier() {\n        return this.modifier;\n    }\n    /**\n     * Takes the local row index and returns the index of the corresponding row\n     * in the original table.\n     *\n     * @param {number} rowIndex\n     * Local row index to get the original row index for.\n     *\n     * @return {number|undefined}\n     * Returns the original row index or `undefined` if not found.\n     */\n    getOriginalRowIndex(rowIndex) {\n        const { originalRowIndexes } = this;\n        if (originalRowIndexes) {\n            return originalRowIndexes[rowIndex];\n        }\n        return rowIndex;\n    }\n    /**\n     * Retrieves the row at a given index. This function is a simplified wrap of\n     * {@link getRows}.\n     *\n     * @function Highcharts.DataTable#getRow\n     *\n     * @param {number} rowIndex\n     * Row index to retrieve. First row has index 0.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names in order to retrieve.\n     *\n     * @return {Highcharts.DataTableRow}\n     * Returns the row values, or `undefined` if not found.\n     */\n    getRow(rowIndex, columnNames) {\n        return this.getRows(rowIndex, 1, columnNames)[0];\n    }\n    /**\n     * Returns the number of rows in this table.\n     *\n     * @function Highcharts.DataTable#getRowCount\n     *\n     * @return {number}\n     * Number of rows in this table.\n     */\n    getRowCount() {\n        // @todo Implement via property getter `.length` browsers supported\n        return this.rowCount;\n    }\n    /**\n     * Retrieves the index of the first row matching a specific cell value.\n     *\n     * @function Highcharts.DataTable#getRowIndexBy\n     *\n     * @param {string} columnName\n     * Column to search in.\n     *\n     * @param {Highcharts.DataTableCellType} cellValue\n     * Cell value to search for. `NaN` and `undefined` are not supported.\n     *\n     * @param {number} [rowIndexOffset]\n     * Index offset to start searching.\n     *\n     * @return {number|undefined}\n     * Index of the first row matching the cell value.\n     */\n    getRowIndexBy(columnName, cellValue, rowIndexOffset) {\n        const table = this;\n        const column = table.columns[columnName];\n        if (column) {\n            let rowIndex = -1;\n            if (Array.isArray(column)) {\n                // Normal array\n                rowIndex = column.indexOf(cellValue, rowIndexOffset);\n            }\n            else if (DataTable_isNumber(cellValue)) {\n                // Typed array\n                rowIndex = column.indexOf(cellValue, rowIndexOffset);\n            }\n            if (rowIndex !== -1) {\n                return rowIndex;\n            }\n        }\n    }\n    /**\n     * Retrieves the row at a given index. This function is a simplified wrap of\n     * {@link getRowObjects}.\n     *\n     * @function Highcharts.DataTable#getRowObject\n     *\n     * @param {number} rowIndex\n     * Row index.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names and their order to retrieve.\n     *\n     * @return {Highcharts.DataTableRowObject}\n     * Returns the row values, or `undefined` if not found.\n     */\n    getRowObject(rowIndex, columnNames) {\n        return this.getRowObjects(rowIndex, 1, columnNames)[0];\n    }\n    /**\n     * Fetches all or a number of rows.\n     *\n     * @function Highcharts.DataTable#getRowObjects\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to fetch. Defaults to first row at index `0`.\n     *\n     * @param {number} [rowCount]\n     * Number of rows to fetch. Defaults to maximal number of rows.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names and their order to retrieve.\n     *\n     * @return {Highcharts.DataTableRowObject}\n     * Returns retrieved rows.\n     */\n    getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n        const table = this, columns = table.columns, rows = new Array(rowCount);\n        columnNames = (columnNames || Object.keys(columns));\n        for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n            row = rows[i2] = {};\n            for (const columnName of columnNames) {\n                column = columns[columnName];\n                row[columnName] = (column ? column[i] : void 0);\n            }\n        }\n        return rows;\n    }\n    /**\n     * Fetches all or a number of rows.\n     *\n     * @function Highcharts.DataTable#getRows\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to fetch. Defaults to first row at index `0`.\n     *\n     * @param {number} [rowCount]\n     * Number of rows to fetch. Defaults to maximal number of rows.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names and their order to retrieve.\n     *\n     * @return {Highcharts.DataTableRow}\n     * Returns retrieved rows.\n     */\n    getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n        const table = this, columns = table.columns, rows = new Array(rowCount);\n        columnNames = (columnNames || Object.keys(columns));\n        for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n            row = rows[i2] = [];\n            for (const columnName of columnNames) {\n                column = columns[columnName];\n                row.push(column ? column[i] : void 0);\n            }\n        }\n        return rows;\n    }\n    /**\n     * Returns the unique version tag of the current state of the table.\n     *\n     * @function Highcharts.DataTable#getVersionTag\n     *\n     * @return {string}\n     * Unique version tag.\n     */\n    getVersionTag() {\n        return this.versionTag;\n    }\n    /**\n     * Checks for given column names.\n     *\n     * @function Highcharts.DataTable#hasColumns\n     *\n     * @param {Array<string>} columnNames\n     * Column names to check.\n     *\n     * @return {boolean}\n     * Returns `true` if all columns have been found, otherwise `false`.\n     */\n    hasColumns(columnNames) {\n        const table = this, columns = table.columns;\n        for (let i = 0, iEnd = columnNames.length, columnName; i < iEnd; ++i) {\n            columnName = columnNames[i];\n            if (!columns[columnName]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Searches for a specific cell value.\n     *\n     * @function Highcharts.DataTable#hasRowWith\n     *\n     * @param {string} columnName\n     * Column to search in.\n     *\n     * @param {Highcharts.DataTableCellType} cellValue\n     * Cell value to search for. `NaN` and `undefined` are not supported.\n     *\n     * @return {boolean}\n     * True, if a row has been found, otherwise false.\n     */\n    hasRowWith(columnName, cellValue) {\n        const table = this;\n        const column = table.columns[columnName];\n        // Normal array\n        if (Array.isArray(column)) {\n            return (column.indexOf(cellValue) !== -1);\n        }\n        // Typed array\n        if (DataTable_defined(cellValue) && Number.isFinite(cellValue)) {\n            return (column.indexOf(+cellValue) !== -1);\n        }\n        return false;\n    }\n    /**\n     * Registers a callback for a specific event.\n     *\n     * @function Highcharts.DataTable#on\n     *\n     * @param {string} type\n     * Event type as a string.\n     *\n     * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n     * Function to register for an event callback.\n     *\n     * @return {Function}\n     * Function to unregister callback from the event.\n     */\n    on(type, callback) {\n        return DataTable_addEvent(this, type, callback);\n    }\n    /**\n     * Renames a column of cell values.\n     *\n     * @function Highcharts.DataTable#renameColumn\n     *\n     * @param {string} columnName\n     * Name of the column to be renamed.\n     *\n     * @param {string} newColumnName\n     * New name of the column. An existing column with the same name will be\n     * replaced.\n     *\n     * @return {boolean}\n     * Returns `true` if successful, `false` if the column was not found.\n     */\n    renameColumn(columnName, newColumnName) {\n        const table = this, columns = table.columns;\n        if (columns[columnName]) {\n            if (columnName !== newColumnName) {\n                columns[newColumnName] = columns[columnName];\n                delete columns[columnName];\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Sets a cell value based on the row index and column.  Will\n     * insert a new column, if not found.\n     *\n     * @function Highcharts.DataTable#setCell\n     *\n     * @param {string} columnName\n     * Column name to set.\n     *\n     * @param {number|undefined} rowIndex\n     * Row index to set.\n     *\n     * @param {Highcharts.DataTableCellType} cellValue\n     * Cell value to set.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setCell\n     * @emits #afterSetCell\n     */\n    setCell(columnName, rowIndex, cellValue, eventDetail) {\n        const table = this, columns = table.columns, modifier = table.modifier;\n        let column = columns[columnName];\n        if (column && column[rowIndex] === cellValue) {\n            return;\n        }\n        table.emit({\n            type: 'setCell',\n            cellValue,\n            columnName: columnName,\n            detail: eventDetail,\n            rowIndex\n        });\n        if (!column) {\n            column = columns[columnName] = new Array(table.rowCount);\n        }\n        if (rowIndex >= table.rowCount) {\n            table.rowCount = (rowIndex + 1);\n        }\n        column[rowIndex] = cellValue;\n        if (modifier) {\n            modifier.modifyCell(table, columnName, rowIndex, cellValue);\n        }\n        table.emit({\n            type: 'afterSetCell',\n            cellValue,\n            columnName: columnName,\n            detail: eventDetail,\n            rowIndex\n        });\n    }\n    /**\n     * Sets cell values for multiple columns. Will insert new columns, if not\n     * found.\n     *\n     * @function Highcharts.DataTable#setColumns\n     *\n     * @param {Highcharts.DataTableColumnCollection} columns\n     * Columns as a collection, where the keys are the column names.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to change. Keep undefined to reset.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @param {boolean} [typeAsOriginal=false]\n     * Determines whether the original column retains its type when data\n     * replaced. If `true`, the original column keeps its type. If not\n     * (default), the original column will adopt the type of the replacement\n     * column.\n     *\n     * @emits #setColumns\n     * @emits #afterSetColumns\n     */\n    setColumns(columns, rowIndex, eventDetail, typeAsOriginal) {\n        const table = this, tableColumns = table.columns, tableModifier = table.modifier, columnNames = Object.keys(columns);\n        let rowCount = table.rowCount;\n        table.emit({\n            type: 'setColumns',\n            columns,\n            columnNames,\n            detail: eventDetail,\n            rowIndex\n        });\n        if (!DataTable_defined(rowIndex) && !typeAsOriginal) {\n            super.setColumns(columns, rowIndex, DataTable_extend(eventDetail, { silent: true }));\n        }\n        else {\n            for (let i = 0, iEnd = columnNames.length, column, tableColumn, columnName, ArrayConstructor; i < iEnd; ++i) {\n                columnName = columnNames[i];\n                column = columns[columnName];\n                tableColumn = tableColumns[columnName];\n                ArrayConstructor = Object.getPrototypeOf((tableColumn && typeAsOriginal) ? tableColumn : column).constructor;\n                if (!tableColumn) {\n                    tableColumn = new ArrayConstructor(rowCount);\n                }\n                else if (ArrayConstructor === Array) {\n                    if (!Array.isArray(tableColumn)) {\n                        tableColumn = Array.from(tableColumn);\n                    }\n                }\n                else if (tableColumn.length < rowCount) {\n                    tableColumn =\n                        new ArrayConstructor(rowCount);\n                    tableColumn.set(tableColumns[columnName]);\n                }\n                tableColumns[columnName] = tableColumn;\n                for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                    tableColumn[i] = column[i];\n                }\n                rowCount = Math.max(rowCount, column.length);\n            }\n            this.applyRowCount(rowCount);\n        }\n        if (tableModifier) {\n            tableModifier.modifyColumns(table, columns, rowIndex || 0);\n        }\n        table.emit({\n            type: 'afterSetColumns',\n            columns,\n            columnNames,\n            detail: eventDetail,\n            rowIndex\n        });\n    }\n    /**\n     * Sets or unsets the modifier for the table.\n     *\n     * @param {Highcharts.DataModifier} [modifier]\n     * Modifier to set, or `undefined` to unset.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Promise<Highcharts.DataTable>}\n     * Resolves to this table if successful, or rejects on failure.\n     *\n     * @emits #setModifier\n     * @emits #afterSetModifier\n     */\n    setModifier(modifier, eventDetail) {\n        const table = this;\n        let promise;\n        table.emit({\n            type: 'setModifier',\n            detail: eventDetail,\n            modifier,\n            modified: table.modified\n        });\n        table.modified = table;\n        table.modifier = modifier;\n        if (modifier) {\n            promise = modifier.modify(table);\n        }\n        else {\n            promise = Promise.resolve(table);\n        }\n        return promise\n            .then((table) => {\n            table.emit({\n                type: 'afterSetModifier',\n                detail: eventDetail,\n                modifier,\n                modified: table.modified\n            });\n            return table;\n        })['catch']((error) => {\n            table.emit({\n                type: 'setModifierError',\n                error,\n                modifier,\n                modified: table.modified\n            });\n            throw error;\n        });\n    }\n    /**\n     * Sets the original row indexes for the table. It is used to keep the\n     * reference to the original rows when modifying the table.\n     *\n     * @param {Array<number|undefined>} originalRowIndexes\n     * Original row indexes array.\n     *\n     * @param {boolean} omitLocalRowIndexes\n     * Whether to omit the local row indexes calculation. Defaults to `false`.\n     */\n    setOriginalRowIndexes(originalRowIndexes, omitLocalRowIndexes = false) {\n        this.originalRowIndexes = originalRowIndexes;\n        if (omitLocalRowIndexes) {\n            return;\n        }\n        const modifiedIndexes = this.localRowIndexes = [];\n        for (let i = 0, iEnd = originalRowIndexes.length, originalIndex; i < iEnd; ++i) {\n            originalIndex = originalRowIndexes[i];\n            if (DataTable_defined(originalIndex)) {\n                modifiedIndexes[originalIndex] = i;\n            }\n        }\n    }\n    /**\n     * Sets cell values of a row. Will insert a new row, if no index was\n     * provided, or if the index is higher than the total number of table rows.\n     *\n     * Note: This function is just a simplified wrap of\n     * {@link Highcharts.DataTable#setRows}.\n     *\n     * @function Highcharts.DataTable#setRow\n     *\n     * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n     * Cell values to set.\n     *\n     * @param {number} [rowIndex]\n     * Index of the row to set. Leave `undefind` to add as a new row.\n     *\n     * @param {boolean} [insert]\n     * Whether to insert the row at the given index, or to overwrite the row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setRows\n     * @emits #afterSetRows\n     */\n    setRow(row, rowIndex, insert, eventDetail) {\n        this.setRows([row], rowIndex, insert, eventDetail);\n    }\n    /**\n     * Sets cell values for multiple rows. Will insert new rows, if no index was\n     * was provided, or if the index is higher than the total number of table\n     * rows.\n     *\n     * @function Highcharts.DataTable#setRows\n     *\n     * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n     * Row values to set.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to set. Leave `undefined` to add as new rows.\n     *\n     * @param {boolean} [insert]\n     * Whether to insert the row at the given index, or to overwrite the row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setRows\n     * @emits #afterSetRows\n     */\n    setRows(rows, rowIndex = this.rowCount, insert, eventDetail) {\n        const table = this, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n        table.emit({\n            type: 'setRows',\n            detail: eventDetail,\n            rowCount,\n            rowIndex,\n            rows\n        });\n        for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n            row = rows[i];\n            if (row === DataTable.NULL) {\n                for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                    const column = columns[columnNames[j]];\n                    if (insert) {\n                        columns[columnNames[j]] = Data_ColumnUtils.splice(column, i2, 0, true, [null]).array;\n                    }\n                    else {\n                        column[i2] = null;\n                    }\n                }\n            }\n            else if (row instanceof Array) {\n                for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                    columns[columnNames[j]][i2] = row[j];\n                }\n            }\n            else {\n                super.setRow(row, i2, void 0, { silent: true });\n            }\n        }\n        const indexRowCount = insert ?\n            rowCount + rows.length :\n            rowIndex + rowCount;\n        if (indexRowCount > table.rowCount) {\n            table.rowCount = indexRowCount;\n            for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                const columnName = columnNames[i];\n                columns[columnName] = Data_ColumnUtils.setLength(columns[columnName], indexRowCount);\n            }\n        }\n        if (modifier) {\n            modifier.modifyRows(table, rows, rowIndex);\n        }\n        table.emit({\n            type: 'afterSetRows',\n            detail: eventDetail,\n            rowCount,\n            rowIndex,\n            rows\n        });\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Null state for a row record. In some cases, a row in a table may not\n * contain any data or may be invalid. In these cases, a null state can be\n * used to indicate that the row record is empty or invalid.\n *\n * @name Highcharts.DataTable.NULL\n * @type {Highcharts.DataTableRowObject}\n *\n * @see {@link Highcharts.DataTable.isNull} for a null test.\n *\n * @example\n * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n */\nDataTable.NULL = {};\n/**\n * Semantic version string of the DataTable class.\n * @internal\n */\nDataTable.version = '1.0.0';\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Data_DataTable = (DataTable);\n\n;// ./code/grid/es-modules/Data/Connectors/DataConnector.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - Wojciech Chmiel\n *  - Gøran Slettemark\n *\n * */\n\n\n\n\nconst { addEvent: DataConnector_addEvent, fireEvent: DataConnector_fireEvent, merge: DataConnector_merge, pick: DataConnector_pick } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Abstract class providing an interface for managing a DataConnector.\n *\n * @private\n */\nclass DataConnector {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructor for the connector class.\n     *\n     * @param {DataConnector.UserOptions} [options]\n     * Options to use in the connector.\n     */\n    constructor(options = {}) {\n        this.table = new Data_DataTable(options.dataTable);\n        this.metadata = options.metadata || { columns: {} };\n    }\n    /**\n     * Poll timer ID, if active.\n     */\n    get polling() {\n        return !!this.polling;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Method for adding metadata for a single column.\n     *\n     * @param {string} name\n     * The name of the column to be described.\n     *\n     * @param {DataConnector.MetaColumn} columnMeta\n     * The metadata to apply to the column.\n     */\n    describeColumn(name, columnMeta) {\n        const connector = this, columns = connector.metadata.columns;\n        columns[name] = DataConnector_merge(columns[name] || {}, columnMeta);\n    }\n    /**\n     * Method for applying columns meta information to the whole DataConnector.\n     *\n     * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n     * Pairs of column names and MetaColumn objects.\n     */\n    describeColumns(columns) {\n        const connector = this, columnNames = Object.keys(columns);\n        let columnName;\n        while (typeof (columnName = columnNames.pop()) === 'string') {\n            connector.describeColumn(columnName, columns[columnName]);\n        }\n    }\n    /**\n     * Emits an event on the connector to all registered callbacks of this\n     * event.\n     *\n     * @param {DataConnector.Event} [e]\n     * Event object containing additional event information.\n     */\n    emit(e) {\n        DataConnector_fireEvent(this, e.type, e);\n    }\n    /**\n     * Returns the order of columns.\n     *\n     * @param {boolean} [usePresentationState]\n     * Whether to use the column order of the presentation state of the table.\n     *\n     * @return {Array<string>|undefined}\n     * Order of columns.\n     */\n    getColumnOrder(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    usePresentationState) {\n        const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n        if (names.length) {\n            return names.sort((a, b) => (DataConnector_pick(columns[a].index, 0) - DataConnector_pick(columns[b].index, 0)));\n        }\n    }\n    /**\n     * Retrieves the columns of the dataTable,\n     * applies column order from meta.\n     *\n     * @param {boolean} [usePresentationOrder]\n     * Whether to use the column order of the presentation state of the table.\n     *\n     * @return {Highcharts.DataTableColumnCollection}\n     * An object with the properties `columnNames` and `columnValues`\n     */\n    getSortedColumns(usePresentationOrder) {\n        return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n    }\n    /**\n     * The default load method, which fires the `afterLoad` event\n     *\n     * @return {Promise<DataConnector>}\n     * The loaded connector.\n     *\n     * @emits DataConnector#afterLoad\n     */\n    load() {\n        DataConnector_fireEvent(this, 'afterLoad', { table: this.table });\n        return Promise.resolve(this);\n    }\n    /**\n     * Registers a callback for a specific connector event.\n     *\n     * @param {string} type\n     * Event type as a string.\n     *\n     * @param {DataEventEmitter.Callback} callback\n     * Function to register for the connector callback.\n     *\n     * @return {Function}\n     * Function to unregister callback from the connector event.\n     */\n    on(type, callback) {\n        return DataConnector_addEvent(this, type, callback);\n    }\n    /**\n     * The default save method, which fires the `afterSave` event.\n     *\n     * @return {Promise<DataConnector>}\n     * The saved connector.\n     *\n     * @emits DataConnector#afterSave\n     * @emits DataConnector#saveError\n     */\n    save() {\n        DataConnector_fireEvent(this, 'saveError', { table: this.table });\n        return Promise.reject(new Error('Not implemented'));\n    }\n    /**\n     * Sets the index and order of columns.\n     *\n     * @param {Array<string>} columnNames\n     * Order of columns.\n     */\n    setColumnOrder(columnNames) {\n        const connector = this;\n        for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n            connector.describeColumn(columnNames[i], { index: i });\n        }\n    }\n    setModifierOptions(modifierOptions) {\n        const ModifierClass = (modifierOptions &&\n            Modifiers_DataModifier.types[modifierOptions.type]);\n        return this.table\n            .setModifier(ModifierClass ?\n            new ModifierClass(modifierOptions) :\n            void 0)\n            .then(() => this);\n    }\n    /**\n     * Starts polling new data after the specific time span in milliseconds.\n     *\n     * @param {number} refreshTime\n     * Refresh time in milliseconds between polls.\n     */\n    startPolling(refreshTime = 1000) {\n        const connector = this;\n        window.clearTimeout(connector._polling);\n        connector._polling = window.setTimeout(() => connector\n            .load()['catch']((error) => connector.emit({\n            type: 'loadError',\n            error,\n            table: connector.table\n        }))\n            .then(() => {\n            if (connector._polling) {\n                connector.startPolling(refreshTime);\n            }\n        }), refreshTime);\n    }\n    /**\n     * Stops polling data.\n     */\n    stopPolling() {\n        const connector = this;\n        window.clearTimeout(connector._polling);\n        delete connector._polling;\n    }\n    /**\n     * Retrieves metadata from a single column.\n     *\n     * @param {string} name\n     * The identifier for the column that should be described\n     *\n     * @return {DataConnector.MetaColumn|undefined}\n     * Returns a MetaColumn object if found.\n     */\n    whatIs(name) {\n        return this.metadata.columns[name];\n    }\n}\n/* *\n *\n *  Class Namespace\n *\n * */\n(function (DataConnector) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    /**\n     * Registry as a record object with connector names and their class.\n     */\n    DataConnector.types = {};\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Adds a connector class to the registry. The connector has to provide the\n     * `DataConnector.options` property and the `DataConnector.load` method to\n     * modify the table.\n     *\n     * @private\n     *\n     * @param {string} key\n     * Registry key of the connector class.\n     *\n     * @param {DataConnectorType} DataConnectorClass\n     * Connector class (aka class constructor) to register.\n     *\n     * @return {boolean}\n     * Returns true, if the registration was successful. False is returned, if\n     * their is already a connector registered with this key.\n     */\n    function registerType(key, DataConnectorClass) {\n        return (!!key &&\n            !DataConnector.types[key] &&\n            !!(DataConnector.types[key] = DataConnectorClass));\n    }\n    DataConnector.registerType = registerType;\n})(DataConnector || (DataConnector = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Connectors_DataConnector = (DataConnector);\n\n;// ./code/grid/es-modules/Data/Converters/DataConverter.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - Sebastian Bochan\n *  - Gøran Slettemark\n *  - Torstein Hønsi\n *  - Wojciech Chmiel\n *  - Jomar Hønsi\n *\n * */\n\n\n\nconst { addEvent: DataConverter_addEvent, fireEvent: DataConverter_fireEvent, isNumber: DataConverter_isNumber, merge: DataConverter_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Base class providing an interface and basic methods for a DataConverter\n *\n * @private\n */\nclass DataConverter {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of the DataConverter.\n     *\n     * @param {DataConverter.UserOptions} [options]\n     * Options for the DataConverter.\n     */\n    constructor(options) {\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        /**\n         * A collection of available date formats.\n         */\n        this.dateFormats = {\n            'YYYY/mm/dd': {\n                regex: /^(\\d{4})([\\-\\.\\/])(\\d{1,2})\\2(\\d{1,2})$/,\n                parser: function (match) {\n                    return (match ?\n                        Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                        NaN);\n                }\n            },\n            'dd/mm/YYYY': {\n                regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                parser: function (match) {\n                    return (match ?\n                        Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                        NaN);\n                },\n                alternative: 'mm/dd/YYYY' // Different format with the same regex\n            },\n            'mm/dd/YYYY': {\n                regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                parser: function (match) {\n                    return (match ?\n                        Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                        NaN);\n                }\n            },\n            'dd/mm/YY': {\n                regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                parser: function (match) {\n                    const d = new Date();\n                    if (!match) {\n                        return NaN;\n                    }\n                    let year = +match[4];\n                    if (year > (d.getFullYear() - 2000)) {\n                        year += 1900;\n                    }\n                    else {\n                        year += 2000;\n                    }\n                    return Date.UTC(year, match[3] - 1, +match[1]);\n                },\n                alternative: 'mm/dd/YY' // Different format with the same regex\n            },\n            'mm/dd/YY': {\n                regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                parser: function (match) {\n                    return (match ?\n                        Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                        NaN);\n                }\n            }\n        };\n        const mergedOptions = DataConverter_merge(DataConverter.defaultOptions, options);\n        let regExpPoint = mergedOptions.decimalPoint;\n        if (regExpPoint === '.' || regExpPoint === ',') {\n            regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n            this.decimalRegExp =\n                new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n        }\n        this.options = mergedOptions;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Converts a value to a boolean.\n     *\n     * @param {DataConverter.Type} value\n     * Value to convert.\n     *\n     * @return {boolean}\n     * Converted value as a boolean.\n     */\n    asBoolean(value) {\n        if (typeof value === 'boolean') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            return value !== '' && value !== '0' && value !== 'false';\n        }\n        return !!this.asNumber(value);\n    }\n    /**\n     * Converts a value to a Date.\n     *\n     * @param {DataConverter.Type} value\n     * Value to convert.\n     *\n     * @return {globalThis.Date}\n     * Converted value as a Date.\n     */\n    asDate(value) {\n        let timestamp;\n        if (typeof value === 'string') {\n            timestamp = this.parseDate(value);\n        }\n        else if (typeof value === 'number') {\n            timestamp = value;\n        }\n        else if (value instanceof Date) {\n            return value;\n        }\n        else {\n            timestamp = this.parseDate(this.asString(value));\n        }\n        return new Date(timestamp);\n    }\n    /**\n     * Casts a string value to it's guessed type\n     *\n     * @param {*} value\n     * The value to examine.\n     *\n     * @return {number|string|Date}\n     * The converted value.\n     */\n    asGuessedType(value) {\n        const converter = this, typeMap = {\n            'number': converter.asNumber,\n            'Date': converter.asDate,\n            'string': converter.asString\n        };\n        return typeMap[converter.guessType(value)].call(converter, value);\n    }\n    /**\n     * Converts a value to a number.\n     *\n     * @param {DataConverter.Type} value\n     * Value to convert.\n     *\n     * @return {number}\n     * Converted value as a number.\n     */\n    asNumber(value) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        if (typeof value === 'boolean') {\n            return value ? 1 : 0;\n        }\n        if (typeof value === 'string') {\n            const decimalRegex = this.decimalRegExp;\n            if (value.indexOf(' ') > -1) {\n                value = value.replace(/\\s+/g, '');\n            }\n            if (decimalRegex) {\n                if (!decimalRegex.test(value)) {\n                    return NaN;\n                }\n                value = value.replace(decimalRegex, '$1.$2');\n            }\n            return parseFloat(value);\n        }\n        if (value instanceof Date) {\n            return value.getDate();\n        }\n        if (value) {\n            return value.getRowCount();\n        }\n        return NaN;\n    }\n    /**\n     * Converts a value to a string.\n     *\n     * @param {DataConverter.Type} value\n     * Value to convert.\n     *\n     * @return {string}\n     * Converted value as a string.\n     */\n    asString(value) {\n        return '' + value;\n    }\n    /**\n     * Tries to guess the date format\n     *  - Check if either month candidate exceeds 12\n     *  - Check if year is missing (use current year)\n     *  - Check if a shortened year format is used (e.g. 1/1/99)\n     *  - If no guess can be made, the user must be prompted\n     * data is the data to deduce a format based on\n     * @private\n     *\n     * @param {Array<string>} data\n     * Data to check the format.\n     *\n     * @param {number} limit\n     * Max data to check the format.\n     *\n     * @param {boolean} save\n     * Whether to save the date format in the converter options.\n     */\n    deduceDateFormat(data, limit, save) {\n        const parser = this, stable = [], max = [];\n        let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n        /// candidates = {},\n        elem, j;\n        if (!limit || limit > data.length) {\n            limit = data.length;\n        }\n        for (; i < limit; i++) {\n            if (typeof data[i] !== 'undefined' &&\n                data[i] && data[i].length) {\n                thing = data[i]\n                    .trim()\n                    .replace(/[\\-\\.\\/]/g, ' ')\n                    .split(' ');\n                guessedFormat = [\n                    '',\n                    '',\n                    ''\n                ];\n                for (j = 0; j < thing.length; j++) {\n                    if (j < guessedFormat.length) {\n                        elem = parseInt(thing[j], 10);\n                        if (elem) {\n                            max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                            if (typeof stable[j] !== 'undefined') {\n                                if (stable[j] !== elem) {\n                                    stable[j] = false;\n                                }\n                            }\n                            else {\n                                stable[j] = elem;\n                            }\n                            if (elem > 31) {\n                                if (elem < 100) {\n                                    guessedFormat[j] = 'YY';\n                                }\n                                else {\n                                    guessedFormat[j] = 'YYYY';\n                                }\n                                /// madeDeduction = true;\n                            }\n                            else if (elem > 12 &&\n                                elem <= 31) {\n                                guessedFormat[j] = 'dd';\n                                madeDeduction = true;\n                            }\n                            else if (!guessedFormat[j].length) {\n                                guessedFormat[j] = 'mm';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (madeDeduction) {\n            // This handles a few edge cases with hard to guess dates\n            for (j = 0; j < stable.length; j++) {\n                if (stable[j] !== false) {\n                    if (max[j] > 12 &&\n                        guessedFormat[j] !== 'YY' &&\n                        guessedFormat[j] !== 'YYYY') {\n                        guessedFormat[j] = 'YY';\n                    }\n                }\n                else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                    guessedFormat[j] = 'dd';\n                }\n            }\n            // If the middle one is dd, and the last one is dd,\n            // the last should likely be year.\n            if (guessedFormat.length === 3 &&\n                guessedFormat[1] === 'dd' &&\n                guessedFormat[2] === 'dd') {\n                guessedFormat[2] = 'YY';\n            }\n            format = guessedFormat.join('/');\n            // If the caculated format is not valid, we need to present an\n            // error.\n        }\n        // Save the deduced format in the converter options.\n        if (save) {\n            parser.options.dateFormat = format;\n        }\n        return format;\n    }\n    /**\n     * Emits an event on the DataConverter instance.\n     *\n     * @param {DataConverter.Event} [e]\n     * Event object containing additional event data\n     */\n    emit(e) {\n        DataConverter_fireEvent(this, e.type, e);\n    }\n    /**\n     * Initiates the data exporting. Should emit `exportError` on failure.\n     *\n     * @param {DataConnector} connector\n     * Connector to export from.\n     *\n     * @param {DataConverter.Options} [options]\n     * Options for the export.\n     */\n    export(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    connector, options\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ) {\n        this.emit({\n            type: 'exportError',\n            columns: [],\n            headers: []\n        });\n        throw new Error('Not implemented');\n    }\n    /**\n     * Getter for the data table.\n     *\n     * @return {DataTable}\n     * Table of parsed data.\n     */\n    getTable() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Guesses the potential type of a string value for parsing CSV etc.\n     *\n     * @param {*} value\n     * The value to examine.\n     *\n     * @return {'number'|'string'|'Date'}\n     * Type string, either `string`, `Date`, or `number`.\n     */\n    guessType(value) {\n        const converter = this;\n        let result = 'string';\n        if (typeof value === 'string') {\n            const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n            let innerTrimedValue = converter.trim(trimedValue, true);\n            if (decimalRegExp) {\n                innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                    innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                    '');\n            }\n            const floatValue = parseFloat(innerTrimedValue);\n            if (+innerTrimedValue === floatValue) {\n                // String is numeric\n                value = floatValue;\n            }\n            else {\n                // Determine if a date string\n                const dateValue = converter.parseDate(value);\n                result = DataConverter_isNumber(dateValue) ? 'Date' : 'string';\n            }\n        }\n        if (typeof value === 'number') {\n            // Greater than milliseconds in a year assumed timestamp\n            result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n        }\n        return result;\n    }\n    /**\n     * Registers a callback for a specific event.\n     *\n     * @param {string} type\n     * Event type as a string.\n     *\n     * @param {DataEventEmitter.Callback} callback\n     * Function to register for an modifier callback.\n     *\n     * @return {Function}\n     * Function to unregister callback from the modifier event.\n     */\n    on(type, callback) {\n        return DataConverter_addEvent(this, type, callback);\n    }\n    /**\n     * Initiates the data parsing. Should emit `parseError` on failure.\n     *\n     * @param {DataConverter.UserOptions} options\n     * Options of the DataConverter.\n     */\n    parse(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    options) {\n        this.emit({\n            type: 'parseError',\n            columns: [],\n            headers: []\n        });\n        throw new Error('Not implemented');\n    }\n    /**\n     * Parse a date and return it as a number.\n     *\n     * @param {string} value\n     * Value to parse.\n     *\n     * @param {string} dateFormatProp\n     * Which of the predefined date formats\n     * to use to parse date values.\n     */\n    parseDate(value, dateFormatProp) {\n        const converter = this, options = converter.options;\n        let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n        if (options.parseDate) {\n            result = options.parseDate(value);\n        }\n        else {\n            // Auto-detect the date format the first time\n            if (!dateFormat) {\n                for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                    format = converter.dateFormats[key];\n                    match = value.match(format.regex);\n                    if (match) {\n                        // `converter.options.dateFormat` = dateFormat = key;\n                        dateFormat = key;\n                        // `converter.options.alternativeFormat` =\n                        // format.alternative || '';\n                        result = format.parser(match);\n                        break;\n                    }\n                }\n                // Next time, use the one previously found\n            }\n            else {\n                format = converter.dateFormats[dateFormat];\n                if (!format) {\n                    // The selected format is invalid\n                    format = converter.dateFormats['YYYY/mm/dd'];\n                }\n                match = value.match(format.regex);\n                if (match) {\n                    result = format.parser(match);\n                }\n            }\n            // Fall back to Date.parse\n            if (!match) {\n                match = Date.parse(value);\n                // External tools like Date.js and MooTools extend Date object\n                // and returns a date.\n                if (typeof match === 'object' &&\n                    match !== null &&\n                    match.getTime) {\n                    result = (match.getTime() -\n                        match.getTimezoneOffset() *\n                            60000);\n                    // Timestamp\n                }\n                else if (DataConverter_isNumber(match)) {\n                    result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                    if ( // Reset dates without year in Chrome\n                    value.indexOf('2001') === -1 &&\n                        (new Date(result)).getFullYear() === 2001) {\n                        result = NaN;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Trim a string from whitespaces.\n     *\n     * @param {string} str\n     * String to trim.\n     *\n     * @param {boolean} [inside=false]\n     * Remove all spaces between numbers.\n     *\n     * @return {string}\n     * Trimed string\n     */\n    trim(str, inside) {\n        if (typeof str === 'string') {\n            str = str.replace(/^\\s+|\\s+$/g, '');\n            // Clear white space insdie the string, like thousands separators\n            if (inside && /^[\\d\\s]+$/.test(str)) {\n                str = str.replace(/\\s/g, '');\n            }\n        }\n        return str;\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Default options\n */\nDataConverter.defaultOptions = {\n    dateFormat: '',\n    alternativeFormat: '',\n    startColumn: 0,\n    endColumn: Number.MAX_VALUE,\n    startRow: 0,\n    endRow: Number.MAX_VALUE,\n    firstRowAsNames: true,\n    switchRowsAndColumns: false\n};\n/* *\n *\n *  Class Namespace\n *\n * */\n/**\n * Additionally provided types for events and conversion.\n */\n(function (DataConverter) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    /**\n     * Registry as a record object with connector names and their class.\n     */\n    DataConverter.types = {};\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Adds a converter class to the registry.\n     *\n     * @private\n     *\n     * @param {string} key\n     * Registry key of the converter class.\n     *\n     * @param {DataConverterTypes} DataConverterClass\n     * Connector class (aka class constructor) to register.\n     *\n     * @return {boolean}\n     * Returns true, if the registration was successful. False is returned, if\n     * their is already a converter registered with this key.\n     */\n    function registerType(key, DataConverterClass) {\n        return (!!key &&\n            !DataConverter.types[key] &&\n            !!(DataConverter.types[key] = DataConverterClass));\n    }\n    DataConverter.registerType = registerType;\n    /**\n     * Converts an array of columns to a table instance. Second dimension of the\n     * array are the row cells.\n     *\n     * @param {Array<DataTable.Column>} [columns]\n     * Array to convert.\n     *\n     * @param {Array<string>} [headers]\n     * Column names to use.\n     *\n     * @return {DataTable}\n     * Table instance from the arrays.\n     */\n    function getTableFromColumns(columns = [], headers = []) {\n        const table = new Data_DataTable();\n        for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n            table.setColumn(headers[i] || `${i}`, columns[i]);\n        }\n        return table;\n    }\n    DataConverter.getTableFromColumns = getTableFromColumns;\n})(DataConverter || (DataConverter = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Converters_DataConverter = (DataConverter);\n\n;// ./code/grid/es-modules/Data/DataCursor.js\n/* *\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *\n * */\n\n/* *\n *\n *  Class\n *\n * */\n/**\n * This class manages state cursors pointing on {@link Data.DataTable}. It\n * creates a relation between states of the user interface and the table cells,\n * columns, or rows.\n *\n * @class\n * @name Data.DataCursor\n */\nclass DataCursor {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(stateMap = {}) {\n        this.emittingRegister = [];\n        this.listenerMap = {};\n        this.stateMap = stateMap;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * This function registers a listener for a specific state and table.\n     *\n     * @example\n     * ```TypeScript\n     * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n     *     if (e.cursor.type === 'position') {\n     *         console.log(`Hover over row #${e.cursor.row}.`);\n     *     }\n     * });\n     * ```\n     *\n     * @function #addListener\n     *\n     * @param {Data.DataCursor.TableId} tableId\n     * The ID of the table to listen to.\n     *\n     * @param {Data.DataCursor.State} state\n     * The state on the table to listen to.\n     *\n     * @param {Data.DataCursor.Listener} listener\n     * The listener to register.\n     *\n     * @return {Data.DataCursor}\n     * Returns the DataCursor instance for a call chain.\n     */\n    addListener(tableId, state, listener) {\n        const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n            {});\n        const listeners = listenerMap[state] = (listenerMap[state] ||\n            []);\n        listeners.push(listener);\n        return this;\n    }\n    /**\n     * @private\n     */\n    buildEmittingTag(e) {\n        return (e.cursor.type === 'position' ?\n            [\n                e.table.id,\n                e.cursor.column,\n                e.cursor.row,\n                e.cursor.state,\n                e.cursor.type\n            ] :\n            [\n                e.table.id,\n                e.cursor.columns,\n                e.cursor.firstRow,\n                e.cursor.lastRow,\n                e.cursor.state,\n                e.cursor.type\n            ]).join('\\0');\n    }\n    /**\n     * This function emits a state cursor related to a table. It will provide\n     * lasting state cursors of the table to listeners.\n     *\n     * @example\n     * ```ts\n     * dataCursor.emit(myTable, {\n     *     type: 'position',\n     *     column: 'city',\n     *     row: 4,\n     *     state: 'hover',\n     * });\n     * ```\n     *\n     * @param {Data.DataTable} table\n     * The related table of the cursor.\n     *\n     * @param {Data.DataCursor.Type} cursor\n     * The state cursor to emit.\n     *\n     * @param {Event} [event]\n     * Optional event information from a related source.\n     *\n     * @param {boolean} [lasting]\n     * Whether this state cursor should be kept until it is cleared with\n     * {@link DataCursor#remitCursor}.\n     *\n     * @return {Data.DataCursor}\n     * Returns the DataCursor instance for a call chain.\n     */\n    emitCursor(table, cursor, event, lasting) {\n        const tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n            this.listenerMap[tableId][state]);\n        if (listeners) {\n            const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ?? {});\n            const cursors = stateMap[cursor.state] || [];\n            if (lasting) {\n                if (!cursors.length) {\n                    stateMap[cursor.state] = cursors;\n                }\n                if (DataCursor.getIndex(cursor, cursors) === -1) {\n                    cursors.push(cursor);\n                }\n            }\n            const e = {\n                cursor,\n                cursors,\n                table\n            };\n            if (event) {\n                e.event = event;\n            }\n            const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n            if (emittingRegister.indexOf(emittingTag) >= 0) {\n                // Break call stack loops\n                return this;\n            }\n            try {\n                this.emittingRegister.push(emittingTag);\n                for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                    listeners[i].call(this, e);\n                }\n            }\n            finally {\n                const index = this.emittingRegister.indexOf(emittingTag);\n                if (index >= 0) {\n                    this.emittingRegister.splice(index, 1);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Removes a lasting state cursor.\n     *\n     * @function #remitCursor\n     *\n     * @param {string} tableId\n     * ID of the related cursor table.\n     *\n     * @param {Data.DataCursor.Type} cursor\n     * Copy or reference of the cursor.\n     *\n     * @return {Data.DataCursor}\n     * Returns the DataCursor instance for a call chain.\n     */\n    remitCursor(tableId, cursor) {\n        const cursors = (this.stateMap[tableId] &&\n            this.stateMap[tableId][cursor.state]);\n        if (cursors) {\n            const index = DataCursor.getIndex(cursor, cursors);\n            if (index >= 0) {\n                cursors.splice(index, 1);\n            }\n        }\n        return this;\n    }\n    /**\n     * This function removes a listener.\n     *\n     * @function #addListener\n     *\n     * @param {Data.DataCursor.TableId} tableId\n     * The ID of the table the listener is connected to.\n     *\n     * @param {Data.DataCursor.State} state\n     * The state on the table the listener is listening to.\n     *\n     * @param {Data.DataCursor.Listener} listener\n     * The listener to deregister.\n     *\n     * @return {Data.DataCursor}\n     * Returns the DataCursor instance for a call chain.\n     */\n    removeListener(tableId, state, listener) {\n        const listeners = (this.listenerMap[tableId] &&\n            this.listenerMap[tableId][state]);\n        if (listeners) {\n            const index = listeners.indexOf(listener);\n            if (index >= 0) {\n                listeners.splice(index, 1);\n            }\n        }\n        return this;\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Semantic version string of the DataCursor class.\n * @internal\n */\nDataCursor.version = '1.0.0';\n/* *\n *\n *  Class Namespace\n *\n * */\n/**\n * @class Data.DataCursor\n */\n(function (DataCursor) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Finds the index of an cursor in an array.\n     * @private\n     */\n    function getIndex(needle, cursors) {\n        if (needle.type === 'position') {\n            for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                cursor = cursors[i];\n                if (cursor.type === 'position' &&\n                    cursor.state === needle.state &&\n                    cursor.column === needle.column &&\n                    cursor.row === needle.row) {\n                    return i;\n                }\n            }\n        }\n        else {\n            const columnNeedle = JSON.stringify(needle.columns);\n            for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                cursor = cursors[i];\n                if (cursor.type === 'range' &&\n                    cursor.state === needle.state &&\n                    cursor.firstRow === needle.firstRow &&\n                    cursor.lastRow === needle.lastRow &&\n                    JSON.stringify(cursor.columns) === columnNeedle) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n    DataCursor.getIndex = getIndex;\n    /**\n     * Checks whether two cursor share the same properties.\n     * @private\n     */\n    function isEqual(cursorA, cursorB) {\n        if (cursorA.type === 'position' && cursorB.type === 'position') {\n            return (cursorA.column === cursorB.column &&\n                cursorA.row === cursorB.row &&\n                cursorA.state === cursorB.state);\n        }\n        if (cursorA.type === 'range' && cursorB.type === 'range') {\n            return (cursorA.firstRow === cursorB.firstRow &&\n                cursorA.lastRow === cursorB.lastRow &&\n                (JSON.stringify(cursorA.columns) ===\n                    JSON.stringify(cursorB.columns)));\n        }\n        return false;\n    }\n    DataCursor.isEqual = isEqual;\n    /**\n     * Checks whether a cursor is in a range.\n     * @private\n     */\n    function isInRange(needle, range) {\n        if (range.type === 'position') {\n            range = toRange(range);\n        }\n        if (needle.type === 'position') {\n            needle = toRange(needle, range);\n        }\n        const needleColumns = needle.columns;\n        const rangeColumns = range.columns;\n        return (needle.firstRow >= range.firstRow &&\n            needle.lastRow <= range.lastRow &&\n            (!needleColumns ||\n                !rangeColumns ||\n                needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n    }\n    DataCursor.isInRange = isInRange;\n    /**\n     * @private\n     */\n    function toPositions(cursor) {\n        if (cursor.type === 'position') {\n            return [cursor];\n        }\n        const columns = (cursor.columns || []);\n        const positions = [];\n        const state = cursor.state;\n        for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n            if (!columns.length) {\n                positions.push({\n                    type: 'position',\n                    row,\n                    state\n                });\n                continue;\n            }\n            for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                positions.push({\n                    type: 'position',\n                    column: columns[column],\n                    row,\n                    state\n                });\n            }\n        }\n        return positions;\n    }\n    DataCursor.toPositions = toPositions;\n    /**\n     * @private\n     */\n    function toRange(cursor, defaultRange) {\n        if (cursor.type === 'range') {\n            return cursor;\n        }\n        const range = {\n            type: 'range',\n            firstRow: (cursor.row ??\n                (defaultRange && defaultRange.firstRow) ??\n                0),\n            lastRow: (cursor.row ??\n                (defaultRange && defaultRange.lastRow) ??\n                Number.MAX_VALUE),\n            state: cursor.state\n        };\n        if (typeof cursor.column !== 'undefined') {\n            range.columns = [cursor.column];\n        }\n        return range;\n    }\n    DataCursor.toRange = toRange;\n})(DataCursor || (DataCursor = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Data_DataCursor = (DataCursor);\n\n;// ./code/grid/es-modules/Accessibility/HighContrastMode.js\n/* *\n *\n *  (c) 2009-2024 Øystein Moseng\n *\n *  Handling for Windows High Contrast Mode.\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { doc: HighContrastMode_doc, isMS, win: HighContrastMode_win } = Core_Globals;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Detect WHCM in the browser.\n *\n * @function Highcharts#isHighContrastModeActive\n * @private\n * @return {boolean} Returns true if the browser is in High Contrast mode.\n */\nfunction isHighContrastModeActive() {\n    // Use media query on Edge, but not on IE\n    const isEdge = /(Edg)/.test(HighContrastMode_win.navigator.userAgent);\n    if (HighContrastMode_win.matchMedia && isEdge) {\n        return HighContrastMode_win.matchMedia('(-ms-high-contrast: active)').matches;\n    }\n    // Test BG image for IE\n    if (isMS && HighContrastMode_win.getComputedStyle) {\n        const testDiv = HighContrastMode_doc.createElement('div');\n        const imageSrc = 'data:image/gif;base64,' +\n            'R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==';\n        testDiv.style.backgroundImage = `url(${imageSrc})`; // #13071\n        HighContrastMode_doc.body.appendChild(testDiv);\n        const bi = (testDiv.currentStyle ||\n            HighContrastMode_win.getComputedStyle(testDiv)).backgroundImage;\n        HighContrastMode_doc.body.removeChild(testDiv);\n        return bi === 'none';\n    }\n    // Other browsers use the forced-colors standard\n    return HighContrastMode_win.matchMedia && HighContrastMode_win.matchMedia('(forced-colors: active)').matches;\n}\n/**\n * Force high contrast theme for the chart. The default theme is defined in\n * a separate file.\n *\n * @function Highcharts#setHighContrastTheme\n * @private\n * @param {Highcharts.AccessibilityChart} chart The chart to set the theme of.\n * @return {void}\n */\nfunction setHighContrastTheme(chart) {\n    // We might want to add additional functionality here in the future for\n    // storing the old state so that we can reset the theme if HC mode is\n    // disabled. For now, the user will have to reload the page.\n    chart.highContrastModeActive = true;\n    // Apply theme to chart\n    const theme = (chart.options.accessibility.highContrastTheme);\n    chart.update(theme, false);\n    const hasCustomColors = theme.colors?.length > 1;\n    // Force series colors (plotOptions is not enough)\n    chart.series.forEach(function (s) {\n        const plotOpts = theme.plotOptions[s.type] || {};\n        const fillColor = hasCustomColors && s.colorIndex !== void 0 ?\n            theme.colors[s.colorIndex] :\n            plotOpts.color || 'window';\n        const seriesOptions = {\n            color: plotOpts.color || 'windowText',\n            colors: hasCustomColors ?\n                theme.colors : [plotOpts.color || 'windowText'],\n            borderColor: plotOpts.borderColor || 'window',\n            fillColor\n        };\n        s.update(seriesOptions, false);\n        if (s.points) {\n            // Force point colors if existing\n            s.points.forEach(function (p) {\n                if (p.options && p.options.color) {\n                    p.update({\n                        color: plotOpts.color || 'windowText',\n                        borderColor: plotOpts.borderColor || 'window'\n                    }, false);\n                }\n            });\n        }\n    });\n    // The redraw for each series and after is required for 3D pie\n    // (workaround)\n    chart.redraw();\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst whcm = {\n    isHighContrastModeActive,\n    setHighContrastTheme\n};\n/* harmony default export */ const HighContrastMode = (whcm);\n\n;// ./code/grid/es-modules/Grid/Core/Globals.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n/* *\n *\n *  Class\n *\n * */\n/**\n * Globals Grid namespace.\n */\nvar Globals_Globals;\n(function (Globals) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    Globals.classNamePrefix = 'hcg-';\n    Globals.rawClassNames = {\n        container: 'container',\n        tableElement: 'table',\n        captionElement: 'caption',\n        descriptionElement: 'description',\n        theadElement: 'thead',\n        tbodyElement: 'tbody',\n        rowElement: 'row',\n        rowEven: 'row-even',\n        rowOdd: 'row-odd',\n        hoveredRow: 'hovered-row',\n        columnElement: 'column',\n        hoveredCell: 'hovered-cell',\n        hoveredColumn: 'hovered-column',\n        syncedRow: 'synced-row',\n        syncedCell: 'synced-cell',\n        syncedColumn: 'synced-column',\n        editedCell: 'edited-cell',\n        mockedCell: 'mocked-cell',\n        rowsContentNowrap: 'rows-content-nowrap',\n        virtualization: 'virtualization',\n        scrollableContent: 'scrollable-content',\n        headerCell: 'header-cell',\n        headerCellContent: 'header-cell-content',\n        headerRow: 'head-row-content',\n        noData: 'no-data',\n        columnFirst: 'column-first',\n        columnSortable: 'column-sortable',\n        columnSortableIcon: 'column-sortable-icon',\n        columnSortedAsc: 'column-sorted-asc',\n        columnSortedDesc: 'column-sorted-desc',\n        resizerWrapper: 'resizer-content',\n        resizerHandles: 'column-resizer',\n        resizedColumn: 'column-resized',\n        creditsContainer: 'credits-container',\n        creditsText: 'credits',\n        visuallyHidden: 'visually-hidden',\n        lastHeaderCellInRow: 'last-header-cell-in-row',\n        loadingWrapper: 'loading-wrapper',\n        loadingSpinner: 'spinner',\n        loadingMessage: 'loading-message'\n    };\n    Globals.win = window;\n    Globals.composed = [];\n    Globals.userAgent = (Globals.win.navigator && Globals.win.navigator.userAgent) || '';\n    Globals.isChrome = Globals.userAgent.indexOf('Chrome') !== -1;\n    Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1;\n    Globals.getClassName = (classNameKey) => Globals.classNamePrefix + Globals.rawClassNames[classNameKey];\n})(Globals_Globals || (Globals_Globals = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Grid_Core_Globals = (Globals_Globals);\n\n;// ./code/grid/es-modules/Grid/Core/GridUtils.js\n/* *\n *\n *  Grid utilities\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *\n * */\n\n/* *\n *\n *  Namespace\n *\n * */\nvar GridUtils;\n(function (GridUtils) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Creates a HTML element with the provided options.\n     *\n     * @param tagName\n     * The tag name of the element.\n     *\n     * @param params\n     * The parameters of the element.\n     *\n     * @param parent\n     * The parent element.\n     */\n    function makeHTMLElement(tagName, params, parent) {\n        const element = document.createElement(tagName);\n        if (params) {\n            const paramsKeys = Object.keys(params);\n            for (let i = 0; i < paramsKeys.length; i++) {\n                const key = paramsKeys[i];\n                const value = params[key];\n                if (value !== void 0) {\n                    if (key === 'style') {\n                        Object.assign(element.style, value);\n                    }\n                    else {\n                        element[key] = value;\n                    }\n                }\n            }\n        }\n        if (parent) {\n            parent.appendChild(element);\n        }\n        return element;\n    }\n    GridUtils.makeHTMLElement = makeHTMLElement;\n    /**\n     * Creates a div element with the provided class name and id.\n     *\n     * @param className\n     * The class name of the div.\n     *\n     * @param id\n     * The id of the element.\n     */\n    function makeDiv(className, id) {\n        return makeHTMLElement('div', { className, id });\n    }\n    GridUtils.makeDiv = makeDiv;\n    /**\n     * Check if there's a possibility that the given string is an HTML\n     * (contains '<').\n     *\n     * @param str\n     * Text to verify.\n     */\n    function isHTML(str) {\n        return str.indexOf('<') !== -1;\n    }\n    GridUtils.isHTML = isHTML;\n    /**\n     * Returns a string containing plain text format by removing HTML tags\n     *\n     * @param text\n     * String to be sanitized\n     *\n     * @returns\n     * Sanitized plain text string\n     */\n    function sanitizeText(text) {\n        try {\n            return new DOMParser().parseFromString(text, 'text/html')\n                .body.textContent || '';\n        }\n        catch (error) {\n            return '';\n        }\n    }\n    GridUtils.sanitizeText = sanitizeText;\n    /**\n     * Sets an element's content, checking whether it is HTML or plain text.\n     * Should be used instead of element.innerText when the content can be HTML.\n     *\n     * @param element\n     * Parent element where the content should be.\n     *\n     * @param content\n     * Content to render.\n     */\n    function setHTMLContent(element, content) {\n        if (isHTML(content)) {\n            const formattedNodes = new HTML_AST(content);\n            formattedNodes.addToDOM(element);\n        }\n        else {\n            element.innerText = content;\n        }\n    }\n    GridUtils.setHTMLContent = setHTMLContent;\n})(GridUtils || (GridUtils = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Core_GridUtils = (GridUtils);\n\n;// ./code/grid/es-modules/Grid/Core/Accessibility/Accessibility.js\n/* *\n *\n *  Grid Accessibility class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\nconst { makeHTMLElement } = Core_GridUtils;\n/**\n *  Representing the accessibility functionalities for the Data Grid.\n */\nclass Accessibility {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Construct the accessibility object.\n     *\n     * @param grid\n     * The Grid Table instance which the accessibility controller belong to.\n     */\n    constructor(grid) {\n        this.grid = grid;\n        this.element = document.createElement('div');\n        this.element.classList.add(Grid_Core_Globals.getClassName('visuallyHidden'));\n        this.grid.container?.prepend(this.element);\n        this.announcerElement = document.createElement('p');\n        this.announcerElement.setAttribute('aria-atomic', 'true');\n        this.announcerElement.setAttribute('aria-hidden', 'false');\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    /**\n     * Add the 'sortable' hint span element for the sortable column.\n     *\n     * @param element\n     * The element to add the description to.\n     */\n    addSortableColumnHint(element) {\n        const sortableLang = this.grid.options?.lang?.accessibility?.sorting?.sortable;\n        if (!sortableLang) {\n            return;\n        }\n        makeHTMLElement('span', {\n            className: Grid_Core_Globals.getClassName('visuallyHidden'),\n            innerText: ', ' + sortableLang\n        }, element);\n    }\n    /**\n     * Add the description to the header cell.\n     *\n     * @param thElement\n     * The header cell element to add the description to.\n     *\n     * @param description\n     * The description to be added.\n     */\n    addHeaderCellDescription(thElement, description) {\n        if (description) {\n            thElement.setAttribute('aria-description', description);\n        }\n    }\n    /**\n     * Announce the message to the screen reader.\n     *\n     * @param msg\n     * The message to be announced.\n     *\n     * @param assertive\n     * Whether the message should be assertive. Default is false.\n     */\n    announce(msg, assertive = false) {\n        if (this.announcerTimeout) {\n            clearTimeout(this.announcerTimeout);\n        }\n        this.announcerElement.remove();\n        this.announcerElement.setAttribute('aria-live', assertive ? 'assertive' : 'polite');\n        this.element.appendChild(this.announcerElement);\n        this.announcerElement.textContent = msg;\n        this.announcerTimeout = setTimeout(() => {\n            this.announcerElement.remove();\n        }, 3000);\n    }\n    /**\n     * Announce the message to the screen reader that the user sorted the\n     * column.\n     *\n     * @param order\n     * The order of the sorting.\n     */\n    userSortedColumn(order) {\n        const { options } = this.grid;\n        const announcementsLang = options?.lang\n            ?.accessibility?.sorting?.announcements;\n        if (!options?.accessibility?.announcements?.sorting) {\n            return;\n        }\n        let msg;\n        switch (order) {\n            case 'asc':\n                msg = announcementsLang?.ascending;\n                break;\n            case 'desc':\n                msg = announcementsLang?.descending;\n                break;\n            default:\n                msg = announcementsLang?.none;\n        }\n        if (!msg) {\n            return;\n        }\n        this.announce(msg, true);\n    }\n    /**\n     * Set the aria sort state of the column header cell element.\n     *\n     * @param thElement\n     * The header cell element to set the `aria-sort` state to.\n     *\n     * @param state\n     * The sort state to be set for the column header cell.\n     */\n    setColumnSortState(thElement, state) {\n        thElement?.setAttribute('aria-sort', state);\n    }\n    /**\n     * Adds high contrast CSS class, if the browser is in High Contrast mode.\n     */\n    addHighContrast() {\n        const highContrastMode = this.grid.options?.accessibility?.highContrastMode;\n        if (highContrastMode !== false && (HighContrastMode.isHighContrastModeActive() ||\n            highContrastMode === true)) {\n            this.grid.contentWrapper?.classList.add('hcg-theme-highcontrast');\n        }\n    }\n    /**\n     * Set the row index attribute for the row element.\n     *\n     * @param el\n     * The row element to set the index to.\n     *\n     * @param idx\n     * The index of the row in the data table.\n     */\n    setRowIndex(el, idx) {\n        el.setAttribute('aria-rowindex', idx);\n    }\n    /**\n     * Set a11y options for the Grid.\n     */\n    setA11yOptions() {\n        const grid = this.grid;\n        const tableEl = grid.tableElement;\n        if (!tableEl) {\n            return;\n        }\n        tableEl.setAttribute('aria-rowcount', grid.dataTable?.getRowCount() || 0);\n        if (grid.captionElement) {\n            tableEl.setAttribute('aria-labelledby', grid.captionElement.id);\n        }\n        if (grid.descriptionElement) {\n            tableEl.setAttribute('aria-describedby', grid.descriptionElement.id);\n        }\n        this.addHighContrast();\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Accessibility_Accessibility = (Accessibility);\n\n;// ./code/grid/es-modules/Grid/Core/Defaults.js\n/* *\n *\n *  Grid default options\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n*  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\nconst { merge: Core_Defaults_merge } = Core_Utilities;\n/**\n * Namespace for default options.\n */\nvar Defaults_Defaults;\n(function (Defaults) {\n    /**\n     * Default options for the Grid.\n     * @internal\n     */\n    Defaults.defaultOptions = {\n        accessibility: {\n            enabled: true,\n            highContrastMode: 'auto',\n            announcements: {\n                sorting: true\n            }\n        },\n        lang: {\n            accessibility: {\n                sorting: {\n                    sortable: 'Sortable.',\n                    announcements: {\n                        ascending: 'Sorted ascending.',\n                        descending: 'Sorted descending.',\n                        none: 'Not sorted.'\n                    }\n                }\n            },\n            loading: 'Loading...',\n            noData: 'No data to display'\n        },\n        time: {\n            timezone: 'UTC'\n        },\n        rendering: {\n            columns: {\n                distribution: 'full'\n            },\n            rows: {\n                bufferSize: 10,\n                minVisibleRows: 2,\n                strictHeights: false,\n                virtualization: true\n            },\n            header: {\n                enabled: true\n            },\n            theme: 'hcg-theme-default'\n        },\n        columnDefaults: {\n            sorting: {\n                sortable: true\n            },\n            resizing: true\n        }\n    };\n    /**\n     * Merge the default options with custom options. Commonly used for defining\n     * reusable templates.\n     *\n     * @param options\n     * The new custom chart options.\n     */\n    function setOptions(options) {\n        Core_Defaults_merge(true, Defaults.defaultOptions, options);\n    }\n    Defaults.setOptions = setOptions;\n})(Defaults_Defaults || (Defaults_Defaults = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Core_Defaults = (Defaults_Defaults);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Column.js\n/* *\n *\n *  Grid Column class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\n\nconst { merge: Column_merge } = Core_Utilities;\nconst { makeHTMLElement: Column_makeHTMLElement } = Core_GridUtils;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Represents a column in the data grid.\n */\nclass Column {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a column in the data grid.\n     *\n     * @param viewport\n     * The viewport (table) the column belongs to.\n     *\n     * @param id\n     * The id of the column (`name` in the Data Table).\n     *\n     * @param index\n     * The index of the column.\n     */\n    constructor(viewport, id, index) {\n        /**\n         * The cells of the column.\n         */\n        this.cells = [];\n        this.options = Column_merge(viewport.grid.options?.columnDefaults ?? {}, viewport.grid.columnOptionsMap?.[id] ?? {});\n        this.id = id;\n        this.index = index;\n        this.viewport = viewport;\n        this.width = this.getInitialWidth();\n        this.loadData();\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    /**\n     * Loads the data of the column from the viewport's data table.\n     */\n    loadData() {\n        this.data = this.viewport.dataTable.getColumn(this.id, true);\n    }\n    /**\n     * Registers a cell in the column.\n     *\n     * @param cell\n     * The cell to register.\n     */\n    registerCell(cell) {\n        cell.htmlElement.setAttribute('data-column-id', this.id);\n        if (this.options.className) {\n            cell.htmlElement.classList.add(...this.options.className.split(/\\s+/g));\n        }\n        if (this.viewport.grid.hoveredColumnId === this.id) {\n            cell.htmlElement.classList.add(Grid_Core_Globals.getClassName('hoveredColumn'));\n        }\n        this.cells.push(cell);\n    }\n    /**\n     * Unregister a cell from the column.\n     *\n     * @param cell\n     * The cell to unregister.\n     */\n    unregisterCell(cell) {\n        const index = this.cells.indexOf(cell);\n        if (index > -1) {\n            this.cells.splice(index, 1);\n        }\n    }\n    /**\n     * Returns the width of the column in pixels.\n     */\n    getWidth() {\n        const vp = this.viewport;\n        return vp.columnDistribution === 'full' ?\n            vp.getWidthFromRatio(this.width) :\n            this.width;\n    }\n    /**\n     * Adds or removes the hovered CSS class to the column element\n     * and its cells.\n     *\n     * @param hovered\n     * Whether the column should be hovered.\n     */\n    setHoveredState(hovered) {\n        this.header?.htmlElement?.classList[hovered ? 'add' : 'remove'](Grid_Core_Globals.getClassName('hoveredColumn'));\n        for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n            this.cells[i].htmlElement.classList[hovered ? 'add' : 'remove'](Grid_Core_Globals.getClassName('hoveredColumn'));\n        }\n    }\n    /**\n     * Adds or removes the synced CSS class to the column element\n     * and its cells.\n     *\n     * @param synced\n     * Whether the column should have synced state.\n     */\n    setSyncedState(synced) {\n        this.header?.htmlElement?.classList[synced ? 'add' : 'remove'](Grid_Core_Globals.getClassName('syncedColumn'));\n        for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n            this.cells[i].htmlElement.classList[synced ? 'add' : 'remove'](Grid_Core_Globals.getClassName('syncedColumn'));\n        }\n    }\n    /**\n     * Creates a mock element to measure the width of the column from the CSS.\n     * The element is appended to the viewport container and then removed.\n     * It should be called only once for each column.\n     *\n     * @returns The initial width of the column.\n     */\n    getInitialWidth() {\n        let result;\n        const { viewport } = this;\n        // Set the initial width of the column.\n        const mock = Column_makeHTMLElement('div', {\n            className: Grid_Core_Globals.getClassName('columnElement')\n        }, viewport.grid.container);\n        mock.setAttribute('data-column-id', this.id);\n        if (this.options.className) {\n            mock.classList.add(...this.options.className.split(/\\s+/g));\n        }\n        if (viewport.columnDistribution === 'full') {\n            result = this.getInitialFullDistWidth(mock);\n        }\n        else {\n            result = mock.offsetWidth || 100;\n        }\n        mock.remove();\n        return result;\n    }\n    /**\n     * The initial width of the column in the full distribution mode. The last\n     * column in the viewport will have to fill the remaining space.\n     *\n     * @param mock\n     * The mock element to measure the width.\n     */\n    getInitialFullDistWidth(mock) {\n        const vp = this.viewport;\n        const columnsCount = vp.grid.enabledColumns?.length ?? 0;\n        if (this.index < columnsCount - 1) {\n            return vp.getRatioFromWidth(mock.offsetWidth) || 1 / columnsCount;\n        }\n        let allPreviousWidths = 0;\n        for (let i = 0, iEnd = columnsCount - 1; i < iEnd; i++) {\n            allPreviousWidths += vp.columns[i].width;\n        }\n        const result = 1 - allPreviousWidths;\n        if (result < 0) {\n            // eslint-disable-next-line no-console\n            console.warn('The sum of the columns\\' widths exceeds the ' +\n                'viewport width. It may cause unexpected behavior in the ' +\n                'full distribution mode. Check the CSS styles of the ' +\n                'columns. Corrections may be needed.');\n        }\n        return result;\n    }\n    /**\n     * Returns the formatted string where the templating context is the column.\n     *\n     * @param template\n     * The template string.\n     *\n     * @return\n     * The formatted string.\n     */\n    format(template) {\n        return Core_Templating.format(template, this, this.viewport.grid);\n    }\n}\n/* *\n*\n*  Static Properties\n*\n* */\n/**\n * The minimum width of a column.\n * @internal\n */\nColumn.MIN_COLUMN_WIDTH = 20;\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Table_Column = (Column);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Row.js\n/* *\n *\n *  Grid Row abstract class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\nconst { makeHTMLElement: Row_makeHTMLElement } = Core_GridUtils;\n/* *\n *\n *  Abstract Class of Row\n *\n * */\n/**\n * Represents a row in the data grid.\n */\nclass Row {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a row in the data grid.\n     *\n     * @param viewport\n     * The Grid Table instance which the row belongs to.\n     */\n    constructor(viewport) {\n        /* *\n        *\n        *  Properties\n        *\n        * */\n        /**\n         * The cells of the row.\n         */\n        this.cells = [];\n        this.viewport = viewport;\n        this.htmlElement = Row_makeHTMLElement('tr', {});\n    }\n    /**\n     * Renders the row's content. It does not attach the row element to the\n     * viewport nor pushes the rows to the viewport.rows array.\n     */\n    render() {\n        const columns = this.viewport.columns;\n        for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n            const cell = this.createCell(columns[i]);\n            cell.render();\n        }\n        this.rendered = true;\n        if (this.viewport.grid.options?.rendering?.rows?.virtualization) {\n            this.reflow();\n        }\n    }\n    /**\n     * Reflows the row's content dimensions.\n     */\n    reflow() {\n        for (let j = 0, jEnd = this.cells.length; j < jEnd; ++j) {\n            this.cells[j].reflow();\n        }\n        const vp = this.viewport;\n        if (vp.rowsWidth) {\n            this.htmlElement.style.width = vp.rowsWidth + 'px';\n        }\n    }\n    /**\n     * Destroys the row.\n     */\n    destroy() {\n        if (!this.htmlElement) {\n            return;\n        }\n        for (let i = this.cells.length - 1; i >= 0; --i) {\n            this.cells[i].destroy();\n        }\n        this.htmlElement.remove();\n    }\n    /**\n     * Returns the cell with the given column ID.\n     *\n     * @param columnId\n     * The column ID that the cell belongs to.\n     *\n     * @returns\n     * The cell with the given column ID or undefined if not found.\n     */\n    getCell(columnId) {\n        return this.cells.find((cell) => cell.column?.id === columnId);\n    }\n    /**\n     * Registers a cell in the row.\n     *\n     * @param cell\n     * The cell to register.\n     */\n    registerCell(cell) {\n        this.cells.push(cell);\n    }\n    /**\n     * Unregister a cell from the row.\n     *\n     * @param cell\n     * The cell to unregister.\n     */\n    unregisterCell(cell) {\n        const index = this.cells.indexOf(cell);\n        if (index > -1) {\n            this.cells.splice(index, 1);\n        }\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Table_Row = (Row);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Cell.js\n/* *\n *\n *  Grid Cell abstract class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n/* *\n *\n *  Abstract Class of Cell\n *\n * */\nclass Cell {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a cell in the data grid.\n     *\n     * @param row\n     * The row of the cell.\n     *\n     * @param column\n     * The column of the cell.\n     */\n    constructor(row, column) {\n        /**\n         * Array of cell events to be removed when the cell is destroyed.\n         */\n        this.cellEvents = [];\n        this.column = column;\n        this.row = row;\n        this.row.registerCell(this);\n        this.htmlElement = this.init();\n        this.htmlElement.setAttribute('tabindex', '-1');\n        this.initEvents();\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    /**\n     * Init element.\n     * @internal\n     */\n    init() {\n        return document.createElement('td', {});\n    }\n    /**\n     * Initialize event listeners. Events added to the `cellEvents` array will\n     * be registered now and unregistered when the cell is destroyed.\n     */\n    initEvents() {\n        this.cellEvents.push(['blur', () => this.onBlur()]);\n        this.cellEvents.push(['focus', () => this.onFocus()]);\n        this.cellEvents.push(['click', (e) => {\n                this.onClick(e);\n            }]);\n        this.cellEvents.push(['keydown', (e) => {\n                this.onKeyDown(e);\n            }]);\n        this.cellEvents.forEach((pair) => {\n            this.htmlElement.addEventListener(pair[0], pair[1]);\n        });\n    }\n    /**\n     * Handles the focus event on the cell.\n     */\n    onFocus() {\n        const vp = this.row.viewport;\n        const focusAnchor = vp.rowsVirtualizer.focusAnchorCell?.htmlElement;\n        focusAnchor?.setAttribute('tabindex', '-1');\n    }\n    /**\n     * Handles the blur event on the cell.\n     */\n    onBlur() {\n        const vp = this.row.viewport;\n        const focusAnchor = vp.rowsVirtualizer.focusAnchorCell?.htmlElement;\n        focusAnchor?.setAttribute('tabindex', '0');\n        delete vp.focusCursor;\n    }\n    /**\n     * Handles user keydown on the cell.\n     *\n     * @param e\n     * Keyboard event object.\n     */\n    onKeyDown(e) {\n        const { row, column } = this;\n        if (!column) {\n            return;\n        }\n        const vp = row.viewport;\n        const changeFocusKeys = {\n            ArrowDown: [1, 0],\n            ArrowUp: [-1, 0],\n            ArrowLeft: [0, -1],\n            ArrowRight: [0, 1]\n        };\n        const dir = changeFocusKeys[e.key];\n        if (dir) {\n            e.preventDefault();\n            e.stopPropagation();\n            const localRowIndex = row.index === void 0 ? -1 : (row.index - vp.rows[0].index);\n            const nextVerticalDir = localRowIndex + dir[0];\n            if (nextVerticalDir < 0 && vp.header) {\n                vp.columns[column.index + dir[1]]?.header?.htmlElement.focus();\n                return;\n            }\n            const nextRow = vp.rows[nextVerticalDir];\n            if (nextRow) {\n                nextRow.cells[column.index + dir[1]]?.htmlElement.focus();\n            }\n        }\n    }\n    /**\n     * Renders the cell by appending the HTML element to the row.\n     */\n    render() {\n        this.row.htmlElement.appendChild(this.htmlElement);\n    }\n    /**\n     * Reflows the cell dimensions.\n     */\n    reflow() {\n        const column = this.column;\n        if (!column) {\n            return;\n        }\n        const elementStyle = this.htmlElement.style;\n        elementStyle.width = elementStyle.maxWidth = column.getWidth() + 'px';\n    }\n    /**\n     * Returns the formatted string where the templating context is the cell.\n     *\n     * @param template\n     * The template string.\n     *\n     * @return\n     * The formatted string.\n     */\n    format(template) {\n        return Core_Templating.format(template, this, this.row.viewport.grid);\n    }\n    /**\n     * Sets the custom class name of the cell based on the template.\n     *\n     * @param template\n     * The template string.\n     */\n    setCustomClassName(template) {\n        const element = this.htmlElement;\n        if (this.customClassName) {\n            element.classList.remove(...this.customClassName.split(/\\s+/g));\n        }\n        if (!template) {\n            delete this.customClassName;\n            return;\n        }\n        const newClassName = this.format(template);\n        if (!newClassName) {\n            delete this.customClassName;\n            return;\n        }\n        element.classList.add(...newClassName.split(/\\s+/g));\n        this.customClassName = newClassName;\n    }\n    /**\n     * Destroys the cell.\n     */\n    destroy() {\n        this.cellEvents.forEach((pair) => {\n            this.htmlElement.removeEventListener(pair[0], pair[1]);\n        });\n        this.column?.unregisterCell(this);\n        this.row.unregisterCell(this);\n        this.htmlElement.remove();\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Table_Cell = (Cell);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Actions/ColumnSorting.js\n/* *\n *\n *  Grid ColumnSorting class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\nconst { makeHTMLElement: ColumnSorting_makeHTMLElement } = Core_GridUtils;\nconst { fireEvent: ColumnSorting_fireEvent } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class that manages sorting for a dedicated column.\n */\nclass ColumnSorting {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs sorting for a dedicated column.\n     *\n     * @param column\n     * The column that be sorted.\n     *\n     * @param headerCellElement\n     * The head element of the column.\n     */\n    constructor(column, headerCellElement) {\n        /**\n         * Toggle sorting order for the column in the order: asc -> desc -> none\n         */\n        this.toggle = () => {\n            const viewport = this.column.viewport;\n            const querying = viewport.grid.querying;\n            const sortingController = querying.sorting;\n            const currentOrder = (sortingController.currentSorting?.columnId === this.column.id ?\n                sortingController.currentSorting.order : null) || 'none';\n            const consequents = {\n                none: 'asc',\n                asc: 'desc',\n                desc: null\n            };\n            void this.setOrder(consequents[currentOrder]);\n        };\n        this.column = column;\n        this.headerCellElement = headerCellElement;\n        this.addHeaderElementAttributes();\n        if (column.options.sorting?.sortable) {\n            ColumnSorting_makeHTMLElement('span', {\n                className: Grid_Core_Globals.getClassName('columnSortableIcon'),\n                innerText: '▲'\n            }, headerCellElement).setAttribute('aria-hidden', true);\n            headerCellElement.classList.add(Grid_Core_Globals.getClassName('columnSortable'));\n        }\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    /**\n     * Adds attributes to the column header.\n     */\n    addHeaderElementAttributes() {\n        const col = this.column;\n        const a11y = col.viewport.grid.accessibility;\n        const sortingOptions = col.options.sorting;\n        const { currentSorting } = col.viewport.grid.querying.sorting;\n        const sortedAscClassName = Grid_Core_Globals.getClassName('columnSortedAsc');\n        const sortedDescClassName = Grid_Core_Globals.getClassName('columnSortedDesc');\n        const el = this.headerCellElement;\n        if (currentSorting?.columnId !== col.id || !currentSorting?.order) {\n            el.classList.remove(sortedAscClassName);\n            el.classList.remove(sortedDescClassName);\n            if (sortingOptions?.sortable) {\n                a11y?.setColumnSortState(el, 'none');\n            }\n            return;\n        }\n        switch (currentSorting?.order) {\n            case 'asc':\n                el.classList.add(sortedAscClassName);\n                el.classList.remove(sortedDescClassName);\n                a11y?.setColumnSortState(el, 'ascending');\n                break;\n            case 'desc':\n                el.classList.remove(sortedAscClassName);\n                el.classList.add(sortedDescClassName);\n                a11y?.setColumnSortState(el, 'descending');\n                break;\n        }\n    }\n    /**\n     * Set sorting order for the column. It will modify the presentation data\n     * and rerender the rows.\n     *\n     * @param order\n     * The order of sorting. It can be `'asc'`, `'desc'` or `null` if the\n     * sorting should be disabled.\n     */\n    async setOrder(order) {\n        const viewport = this.column.viewport;\n        const querying = viewport.grid.querying;\n        const sortingController = querying.sorting;\n        const a11y = viewport.grid.accessibility;\n        sortingController.setSorting(order, this.column.id);\n        await querying.proceed();\n        viewport.loadPresentationData();\n        for (const col of viewport.columns) {\n            col.sorting?.addHeaderElementAttributes();\n        }\n        a11y?.userSortedColumn(order);\n        ColumnSorting_fireEvent(this.column, 'afterSorting', {\n            target: this.column\n        });\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Actions_ColumnSorting = (ColumnSorting);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Header/HeaderCell.js\n/* *\n *\n *  Grid HeaderCell class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\n\n\nconst { makeHTMLElement: HeaderCell_makeHTMLElement, setHTMLContent } = Core_GridUtils;\nconst { fireEvent: HeaderCell_fireEvent, merge: HeaderCell_merge, isString: HeaderCell_isString } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Represents a cell in the data grid header.\n */\nclass HeaderCell extends Table_Cell {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a cell in the data grid header.\n     *\n     * @param row\n     * The row of the cell.\n     *\n     * @param column\n     * The column of the cell.\n     *\n     * @param columnsTree\n     * If the cell is a wider than one column, this property contains the\n     * structure of the columns that are subordinated to the header cell.\n     */\n    constructor(row, column, columnsTree) {\n        super(row, column);\n        /**\n         * Reference to options in settings header.\n         */\n        this.options = {};\n        /**\n         * List of columns that are subordinated to the header cell.\n         */\n        this.columns = [];\n        /**\n         * Content value of the header cell.\n         */\n        this.value = '';\n        if (column) {\n            column.header = this;\n            this.columns.push(column);\n        }\n        else if (columnsTree) {\n            const vp = this.row.viewport;\n            const columnIds = vp.grid.getColumnIds(columnsTree, true);\n            for (const columnId of columnIds) {\n                const column = vp.getColumn(columnId);\n                if (column) {\n                    this.columns.push(column);\n                }\n            }\n        }\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    /**\n     * Init element.\n     */\n    init() {\n        const elem = document.createElement('th', {});\n        elem.classList.add(Grid_Core_Globals.getClassName('headerCell'));\n        return elem;\n    }\n    /**\n     * Render the cell container.\n     */\n    render() {\n        const { column } = this;\n        const options = HeaderCell_merge(column?.options || {}, this.options);\n        const headerCellOptions = options.header || {};\n        const isSortableData = options.sorting?.sortable && column?.data;\n        if (headerCellOptions.formatter) {\n            this.value = headerCellOptions.formatter.call(this).toString();\n        }\n        else if (HeaderCell_isString(headerCellOptions.format)) {\n            this.value = column ?\n                column.format(headerCellOptions.format) :\n                headerCellOptions.format;\n        }\n        else {\n            this.value = column?.id || '';\n        }\n        // Render content of th element\n        this.row.htmlElement.appendChild(this.htmlElement);\n        this.headerContent = HeaderCell_makeHTMLElement('span', {\n            className: Grid_Core_Globals.getClassName('headerCellContent')\n        }, this.htmlElement);\n        // Render the header cell element content.\n        setHTMLContent(this.headerContent, this.value);\n        this.htmlElement.setAttribute('scope', 'col');\n        if (this.options.className) {\n            this.htmlElement.classList.add(...this.options.className.split(/\\s+/g));\n        }\n        if (column) {\n            this.htmlElement.setAttribute('data-column-id', column.id);\n            if (isSortableData) {\n                column.viewport.grid.accessibility?.addSortableColumnHint(this.headerContent);\n            }\n            // Add user column classname\n            if (column.options.className) {\n                this.htmlElement.classList.add(...column.options.className.split(/\\s+/g));\n            }\n            // Add resizing\n            column.viewport.columnsResizer?.renderColumnDragHandles(column, this);\n            // Add sorting\n            this.initColumnSorting();\n        }\n        this.setCustomClassName(options.header?.className);\n    }\n    reflow() {\n        const th = this.htmlElement;\n        if (!th) {\n            return;\n        }\n        let width = 0;\n        for (const column of this.columns) {\n            width += column.getWidth() || 0;\n        }\n        // Set the width of the column. Max width is needed for the\n        // overflow: hidden to work.\n        th.style.width = th.style.maxWidth = width + 'px';\n    }\n    onKeyDown(e) {\n        if (!this.column || e.target !== this.htmlElement) {\n            return;\n        }\n        if (e.key === 'Enter') {\n            if (this.column.options.sorting?.sortable) {\n                this.column.sorting?.toggle();\n            }\n            return;\n        }\n        super.onKeyDown(e);\n    }\n    onClick(e) {\n        const column = this.column;\n        if (!column || (e.target !== this.htmlElement &&\n            e.target !== column.header?.headerContent)) {\n            return;\n        }\n        if (column.options.sorting?.sortable) {\n            column.sorting?.toggle();\n        }\n        HeaderCell_fireEvent(this, 'click', {\n            originalEvent: e,\n            target: this.column\n        });\n    }\n    /**\n     * Add sorting option to the column.\n     */\n    initColumnSorting() {\n        const { column } = this;\n        if (!column) {\n            return;\n        }\n        column.sorting = new Actions_ColumnSorting(column, this.htmlElement);\n    }\n    /**\n     * Check if the cell is part of the last cell in the header.\n     */\n    isLastColumn() {\n        const vp = this.row.viewport;\n        const lastViewportColumn = vp.columns[vp.columns.length - 1];\n        const lastCellColumn = this.columns?.[this.columns.length - 1];\n        return lastViewportColumn === lastCellColumn;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Header_HeaderCell = (HeaderCell);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Header/HeaderRow.js\n/* *\n *\n *  Grid HeaderRow class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\n\nconst { isString: HeaderRow_isString } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Represents a row in the data grid header.\n */\nclass HeaderRow extends Table_Row {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a row in the data grid.\n     *\n     * @param viewport\n     * The Grid Table instance which the row belongs to.\n     *\n     * @param level\n     * The current level of header that is rendered.\n     */\n    constructor(viewport, level) {\n        super(viewport);\n        this.level = level;\n        this.setRowAttributes();\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    createCell(column, columnsTree) {\n        return new Header_HeaderCell(this, column, columnsTree);\n    }\n    /**\n     * Renders the row's content in the header.\n     *\n     * @param level\n     * The current level in the header tree\n     */\n    renderMultipleLevel(level) {\n        const header = this.viewport.grid.options?.header;\n        const vp = this.viewport;\n        const enabledColumns = vp.grid.enabledColumns;\n        // Render element\n        vp.theadElement?.appendChild(this.htmlElement);\n        this.htmlElement.classList.add(Grid_Core_Globals.getClassName('headerRow'));\n        if (!header) {\n            super.render();\n        }\n        else {\n            const columnsOnLevel = this.getColumnsAtLevel(header, level);\n            for (let i = 0, iEnd = columnsOnLevel.length; i < iEnd; i++) {\n                const columnOnLevel = columnsOnLevel[i];\n                const colIsString = typeof columnOnLevel === 'string';\n                const colSpan = (!colIsString && columnOnLevel.columns) ?\n                    vp.grid.getColumnIds(columnOnLevel.columns).length : 0;\n                const columnId = colIsString ?\n                    columnOnLevel : columnOnLevel.columnId;\n                const dataColumn = columnId ?\n                    vp.getColumn(columnId || '') : void 0;\n                const headerFormat = !colIsString ?\n                    columnOnLevel.format : void 0;\n                const className = !colIsString ?\n                    columnOnLevel.className : void 0;\n                // Skip hidden column or header when all columns are hidden.\n                if ((columnId && enabledColumns &&\n                    enabledColumns.indexOf(columnId) < 0) || (!dataColumn && colSpan === 0)) {\n                    continue;\n                }\n                const headerCell = this.createCell(dataColumn, !colIsString ? columnOnLevel.columns : void 0);\n                if (!colIsString) {\n                    vp.grid.accessibility?.addHeaderCellDescription(headerCell.htmlElement, columnOnLevel.accessibility?.description);\n                }\n                if (HeaderRow_isString(headerFormat)) {\n                    if (!headerCell.options.header) {\n                        headerCell.options.header = {};\n                    }\n                    headerCell.options.header.format = headerFormat;\n                }\n                if (className) {\n                    headerCell.options.className = className;\n                }\n                // Add class to disable left border on first column\n                if (dataColumn?.index === 0 && i === 0) {\n                    headerCell.htmlElement.classList.add(Grid_Core_Globals.getClassName('columnFirst'));\n                }\n                headerCell.render();\n                if (columnId) {\n                    headerCell.htmlElement.setAttribute('rowSpan', (this.viewport.header?.levels || 1) - level);\n                }\n                else {\n                    if (colSpan > 1) {\n                        headerCell.htmlElement.setAttribute('colSpan', colSpan);\n                    }\n                }\n            }\n        }\n        const lastCell = this.cells[this.cells.length - 1];\n        if (lastCell.isLastColumn()) {\n            lastCell.htmlElement.classList.add(Grid_Core_Globals.getClassName('lastHeaderCellInRow'));\n        }\n    }\n    reflow() {\n        const row = this;\n        for (let i = 0, iEnd = row.cells.length; i < iEnd; i++) {\n            const cell = row.cells[i];\n            cell.reflow();\n        }\n    }\n    /**\n     * Get all headers that should be rendered in a level.\n     *\n     * @param scope\n     * Level that we start from\n     *\n     * @param targetLevel\n     * Max level\n     *\n     * @param currentLevel\n     * Current level\n     *\n     * @return\n     * Array of headers that should be rendered in a level\n     */\n    getColumnsAtLevel(scope, targetLevel, currentLevel = 0) {\n        let result = [];\n        for (const column of scope) {\n            if (currentLevel === targetLevel) {\n                result.push(column);\n            }\n            if (typeof column !== 'string' && column.columns) {\n                result = result.concat(this.getColumnsAtLevel(column.columns, targetLevel, currentLevel + 1));\n            }\n        }\n        return result;\n    }\n    /**\n     * Sets the row HTML element attributes and additional classes.\n     */\n    setRowAttributes() {\n        const a11y = this.viewport.grid.accessibility;\n        a11y?.setRowIndex(this.htmlElement, this.level);\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Header_HeaderRow = (HeaderRow);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Header/TableHeader.js\n/* *\n *\n *  Grid TableHeader class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n/* *\n *\n *  Class\n *\n * */\n/**\n * Represents a table header row containing the cells (headers) with\n * column names.\n */\nclass TableHeader {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a new table head.\n     *\n     * @param viewport\n     * The viewport (table) the table head belongs to.\n     */\n    constructor(viewport) {\n        /* *\n        *\n        *  Properties\n        *\n        * */\n        /**\n         * The visible columns of the table.\n         */\n        this.columns = [];\n        /**\n         * The container of the table head.\n         */\n        this.rows = [];\n        /**\n         * Amount of levels in the header, that is used in creating correct rows.\n         */\n        this.levels = 1;\n        this.viewport = viewport;\n        this.columns = viewport.columns;\n        if (viewport.grid.options?.header) {\n            this.levels = this.getRowLevels(viewport.grid.options?.header);\n        }\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    /**\n     * Renders the table head content.\n     */\n    render() {\n        const vp = this.viewport;\n        if (!vp.grid.enabledColumns) {\n            return;\n        }\n        for (let i = 0, iEnd = this.levels; i < iEnd; i++) {\n            const row = new Header_HeaderRow(vp, i + 1); // Avoid indexing from 0\n            row.renderMultipleLevel(i);\n            this.rows.push(row);\n        }\n    }\n    /**\n     * Reflows the table head's content dimensions.\n     */\n    reflow() {\n        const vp = this.viewport;\n        if (!vp.theadElement) {\n            return;\n        }\n        const { clientWidth, offsetWidth } = vp.tbodyElement;\n        const header = vp.header;\n        const rows = this.rows;\n        const bordersWidth = offsetWidth - clientWidth;\n        for (const row of rows) {\n            row.reflow();\n        }\n        if (vp.rowsWidth) {\n            vp.theadElement.style.width =\n                Math.max(vp.rowsWidth, clientWidth) + bordersWidth + 'px';\n        }\n        if (header &&\n            bordersWidth > 0 &&\n            this.viewport.columnDistribution === 'full') {\n            const row = this.columns[this.columns.length - 1].header?.row;\n            const lastCellEl = row?.cells[row.cells.length - 1]?.htmlElement;\n            if (lastCellEl) {\n                lastCellEl.style.width = lastCellEl.style.maxWidth =\n                    lastCellEl.offsetWidth + bordersWidth + 'px';\n            }\n        }\n    }\n    /**\n     * Returns amount of rows for the current cell in header tree.\n     *\n     * @param scope\n     * Structure of header\n     *\n     * @returns\n     */\n    getRowLevels(scope) {\n        let maxDepth = 0;\n        for (const item of scope) {\n            if (typeof item !== 'string' && item.columns) {\n                const depth = this.getRowLevels(item.columns);\n                if (depth > maxDepth) {\n                    maxDepth = depth;\n                }\n            }\n        }\n        return maxDepth + 1;\n    }\n    /**\n     * Scrolls the table head horizontally, only when the virtualization\n     * is enabled.\n     *\n     * @param scrollLeft\n     * The left scroll position.\n     */\n    scrollHorizontally(scrollLeft) {\n        const el = this.viewport.theadElement;\n        if (!el) {\n            return;\n        }\n        el.style.transform = `translateX(${-scrollLeft}px)`;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Header_TableHeader = (TableHeader);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Content/TableCell.js\n/* *\n *\n *  Grid class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\nconst { setHTMLContent: TableCell_setHTMLContent } = Core_GridUtils;\nconst { defined: TableCell_defined, fireEvent: TableCell_fireEvent } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Represents a cell in the data grid.\n */\nclass TableCell extends Table_Cell {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a cell in the data grid.\n     *\n     * @param row\n     * The row of the cell.\n     *\n     * @param column\n     * The column of the cell.\n     */\n    constructor(row, column) {\n        super(row, column);\n        this.column = column;\n        this.row = row;\n        this.column.registerCell(this);\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    /**\n     * Renders the cell by appending it to the row and setting its value.\n     */\n    render() {\n        super.render();\n        // It may happen that `await` will be needed here in the future.\n        void this.setValue(this.column.data?.[this.row.index], false);\n    }\n    initEvents() {\n        this.cellEvents.push(['dblclick', (e) => (this.onDblClick(e))]);\n        this.cellEvents.push(['mouseout', () => this.onMouseOut()]);\n        this.cellEvents.push(['mouseover', () => this.onMouseOver()]);\n        this.cellEvents.push(['mousedown', (e) => {\n                this.onMouseDown(e);\n            }]);\n        super.initEvents();\n    }\n    /**\n     * Handles the focus event on the cell.\n     */\n    onFocus() {\n        super.onFocus();\n        const vp = this.row.viewport;\n        vp.focusCursor = [\n            this.row.index,\n            this.column.index\n        ];\n    }\n    /**\n     * Handles the mouse down event on the cell.\n     *\n     * @param e\n     * The mouse event object.\n     *\n     * @internal\n     */\n    onMouseDown(e) {\n        if (e.target === this.htmlElement) {\n            this.htmlElement.focus();\n        }\n        TableCell_fireEvent(this, 'mouseDown', {\n            target: this,\n            originalEvent: e\n        });\n    }\n    /**\n     * Handles the mouse over event on the cell.\n     * @internal\n     */\n    onMouseOver() {\n        const { grid } = this.row.viewport;\n        grid.hoverRow(this.row.index);\n        grid.hoverColumn(this.column.id);\n        TableCell_fireEvent(this, 'mouseOver', {\n            target: this\n        });\n    }\n    /**\n     * Handles the mouse out event on the cell.\n     */\n    onMouseOut() {\n        const { grid } = this.row.viewport;\n        grid.hoverRow();\n        grid.hoverColumn();\n        TableCell_fireEvent(this, 'mouseOut', {\n            target: this\n        });\n    }\n    /**\n     * Handles the double click event on the cell.\n     *\n     * @param e\n     * The mouse event object.\n     */\n    onDblClick(e) {\n        TableCell_fireEvent(this, 'dblClick', {\n            target: this,\n            originalEvent: e\n        });\n    }\n    onClick() {\n        TableCell_fireEvent(this, 'click', {\n            target: this\n        });\n    }\n    /**\n     * Handles the key down event on the cell.\n     *\n     * @param e\n     * Keyboard event object.\n     *\n     * @internal\n     */\n    onKeyDown(e) {\n        if (e.target !== this.htmlElement) {\n            return;\n        }\n        TableCell_fireEvent(this, 'keyDown', {\n            target: this,\n            originalEvent: e\n        });\n        super.onKeyDown(e);\n    }\n    /**\n     * Sets the value & updating content of the cell.\n     *\n     * @param value\n     * The raw value to set.\n     *\n     * @param updateTable\n     * Whether to update the table after setting the content.\n     */\n    async setValue(value, updateTable) {\n        this.value = value;\n        const vp = this.column.viewport;\n        const element = this.htmlElement;\n        const cellContent = this.formatCell();\n        // Render the table cell element content.\n        TableCell_setHTMLContent(element, cellContent);\n        this.htmlElement.setAttribute('data-value', this.value + '');\n        this.setCustomClassName(this.column.options.cells?.className);\n        TableCell_fireEvent(this, 'afterSetValue', {\n            target: this\n        });\n        if (!updateTable) {\n            return;\n        }\n        const { dataTable: originalDataTable } = vp.grid;\n        // Taken the local row index of the original grid data table, but\n        // in the future it should affect the globally original data table.\n        // (To be done after the DataLayer refinement)\n        const rowTableIndex = this.row.id && originalDataTable?.getLocalRowIndex(this.row.id);\n        if (!originalDataTable || rowTableIndex === void 0) {\n            return;\n        }\n        originalDataTable.setCell(this.column.id, rowTableIndex, this.value);\n        if (vp.grid.querying.willNotModify()) {\n            // If the data table does not need to be modified, skip the\n            // data modification and don't update the whole table. It checks\n            // if the modifiers are globally set. Can be changed in the future\n            // to check if the modifiers are set for the specific columns.\n            return;\n        }\n        let focusedRowId;\n        if (vp.focusCursor) {\n            focusedRowId = vp.dataTable.getOriginalRowIndex(vp.focusCursor[0]);\n        }\n        await vp.grid.querying.proceed(true);\n        vp.loadPresentationData();\n        if (focusedRowId !== void 0 && vp.focusCursor) {\n            const newRowIndex = vp.dataTable.getLocalRowIndex(focusedRowId);\n            if (newRowIndex !== void 0) {\n                vp.rows[newRowIndex - vp.rows[0].index]\n                    ?.cells[vp.focusCursor[1]].htmlElement.focus();\n            }\n        }\n    }\n    /**\n     * Handle the formatting content of the cell.\n     */\n    formatCell() {\n        const cellsDefaults = this.row.viewport.grid.options?.columnDefaults?.cells || {};\n        const options = this.column.options.cells || {};\n        const { format, formatter } = options;\n        const isDefaultFormat = cellsDefaults.format === format;\n        const isDefaultFormatter = cellsDefaults.formatter === formatter;\n        let value = this.value;\n        if (!TableCell_defined(value)) {\n            value = '';\n        }\n        let cellContent = '';\n        if (isDefaultFormat && isDefaultFormatter) {\n            cellContent = formatter ?\n                formatter.call(this).toString() :\n                (format ? this.format(format) : value + '');\n        }\n        else if (isDefaultFormat) {\n            cellContent = formatter?.call(this).toString() || value + '';\n        }\n        else if (isDefaultFormatter) {\n            cellContent = format ? this.format(format) : value + '';\n        }\n        return cellContent;\n    }\n    /**\n     * Destroys the cell.\n     */\n    destroy() {\n        super.destroy();\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Content_TableCell = (TableCell);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Content/TableRow.js\n/* *\n *\n *  Grid TableRow class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\n/* *\n *\n *  Class\n *\n * */\n/**\n * Represents a row in the data grid.\n */\nclass TableRow extends Table_Row {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a row in the data grid.\n     *\n     * @param viewport\n     * The Grid Table instance which the row belongs to.\n     *\n     * @param index\n     * The index of the row in the data table.\n     */\n    constructor(viewport, index) {\n        super(viewport);\n        /* *\n        *\n        *  Properties\n        *\n        * */\n        /**\n         * The row values from the data table in the original column order.\n         */\n        this.data = {};\n        /**\n         * The vertical translation of the row.\n         */\n        this.translateY = 0;\n        this.index = index;\n        this.id = viewport.dataTable.getOriginalRowIndex(index);\n        this.loadData();\n        this.setRowAttributes();\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    createCell(column) {\n        return new Content_TableCell(this, column);\n    }\n    /**\n     * Loads the row data from the data table.\n     */\n    loadData() {\n        const data = this.viewport.dataTable.getRowObject(this.index);\n        if (!data) {\n            return;\n        }\n        this.data = data;\n    }\n    /**\n     * Adds or removes the hovered CSS class to the row element.\n     *\n     * @param hovered\n     * Whether the row should be hovered.\n     */\n    setHoveredState(hovered) {\n        this.htmlElement.classList[hovered ? 'add' : 'remove'](Grid_Core_Globals.getClassName('hoveredRow'));\n        if (hovered) {\n            this.viewport.grid.hoveredRowIndex = this.index;\n        }\n    }\n    /**\n     * Adds or removes the synced CSS class to the row element.\n     *\n     * @param synced\n     * Whether the row should be synced.\n     */\n    setSyncedState(synced) {\n        this.htmlElement.classList[synced ? 'add' : 'remove'](Grid_Core_Globals.getClassName('syncedRow'));\n        if (synced) {\n            this.viewport.grid.syncedRowIndex = this.index;\n        }\n    }\n    /**\n     * Sets the row HTML element attributes and additional classes.\n     */\n    setRowAttributes() {\n        const idx = this.index;\n        const el = this.htmlElement;\n        const a11y = this.viewport.grid.accessibility;\n        el.classList.add(Grid_Core_Globals.getClassName('rowElement'));\n        // Index of the row in the presentation data table\n        el.setAttribute('data-row-index', idx);\n        // Index of the row in the original data table (ID)\n        if (this.id !== void 0) {\n            el.setAttribute('data-row-id', this.id);\n        }\n        // Calculate levels of header, 1 to avoid indexing from 0\n        a11y?.setRowIndex(el, idx + (this.viewport.header?.levels ?? 1) + 1);\n        // Indexing from 0, so rows with even index are odd.\n        el.classList.add(Grid_Core_Globals.getClassName(idx % 2 ? 'rowEven' : 'rowOdd'));\n        if (this.viewport.grid.hoveredRowIndex === idx) {\n            el.classList.add(Grid_Core_Globals.getClassName('hoveredRow'));\n        }\n        if (this.viewport.grid.syncedRowIndex === idx) {\n            el.classList.add(Grid_Core_Globals.getClassName('syncedRow'));\n        }\n    }\n    /**\n     * Sets the vertical translation of the row. Used for virtual scrolling.\n     *\n     * @param value\n     * The vertical translation of the row.\n     */\n    setTranslateY(value) {\n        this.translateY = value;\n        this.htmlElement.style.transform = `translateY(${value}px)`;\n    }\n    /**\n     * Returns the default top offset of the row (before adjusting row heights).\n     * @internal\n     */\n    getDefaultTopOffset() {\n        return this.index * this.viewport.rowsVirtualizer.defaultRowHeight;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Content_TableRow = (TableRow);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Actions/RowsVirtualizer.js\n/* *\n *\n *  Grid Rows Renderer class.\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *\n * */\n\n\n\n\nconst { makeHTMLElement: RowsVirtualizer_makeHTMLElement } = Core_GridUtils;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Represents a virtualized rows renderer for the data grid.\n */\nclass RowsVirtualizer {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs an instance of the rows virtualizer.\n     *\n     * @param viewport\n     * The viewport of the data grid to render rows in.\n     */\n    constructor(viewport) {\n        /**\n         * The index of the first visible row.\n         */\n        this.rowCursor = 0;\n        /**\n         * Flag indicating if the scrolling handler should be prevented to avoid\n         * flickering loops when scrolling to the last row.\n         */\n        this.preventScroll = false;\n        this.rowSettings =\n            viewport.grid.options?.rendering?.rows;\n        this.viewport = viewport;\n        this.strictRowHeights = this.rowSettings.strictHeights;\n        this.buffer = Math.max(this.rowSettings.bufferSize, 0);\n        this.defaultRowHeight = this.getDefaultRowHeight();\n        if (this.strictRowHeights) {\n            viewport.tbodyElement.classList.add(Grid_Core_Globals.getClassName('rowsContentNowrap'));\n        }\n    }\n    /* *\n    *\n    *  Functions\n    *\n    * */\n    /**\n     * Renders the rows in the viewport for the first time.\n     */\n    initialRender() {\n        // Initial reflow to set the viewport height\n        if (this.rowSettings?.virtualization) {\n            this.viewport.reflow();\n        }\n        // Load & render rows\n        this.renderRows(this.rowCursor);\n        if (this.rowSettings?.virtualization) {\n            this.adjustRowHeights();\n        }\n    }\n    /**\n     * Renders the rows in the viewport. It is called when the rows need to be\n     * re-rendered, e.g., after a sort or filter operation.\n     */\n    rerender() {\n        const tbody = this.viewport.tbodyElement;\n        let rows = this.viewport.rows;\n        const oldScrollLeft = tbody.scrollLeft;\n        let oldScrollTop;\n        if (rows.length) {\n            oldScrollTop = tbody.scrollTop;\n            for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                rows[i].destroy();\n            }\n            rows.length = 0;\n        }\n        this.renderRows(this.rowCursor);\n        if (this.rowSettings?.virtualization) {\n            if (oldScrollTop !== void 0) {\n                tbody.scrollTop = oldScrollTop;\n            }\n            this.scroll();\n        }\n        rows = this.viewport.rows;\n        // Reflow the rendered row cells widths (check redundancy)\n        for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n            rows[i].reflow();\n        }\n        tbody.scrollLeft = oldScrollLeft;\n    }\n    /**\n     * Method called on the viewport scroll event, only when the virtualization\n     * is enabled.\n     */\n    scroll() {\n        const target = this.viewport.tbodyElement;\n        const { defaultRowHeight: rowHeight } = this;\n        const lastScrollTop = target.scrollTop;\n        if (this.preventScroll) {\n            if (lastScrollTop <= target.scrollTop) {\n                this.preventScroll = false;\n            }\n            this.adjustBottomRowHeights();\n            return;\n        }\n        // Do vertical virtual scrolling\n        const rowCursor = Math.floor(target.scrollTop / rowHeight);\n        if (this.rowCursor !== rowCursor) {\n            this.renderRows(rowCursor);\n        }\n        this.rowCursor = rowCursor;\n        this.adjustRowHeights();\n        if (!this.strictRowHeights &&\n            lastScrollTop > target.scrollTop &&\n            !this.preventScroll) {\n            target.scrollTop = lastScrollTop;\n            this.preventScroll = true;\n        }\n    }\n    /**\n     * Adjusts the visible row heights from the bottom of the viewport.\n     */\n    adjustBottomRowHeights() {\n        const rows = this.viewport.rows;\n        const rowsLn = rows.length;\n        const lastRow = rows[rowsLn - 1];\n        let rowTop = lastRow.translateY;\n        const rowBottom = rowTop + lastRow.htmlElement.offsetHeight;\n        let newHeight = lastRow.cells[0].htmlElement.offsetHeight;\n        rowTop = rowBottom - newHeight;\n        lastRow.htmlElement.style.height = newHeight + 'px';\n        lastRow.setTranslateY(rowTop);\n        for (let j = 0, jEnd = lastRow.cells.length; j < jEnd; ++j) {\n            lastRow.cells[j].htmlElement.style.transform = '';\n        }\n        for (let i = rowsLn - 2; i >= 0; i--) {\n            const row = rows[i];\n            newHeight = row.cells[0].htmlElement.offsetHeight;\n            rowTop -= newHeight;\n            row.htmlElement.style.height = newHeight + 'px';\n            row.setTranslateY(rowTop);\n            for (let j = 0, jEnd = row.cells.length; j < jEnd; ++j) {\n                row.cells[j].htmlElement.style.transform = '';\n            }\n        }\n    }\n    /**\n     * Renders rows in the specified range. Removes rows that are out of the\n     * range except the last row.\n     *\n     * @param rowCursor\n     * The index of the first visible row.\n     */\n    renderRows(rowCursor) {\n        const { viewport: vp, buffer } = this;\n        const isVirtualization = this.rowSettings?.virtualization;\n        const rowsPerPage = isVirtualization ? Math.ceil((vp.grid.tableElement?.clientHeight || 0) /\n            this.defaultRowHeight) : Infinity; // Need to be refactored when add pagination\n        let rows = vp.rows;\n        if (!isVirtualization && rows.length > 50) {\n            // eslint-disable-next-line no-console\n            console.warn('Grid: a large dataset can cause performance issues.');\n        }\n        if (!rows.length) {\n            const last = new Content_TableRow(vp, vp.dataTable.getRowCount() - 1);\n            last.render();\n            rows.push(last);\n            vp.tbodyElement.appendChild(last.htmlElement);\n            if (isVirtualization) {\n                last.setTranslateY(last.getDefaultTopOffset());\n            }\n        }\n        const from = Math.max(0, Math.min(rowCursor - buffer, vp.dataTable.getRowCount() - rowsPerPage));\n        const to = Math.min(rowCursor + rowsPerPage + buffer, rows[rows.length - 1].index - 1);\n        const alwaysLastRow = rows.pop();\n        const tempRows = [];\n        // Remove rows that are out of the range except the last row.\n        for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n            const row = rows[i];\n            const rowIndex = row.index;\n            if (rowIndex < from || rowIndex > to) {\n                row.destroy();\n            }\n            else {\n                tempRows.push(row);\n            }\n        }\n        rows = tempRows;\n        vp.rows = rows;\n        for (let i = from; i <= to; ++i) {\n            const row = rows[i - (rows[0]?.index || 0)];\n            // Recreate row when it is destroyed and it is in the range.\n            if (!row) {\n                const newRow = new Content_TableRow(vp, i);\n                rows.push(newRow);\n                newRow.rendered = false;\n                if (isVirtualization) {\n                    newRow.setTranslateY(newRow.getDefaultTopOffset());\n                }\n            }\n        }\n        rows.sort((a, b) => a.index - b.index);\n        for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n            if (!rows[i].rendered) {\n                rows[i].render();\n                vp.tbodyElement.insertBefore(rows[i].htmlElement, vp.tbodyElement.lastChild);\n            }\n        }\n        if (alwaysLastRow) {\n            rows.push(alwaysLastRow);\n        }\n        // Focus the cell if the focus cursor is set\n        if (vp.focusCursor) {\n            const [rowIndex, columnIndex] = vp.focusCursor;\n            const row = rows.find((row) => row.index === rowIndex);\n            if (row) {\n                row.cells[columnIndex]?.htmlElement.focus({\n                    preventScroll: true\n                });\n            }\n        }\n        // Reset the focus anchor cell\n        this.focusAnchorCell?.htmlElement.setAttribute('tabindex', '-1');\n        const firstVisibleRow = rows[rowCursor - rows[0].index];\n        this.focusAnchorCell = firstVisibleRow?.cells[0];\n        this.focusAnchorCell?.htmlElement.setAttribute('tabindex', '0');\n    }\n    /**\n     * Adjusts the heights of the rows based on the current scroll position.\n     * It handles the possibility of the rows having different heights than\n     * the default height.\n     */\n    adjustRowHeights() {\n        if (this.strictRowHeights) {\n            return;\n        }\n        const { rowCursor: cursor, defaultRowHeight: defaultH } = this;\n        const { rows, tbodyElement } = this.viewport;\n        const rowsLn = rows.length;\n        let translateBuffer = rows[0].getDefaultTopOffset();\n        for (let i = 0; i < rowsLn; ++i) {\n            const row = rows[i];\n            // Reset row height and cell transforms\n            row.htmlElement.style.height = '';\n            if (row.cells[0].htmlElement.style.transform) {\n                for (let j = 0, jEnd = row.cells.length; j < jEnd; ++j) {\n                    const cell = row.cells[j];\n                    cell.htmlElement.style.transform = '';\n                }\n            }\n            // Rows above the first visible row\n            if (row.index < cursor) {\n                row.htmlElement.style.height = defaultH + 'px';\n                continue;\n            }\n            const cellHeight = row.cells[0].htmlElement.offsetHeight;\n            row.htmlElement.style.height = cellHeight + 'px';\n            // Rows below the first visible row\n            if (row.index > cursor) {\n                continue;\n            }\n            // First visible row\n            if (row.htmlElement.offsetHeight > defaultH) {\n                const newHeight = Math.floor(cellHeight - (cellHeight - defaultH) * (tbodyElement.scrollTop / defaultH - cursor));\n                row.htmlElement.style.height = newHeight + 'px';\n                for (let j = 0, jEnd = row.cells.length; j < jEnd; ++j) {\n                    const cell = row.cells[j];\n                    cell.htmlElement.style.transform = `translateY(${newHeight - cellHeight}px)`;\n                }\n            }\n        }\n        rows[0].setTranslateY(translateBuffer);\n        for (let i = 1, iEnd = rowsLn - 1; i < iEnd; ++i) {\n            translateBuffer += rows[i - 1].htmlElement.offsetHeight;\n            rows[i].setTranslateY(translateBuffer);\n        }\n        // Set the proper offset for the last row\n        const lastRow = rows[rowsLn - 1];\n        const preLastRow = rows[rowsLn - 2];\n        if (preLastRow && preLastRow.index === lastRow.index - 1) {\n            lastRow.setTranslateY(preLastRow.htmlElement.offsetHeight + translateBuffer);\n        }\n    }\n    /**\n     * Reflow the rendered rows content dimensions.\n     */\n    reflowRows() {\n        const rows = this.viewport.rows;\n        if (rows.length < 1) {\n            return;\n        }\n        for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n            rows[i].reflow();\n        }\n        if (this.rowSettings?.virtualization) {\n            this.adjustRowHeights();\n        }\n    }\n    /**\n     * Returns the default height of a row. This method should be called only\n     * once on initialization.\n     */\n    getDefaultRowHeight() {\n        const mockRow = RowsVirtualizer_makeHTMLElement('tr', {\n            className: Grid_Core_Globals.getClassName('rowElement'),\n            style: {\n                position: 'absolute'\n            }\n        }, this.viewport.tbodyElement);\n        const mockCell = RowsVirtualizer_makeHTMLElement('td', {\n            innerText: 'mock',\n            className: Grid_Core_Globals.getClassName('mockedCell')\n        }, mockRow);\n        const defaultRowHeight = mockRow.offsetHeight;\n        mockRow.remove();\n        mockCell.remove();\n        return defaultRowHeight;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Actions_RowsVirtualizer = (RowsVirtualizer);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Actions/ColumnsResizer.js\n/* *\n *\n *  Grid Columns Resizer class.\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\n\nconst { makeHTMLElement: ColumnsResizer_makeHTMLElement } = Core_GridUtils;\nconst { fireEvent: ColumnsResizer_fireEvent, getStyle: ColumnsResizer_getStyle } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * The class that handles the resizing of columns in the data grid.\n */\nclass ColumnsResizer {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(viewport) {\n        /**\n         * The handles and their mouse down event listeners.\n         */\n        this.handles = [];\n        /**\n         * Handles the mouse move event on the document.\n         *\n         * @param e\n         * The mouse event.\n         *\n         * @internal\n         */\n        this.onDocumentMouseMove = (e) => {\n            if (!this.draggedResizeHandle || !this.draggedColumn) {\n                return;\n            }\n            const diff = e.pageX - (this.dragStartX || 0);\n            const vp = this.viewport;\n            if (vp.columnDistribution === 'full') {\n                this.fullDistributionResize(diff);\n            }\n            else {\n                this.fixedDistributionResize(diff);\n            }\n            vp.reflow(true);\n            if (vp.grid.options?.rendering?.rows?.virtualization) {\n                vp.rowsVirtualizer.adjustRowHeights();\n            }\n            ColumnsResizer_fireEvent(this.draggedColumn, 'afterResize', {\n                target: this.draggedColumn,\n                originalEvent: e\n            });\n        };\n        /**\n         * Handles the mouse up event on the document.\n         */\n        this.onDocumentMouseUp = () => {\n            this.draggedColumn?.header?.htmlElement?.classList.remove(Grid_Core_Globals.getClassName('resizedColumn'));\n            this.dragStartX = void 0;\n            this.draggedColumn = void 0;\n            this.draggedResizeHandle = void 0;\n            this.columnStartWidth = void 0;\n            this.nextColumnStartWidth = void 0;\n        };\n        this.viewport = viewport;\n        document.addEventListener('mousemove', this.onDocumentMouseMove);\n        document.addEventListener('mouseup', this.onDocumentMouseUp);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Render the drag handle for resizing columns.\n     *\n     * @param column\n     * The reference to rendered column\n     *\n     * @param cell\n     * The reference to rendered cell, where hadles should be added\n     */\n    renderColumnDragHandles(column, cell) {\n        const vp = column.viewport;\n        if (vp.columnsResizer && (vp.columnDistribution !== 'full' ||\n            (vp.grid.enabledColumns &&\n                column.index < vp.grid.enabledColumns.length - 1))) {\n            const handle = ColumnsResizer_makeHTMLElement('div', {\n                className: Grid_Core_Globals.getClassName('resizerHandles')\n            }, cell.htmlElement);\n            handle.setAttribute('aria-hidden', true);\n            vp.columnsResizer?.addHandleListeners(handle, column);\n        }\n    }\n    /**\n     * Resizes the columns in the full distribution mode.\n     *\n     * @param diff\n     * The X position difference in pixels.\n     */\n    fullDistributionResize(diff) {\n        const vp = this.viewport;\n        const column = this.draggedColumn;\n        if (!column) {\n            return;\n        }\n        const nextColumn = vp.columns[column.index + 1];\n        if (!nextColumn) {\n            return;\n        }\n        const leftColW = this.columnStartWidth ?? 0;\n        const rightColW = this.nextColumnStartWidth ?? 0;\n        const minWidth = ColumnsResizer.getMinWidth(column);\n        let newLeftW = leftColW + diff;\n        let newRightW = rightColW - diff;\n        if (newLeftW < minWidth) {\n            newLeftW = minWidth;\n            newRightW = leftColW + rightColW - minWidth;\n        }\n        if (newRightW < minWidth) {\n            newRightW = minWidth;\n            newLeftW = leftColW + rightColW - minWidth;\n        }\n        column.width = vp.getRatioFromWidth(newLeftW);\n        nextColumn.width = vp.getRatioFromWidth(newRightW);\n    }\n    /**\n     * Resizes the columns in the fixed distribution mode.\n     *\n     * @param diff\n     * The X position difference in pixels.\n     */\n    fixedDistributionResize(diff) {\n        const column = this.draggedColumn;\n        if (!column) {\n            return;\n        }\n        const colW = this.columnStartWidth ?? 0;\n        const minWidth = ColumnsResizer.getMinWidth(column);\n        let newW = colW + diff;\n        if (newW < minWidth) {\n            newW = minWidth;\n        }\n        column.width = newW;\n    }\n    /**\n     * Adds event listeners to the handle.\n     *\n     * @param handle\n     * The handle element.\n     *\n     * @param column\n     * The column the handle belongs to.\n     */\n    addHandleListeners(handle, column) {\n        const onHandleMouseDown = (e) => {\n            const vp = column.viewport;\n            const { grid } = vp;\n            if (!grid.options?.rendering?.rows?.virtualization) {\n                grid.contentWrapper?.classList.add(Grid_Core_Globals.getClassName('resizerWrapper'));\n                // Apply widths before resizing\n                vp.reflow(true);\n            }\n            this.dragStartX = e.pageX;\n            this.draggedColumn = column;\n            this.draggedResizeHandle = handle;\n            this.columnStartWidth = column.getWidth();\n            this.nextColumnStartWidth =\n                vp.columns[column.index + 1]?.getWidth();\n            column.header?.htmlElement.classList.add(Grid_Core_Globals.getClassName('resizedColumn'));\n        };\n        this.handles.push([handle, onHandleMouseDown]);\n        handle.addEventListener('mousedown', onHandleMouseDown);\n    }\n    /**\n     * Removes all added event listeners from the document and handles. This\n     * should be called on the destroy of the data grid.\n     */\n    removeEventListeners() {\n        document.removeEventListener('mousemove', this.onDocumentMouseMove);\n        document.removeEventListener('mouseup', this.onDocumentMouseUp);\n        for (let i = 0, iEnd = this.handles.length; i < iEnd; i++) {\n            const [handle, listener] = this.handles[i];\n            handle.removeEventListener('mousedown', listener);\n        }\n    }\n    /**\n     * Returns the minimum width of the column.\n     *\n     * @param column\n     * The column to get the minimum width for.\n     *\n     * @returns\n     * The minimum width in pixels.\n     */\n    static getMinWidth(column) {\n        const tableColumnEl = column.cells[1].htmlElement;\n        const headerColumnEl = column.header?.htmlElement;\n        const getElPaddings = (el) => ((ColumnsResizer_getStyle(el, 'padding-left', true) || 0) +\n            (ColumnsResizer_getStyle(el, 'padding-right', true) || 0) +\n            (ColumnsResizer_getStyle(el, 'border-left', true) || 0) +\n            (ColumnsResizer_getStyle(el, 'border-right', true) || 0));\n        let result = Table_Column.MIN_COLUMN_WIDTH;\n        if (tableColumnEl) {\n            result = Math.max(result, getElPaddings(tableColumnEl));\n        }\n        if (headerColumnEl) {\n            result = Math.max(result, getElPaddings(headerColumnEl));\n        }\n        return result;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Actions_ColumnsResizer = (ColumnsResizer);\n\n;// ./code/grid/es-modules/Grid/Core/Table/Table.js\n/* *\n *\n *  Grid Table Viewport class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\n\n\n\n\nconst { makeHTMLElement: Table_makeHTMLElement } = Core_GridUtils;\nconst { fireEvent: Table_fireEvent, getStyle: Table_getStyle, defined: Table_defined } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Represents a table viewport of the data grid.\n */\nclass Table {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a new data grid table.\n     *\n     * @param grid\n     * The data grid instance which the table (viewport) belongs to.\n     *\n     * @param tableElement\n     * The HTML table element of the data grid.\n     */\n    constructor(grid, tableElement) {\n        /**\n         * The visible columns of the table.\n         */\n        this.columns = [];\n        /**\n         * The visible rows of the table.\n         */\n        this.rows = [];\n        /**\n         * Handles the focus event on the table body.\n         *\n         * @param e\n         * The focus event.\n         */\n        this.onTBodyFocus = (e) => {\n            e.preventDefault();\n            this.rows[this.rowsVirtualizer.rowCursor - this.rows[0].index]\n                ?.cells[0]?.htmlElement.focus();\n        };\n        /**\n         * Handles the resize event.\n         */\n        this.onResize = () => {\n            this.reflow(this.scrollable);\n        };\n        /**\n         * Handles the scroll event.\n         */\n        this.onScroll = () => {\n            this.rowsVirtualizer.scroll();\n            this.header?.scrollHorizontally(this.tbodyElement.scrollLeft);\n        };\n        this.grid = grid;\n        this.dataTable = this.grid.presentationTable;\n        const dgOptions = grid.options;\n        const customClassName = dgOptions?.rendering?.table?.className;\n        this.columnDistribution =\n            dgOptions?.rendering?.columns?.distribution;\n        this.virtualRows = !!dgOptions?.rendering?.rows?.virtualization;\n        this.scrollable = !!(this.grid.initialContainerHeight || this.virtualRows);\n        if (dgOptions?.rendering?.header?.enabled) {\n            this.theadElement = Table_makeHTMLElement('thead', {}, tableElement);\n        }\n        this.tbodyElement = Table_makeHTMLElement('tbody', {}, tableElement);\n        if (this.virtualRows) {\n            tableElement.classList.add(Grid_Core_Globals.getClassName('virtualization'));\n        }\n        this.rowsVirtualizer = new Actions_RowsVirtualizer(this);\n        if (dgOptions?.columnDefaults?.resizing) {\n            this.columnsResizer = new Actions_ColumnsResizer(this);\n        }\n        if (customClassName) {\n            tableElement.classList.add(...customClassName.split(/\\s+/g));\n        }\n        this.init();\n        // Add event listeners\n        this.resizeObserver = new ResizeObserver(this.onResize);\n        this.resizeObserver.observe(tableElement);\n        if (this.virtualRows) {\n            // For now, scroll event is only needed for virtualization.\n            this.tbodyElement.addEventListener('scroll', this.onScroll);\n        }\n        if (this.scrollable) {\n            tableElement.classList.add(Grid_Core_Globals.getClassName('scrollableContent'));\n        }\n        this.tbodyElement.addEventListener('focus', this.onTBodyFocus);\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    /**\n     * Initializes the data grid table.\n     */\n    init() {\n        Table_fireEvent(this, 'beforeInit');\n        this.setTbodyMinHeight();\n        // Load columns\n        this.loadColumns();\n        // Load & render head\n        if (this.grid.options?.rendering?.header?.enabled) {\n            this.header = new Header_TableHeader(this);\n            this.header.render();\n        }\n        // TODO: Load & render footer\n        // this.footer = new TableFooter(this);\n        // this.footer.render();\n        this.rowsVirtualizer.initialRender();\n    }\n    /**\n     * Sets the minimum height of the table body.\n     */\n    setTbodyMinHeight() {\n        const { options } = this.grid;\n        const minVisibleRows = options?.rendering?.rows?.minVisibleRows;\n        const tbody = this.tbodyElement;\n        if (Table_defined(minVisibleRows) &&\n            !Table_getStyle(tbody, 'min-height', true)) {\n            tbody.style.minHeight = (minVisibleRows * this.rowsVirtualizer.defaultRowHeight) + 'px';\n        }\n    }\n    /**\n     * Loads the columns of the table.\n     */\n    loadColumns() {\n        const { enabledColumns } = this.grid;\n        if (!enabledColumns) {\n            return;\n        }\n        let columnId;\n        for (let i = 0, iEnd = enabledColumns.length; i < iEnd; ++i) {\n            columnId = enabledColumns[i];\n            this.columns.push(new Table_Column(this, columnId, i));\n        }\n    }\n    /**\n     * Loads the modified data from the data table and renders the rows.\n     */\n    loadPresentationData() {\n        this.dataTable = this.grid.presentationTable;\n        for (const column of this.columns) {\n            column.loadData();\n        }\n        this.rowsVirtualizer.rerender();\n    }\n    /**\n     * Reflows the table's content dimensions.\n     *\n     * @param reflowColumns\n     * Force reflow columns and recalculate widths.\n     *\n     */\n    reflow(reflowColumns = false) {\n        const isVirtualization = this.grid.options?.rendering?.rows?.virtualization;\n        // Get the width of the rows.\n        if (this.columnDistribution === 'fixed') {\n            let rowsWidth = 0;\n            for (let i = 0, iEnd = this.columns.length; i < iEnd; ++i) {\n                rowsWidth += this.columns[i].width;\n            }\n            this.rowsWidth = rowsWidth;\n        }\n        if (isVirtualization || reflowColumns) {\n            // Reflow the head\n            this.header?.reflow();\n            // Reflow rows content dimensions\n            this.rowsVirtualizer.reflowRows();\n        }\n    }\n    /**\n     * Scrolls the table to the specified row.\n     *\n     * @param index\n     * The index of the row to scroll to.\n     *\n     * Try it: {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/grid-lite/basic/scroll-to-row | Scroll to row}\n     */\n    scrollToRow(index) {\n        if (this.grid.options?.rendering?.rows?.virtualization) {\n            this.tbodyElement.scrollTop =\n                index * this.rowsVirtualizer.defaultRowHeight;\n            return;\n        }\n        const rowClass = '.' + Grid_Core_Globals.getClassName('rowElement');\n        const firstRowTop = this.tbodyElement\n            .querySelectorAll(rowClass)[0]\n            .getBoundingClientRect().top;\n        this.tbodyElement.scrollTop = (this.tbodyElement\n            .querySelectorAll(rowClass)[index]\n            .getBoundingClientRect().top) - firstRowTop;\n    }\n    /**\n     * Get the widthRatio value from the width in pixels. The widthRatio is\n     * calculated based on the width of the viewport.\n     *\n     * @param width\n     * The width in pixels.\n     *\n     * @return The width ratio.\n     *\n     * @internal\n     */\n    getRatioFromWidth(width) {\n        return width / this.tbodyElement.clientWidth;\n    }\n    /**\n     * Get the width in pixels from the widthRatio value. The width is\n     * calculated based on the width of the viewport.\n     *\n     * @param ratio\n     * The width ratio.\n     *\n     * @returns The width in pixels.\n     *\n     * @internal\n     */\n    getWidthFromRatio(ratio) {\n        return this.tbodyElement.clientWidth * ratio;\n    }\n    /**\n     * Destroys the data grid table.\n     */\n    destroy() {\n        this.tbodyElement.removeEventListener('focus', this.onTBodyFocus);\n        if (this.grid.options?.rendering?.rows?.virtualization) {\n            this.tbodyElement.removeEventListener('scroll', this.onScroll);\n        }\n        this.resizeObserver.disconnect();\n        this.columnsResizer?.removeEventListeners();\n        for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n            this.rows[i].destroy();\n        }\n    }\n    /**\n     * Get the viewport state metadata. It is used to save the state of the\n     * viewport and restore it when the data grid is re-rendered.\n     *\n     * @returns\n     * The viewport state metadata.\n     */\n    getStateMeta() {\n        return {\n            scrollTop: this.tbodyElement.scrollTop,\n            scrollLeft: this.tbodyElement.scrollLeft,\n            columnDistribution: this.columnDistribution,\n            columnWidths: this.columns.map((column) => column.width),\n            focusCursor: this.focusCursor\n        };\n    }\n    /**\n     * Apply the metadata to the viewport state. It is used to restore the state\n     * of the viewport when the data grid is re-rendered.\n     *\n     * @param meta\n     * The viewport state metadata.\n     */\n    applyStateMeta(meta) {\n        this.tbodyElement.scrollTop = meta.scrollTop;\n        this.tbodyElement.scrollLeft = meta.scrollLeft;\n        if (this.columnDistribution === meta.columnDistribution &&\n            this.columns.length === meta.columnWidths.length) {\n            const widths = meta.columnWidths;\n            for (let i = 0, iEnd = widths.length; i < iEnd; ++i) {\n                this.columns[i].width = widths[i];\n            }\n            this.reflow();\n            if (meta.focusCursor) {\n                const [rowIndex, columnIndex] = meta.focusCursor;\n                const row = this.rows[rowIndex - this.rows[0].index];\n                row?.cells[columnIndex]?.htmlElement.focus();\n            }\n        }\n    }\n    /**\n     * Returns the column with the provided ID.\n     *\n     * @param id\n     * The ID of the column.\n     */\n    getColumn(id) {\n        const columns = this.grid.enabledColumns;\n        if (!columns) {\n            return;\n        }\n        const columnIndex = columns.indexOf(id);\n        if (columnIndex < 0) {\n            return;\n        }\n        return this.columns[columnIndex];\n    }\n    /**\n     * Returns the row with the provided ID.\n     *\n     * @param id\n     * The ID of the row.\n     */\n    getRow(id) {\n        return this.rows.find((row) => row.id === id);\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Table_Table = (Table);\n\n;// ./code/grid/es-modules/Data/Modifiers/ChainModifier.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - Dawid Dragula\n *\n * */\n\n\n\nconst { merge: ChainModifier_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Modifies a table with the help of modifiers in an ordered chain.\n *\n */\nclass ChainModifier extends Modifiers_DataModifier {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of the modifier chain.\n     *\n     * @param {Partial<ChainModifier.Options>} [options]\n     * Options to configure the modifier chain.\n     *\n     * @param {...DataModifier} [chain]\n     * Ordered chain of modifiers.\n     */\n    constructor(options, ...chain) {\n        super();\n        this.chain = chain;\n        this.options = ChainModifier_merge(ChainModifier.defaultOptions, options);\n        const optionsChain = this.options.chain || [];\n        for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n            modifierOptions = optionsChain[i];\n            if (!modifierOptions.type) {\n                continue;\n            }\n            ModifierClass = Modifiers_DataModifier.types[modifierOptions.type];\n            if (ModifierClass) {\n                chain.push(new ModifierClass(modifierOptions));\n            }\n        }\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Adds a configured modifier to the end of the modifier chain. Please note,\n     * that the modifier can be added multiple times.\n     *\n     * @param {DataModifier} modifier\n     * Configured modifier to add.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     */\n    add(modifier, eventDetail) {\n        this.emit({\n            type: 'addModifier',\n            detail: eventDetail,\n            modifier\n        });\n        this.chain.push(modifier);\n        this.emit({\n            type: 'addModifier',\n            detail: eventDetail,\n            modifier\n        });\n    }\n    /**\n     * Clears all modifiers from the chain.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     */\n    clear(eventDetail) {\n        this.emit({\n            type: 'clearChain',\n            detail: eventDetail\n        });\n        this.chain.length = 0;\n        this.emit({\n            type: 'afterClearChain',\n            detail: eventDetail\n        });\n    }\n    /**\n     * Applies several modifications to the table and returns a modified copy of\n     * the given table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Table to modify.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Promise<Highcharts.DataTable>}\n     * Table with `modified` property as a reference.\n     */\n    async modify(table, eventDetail) {\n        const modifiers = (this.options.reverse ?\n            this.chain.slice().reverse() :\n            this.chain.slice());\n        if (table.modified === table) {\n            table.modified = table.clone(false, eventDetail);\n        }\n        let modified = table;\n        for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n            try {\n                await modifiers[i].modify(modified, eventDetail);\n            }\n            catch (error) {\n                this.emit({\n                    type: 'error',\n                    detail: eventDetail,\n                    table\n                });\n                throw error;\n            }\n            modified = modified.modified;\n        }\n        table.modified = modified;\n        return table;\n    }\n    /**\n     * Applies partial modifications of a cell change to the property `modified`\n     * of the given modified table.\n     *\n     * *Note:* The `modified` property of the table gets replaced.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {string} columnName\n     * Column name of changed cell.\n     *\n     * @param {number|undefined} rowIndex\n     * Row index of changed cell.\n     *\n     * @param {Highcharts.DataTableCellType} cellValue\n     * Changed cell value.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n        const modifiers = (this.options.reverse ?\n            this.chain.reverse() :\n            this.chain);\n        if (modifiers.length) {\n            let clone = table.clone();\n            for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                clone = clone.modified;\n            }\n            table.modified = clone;\n        }\n        return table;\n    }\n    /**\n     * Applies partial modifications of column changes to the property\n     * `modified` of the given table.\n     *\n     * *Note:* The `modified` property of the table gets replaced.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {Highcharts.DataTableColumnCollection} columns\n     * Changed columns as a collection, where the keys are the column names.\n     *\n     * @param {number} [rowIndex=0]\n     * Index of the first changed row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyColumns(table, columns, rowIndex, eventDetail) {\n        const modifiers = (this.options.reverse ?\n            this.chain.reverse() :\n            this.chain.slice());\n        if (modifiers.length) {\n            let clone = table.clone();\n            for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                clone = clone.modified;\n            }\n            table.modified = clone;\n        }\n        return table;\n    }\n    /**\n     * Applies partial modifications of row changes to the property `modified`\n     * of the given table.\n     *\n     * *Note:* The `modified` property of the table gets replaced.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n     * Changed rows.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first changed row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyRows(table, rows, rowIndex, eventDetail) {\n        const modifiers = (this.options.reverse ?\n            this.chain.reverse() :\n            this.chain.slice());\n        if (modifiers.length) {\n            let clone = table.clone();\n            for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                clone = clone.modified;\n            }\n            table.modified = clone;\n        }\n        return table;\n    }\n    /**\n     * Applies several modifications to the table.\n     *\n     * *Note:* The `modified` property of the table gets replaced.\n     *\n     * @param {DataTable} table\n     * Table to modify.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {DataTable}\n     * Table as a reference.\n     *\n     * @emits ChainDataModifier#execute\n     * @emits ChainDataModifier#afterExecute\n     */\n    modifyTable(table, eventDetail) {\n        const chain = this;\n        chain.emit({\n            type: 'modify',\n            detail: eventDetail,\n            table\n        });\n        const modifiers = (chain.options.reverse ?\n            chain.chain.reverse() :\n            chain.chain.slice());\n        let modified = table.modified;\n        for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n            modifier = modifiers[i];\n            modified = modifier.modifyTable(modified, eventDetail).modified;\n        }\n        table.modified = modified;\n        chain.emit({\n            type: 'afterModify',\n            detail: eventDetail,\n            table\n        });\n        return table;\n    }\n    /**\n     * Removes a configured modifier from all positions in the modifier chain.\n     *\n     * @param {DataModifier} modifier\n     * Configured modifier to remove.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     */\n    remove(modifier, eventDetail) {\n        const modifiers = this.chain;\n        this.emit({\n            type: 'removeModifier',\n            detail: eventDetail,\n            modifier\n        });\n        modifiers.splice(modifiers.indexOf(modifier), 1);\n        this.emit({\n            type: 'afterRemoveModifier',\n            detail: eventDetail,\n            modifier\n        });\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Default option for the ordered modifier chain.\n */\nChainModifier.defaultOptions = {\n    type: 'Chain'\n};\nModifiers_DataModifier.registerType('Chain', ChainModifier);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Modifiers_ChainModifier = (ChainModifier);\n\n;// ./code/grid/es-modules/Data/Modifiers/SortModifier.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - Dawid Dragula\n *\n * */\n\n\n\n\nconst { merge: SortModifier_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Sort table rows according to values of a column.\n *\n */\nclass SortModifier extends Modifiers_DataModifier {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    static ascending(a, b) {\n        return ((a || 0) < (b || 0) ? -1 :\n            (a || 0) > (b || 0) ? 1 :\n                0);\n    }\n    static descending(a, b) {\n        return ((b || 0) < (a || 0) ? -1 :\n            (b || 0) > (a || 0) ? 1 :\n                0);\n    }\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of the range modifier.\n     *\n     * @param {Partial<RangeDataModifier.Options>} [options]\n     * Options to configure the range modifier.\n     */\n    constructor(options) {\n        super();\n        this.options = SortModifier_merge(SortModifier.defaultOptions, options);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Returns index and row for sort reference.\n     *\n     * @private\n     *\n     * @param {Highcharts.DataTable} table\n     * Table with rows to reference.\n     *\n     * @return {Array<SortModifier.RowReference>}\n     * Array of row references.\n     */\n    getRowReferences(table) {\n        const rows = table.getRows(), rowReferences = [];\n        for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n            rowReferences.push({\n                index: i,\n                row: rows[i]\n            });\n        }\n        return rowReferences;\n    }\n    /**\n     * Applies partial modifications of a cell change to the property `modified`\n     * of the given modified table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {string} columnName\n     * Column name of changed cell.\n     *\n     * @param {number|undefined} rowIndex\n     * Row index of changed cell.\n     *\n     * @param {Highcharts.DataTableCellType} cellValue\n     * Changed cell value.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n        const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n        if (columnName === orderByColumn) {\n            if (orderInColumn) {\n                table.modified.setCell(columnName, rowIndex, cellValue);\n                table.modified.setColumn(orderInColumn, modifier\n                    .modifyTable(new Data_DataTable({\n                    columns: table\n                        .getColumns([orderByColumn, orderInColumn])\n                }))\n                    .modified\n                    .getColumn(orderInColumn));\n            }\n            else {\n                modifier.modifyTable(table, eventDetail);\n            }\n        }\n        return table;\n    }\n    /**\n     * Applies partial modifications of column changes to the property\n     * `modified` of the given table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {Highcharts.DataTableColumnCollection} columns\n     * Changed columns as a collection, where the keys are the column names.\n     *\n     * @param {number} [rowIndex=0]\n     * Index of the first changed row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyColumns(table, columns, rowIndex, eventDetail) {\n        const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n        if (columnNames.indexOf(orderByColumn) > -1) {\n            if (orderInColumn &&\n                columns[columnNames[0]].length) {\n                table.modified.setColumns(columns, rowIndex);\n                table.modified.setColumn(orderInColumn, modifier\n                    .modifyTable(new Data_DataTable({\n                    columns: table\n                        .getColumns([orderByColumn, orderInColumn])\n                }))\n                    .modified\n                    .getColumn(orderInColumn));\n            }\n            else {\n                modifier.modifyTable(table, eventDetail);\n            }\n        }\n        return table;\n    }\n    /**\n     * Applies partial modifications of row changes to the property `modified`\n     * of the given table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n     * Changed rows.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first changed row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyRows(table, rows, rowIndex, eventDetail) {\n        const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n        if (orderInColumn &&\n            rows.length) {\n            table.modified.setRows(rows, rowIndex);\n            table.modified.setColumn(orderInColumn, modifier\n                .modifyTable(new Data_DataTable({\n                columns: table\n                    .getColumns([orderByColumn, orderInColumn])\n            }))\n                .modified\n                .getColumn(orderInColumn));\n        }\n        else {\n            modifier.modifyTable(table, eventDetail);\n        }\n        return table;\n    }\n    /**\n     * Sorts rows in the table.\n     *\n     * @param {DataTable} table\n     * Table to sort in.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyTable(table, eventDetail) {\n        const modifier = this;\n        modifier.emit({ type: 'modify', detail: eventDetail, table });\n        const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n            SortModifier.ascending :\n            SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n        if (orderByColumnIndex !== -1) {\n            rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n        }\n        if (orderInColumn) {\n            const column = [];\n            for (let i = 0; i < rowCount; ++i) {\n                column[rowReferences[i].index] = i;\n            }\n            modified.setColumns({ [orderInColumn]: column });\n        }\n        else {\n            const originalIndexes = [];\n            const rows = [];\n            let rowReference;\n            for (let i = 0; i < rowCount; ++i) {\n                rowReference = rowReferences[i];\n                originalIndexes.push(modified.getOriginalRowIndex(rowReference.index));\n                rows.push(rowReference.row);\n            }\n            modified.setRows(rows, 0);\n            modified.setOriginalRowIndexes(originalIndexes);\n        }\n        modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n        return table;\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Default options to group table rows.\n */\nSortModifier.defaultOptions = {\n    type: 'Sort',\n    direction: 'desc',\n    orderByColumn: 'y'\n};\nModifiers_DataModifier.registerType('Sort', SortModifier);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Modifiers_SortModifier = (SortModifier);\n\n;// ./code/grid/es-modules/Grid/Core/Querying/SortingController.js\n/* *\n *\n *  Grid Sorting Controller class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *\n * */\n\n\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class that manages one of the data grid querying types - sorting.\n */\nclass SortingController {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs the SortingController instance.\n     *\n     * @param grid\n     * The data grid instance.\n     */\n    constructor(grid) {\n        /**\n         * The flag that indicates if the data should be updated because of the\n         * change in the sorting options.\n         */\n        this.shouldBeUpdated = false;\n        this.grid = grid;\n    }\n    /* *\n    *\n    *  Functions\n    *\n    * */\n    /**\n     * Sets the sorting state. If the new sorting state is different than the\n     * current one, the `shouldBeUpdated` flag is set to `true`. If the\n     * same, the flag is set to `false`.\n     *\n     * @param order\n     * The sorting order.\n     *\n     * @param columnId\n     * The column ID to sort by.\n     */\n    setSorting(order, columnId) {\n        if (this.currentSorting?.columnId !== columnId ||\n            this.currentSorting?.order !== order) {\n            this.shouldBeUpdated = true;\n            this.currentSorting = {\n                columnId,\n                order\n            };\n        }\n        this.modifier = this.createModifier();\n    }\n    /**\n     * Returns the sorting options from the data grid options.\n     */\n    getSortingOptions() {\n        const grid = this.grid, { columnOptionsMap } = grid;\n        if (!columnOptionsMap) {\n            return { order: null };\n        }\n        const columnIDs = Object.keys(columnOptionsMap);\n        let foundOrder = null;\n        let foundColumnId;\n        for (let i = columnIDs.length - 1; i > -1; --i) {\n            const columnId = columnIDs[i];\n            const columnOptions = columnOptionsMap[columnId];\n            const order = columnOptions.sorting?.order;\n            if (order) {\n                if (foundColumnId) {\n                    // eslint-disable-next-line no-console\n                    console.warn('Grid: Only one column can be sorted at a time. ' +\n                        'Data will be sorted only by the last found column ' +\n                        `with the sorting order defined in the options: \"${foundColumnId}\".`);\n                    break;\n                }\n                foundOrder = order;\n                foundColumnId = columnId;\n            }\n        }\n        return {\n            columnId: foundColumnId,\n            order: foundOrder\n        };\n    }\n    /**\n     * Loads sorting options from the data grid options.\n     */\n    loadOptions() {\n        const stateFromOptions = this.getSortingOptions();\n        if (stateFromOptions.columnId !== this.initialSorting?.columnId ||\n            stateFromOptions.order !== this.initialSorting?.order) {\n            this.initialSorting = stateFromOptions;\n            this.setSorting(stateFromOptions.order, stateFromOptions.columnId);\n        }\n    }\n    /**\n     * Returns the sorting modifier based on the loaded sorting options.\n     */\n    createModifier() {\n        if (!this.currentSorting) {\n            return;\n        }\n        const { columnId, order } = this.currentSorting;\n        if (!order) {\n            return;\n        }\n        return new Modifiers_SortModifier({\n            orderByColumn: columnId,\n            direction: order\n        });\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Querying_SortingController = (SortingController);\n\n;// ./code/grid/es-modules/Grid/Core/Querying/QueryingController.js\n/* *\n *\n *  Grid Querying Controller class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *\n * */\n\n/* *\n *\n *  Imports\n *\n * */\n\n\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class that manage data modification of the visible data in the data grid.\n * It manages the modifiers that are applied to the data table.\n */\nclass QueryingController {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    constructor(grid) {\n        this.grid = grid;\n        this.sorting = new Querying_SortingController(grid);\n        /// this.filtering = new FilteringController(grid);\n    }\n    /* *\n    *\n    *  Functions\n    *\n    * */\n    /**\n     * Proceeds with the data modification if needed.\n     *\n     * @param force\n     * If the data should be modified even if the significant options are not\n     * changed.\n     */\n    async proceed(force = false) {\n        if (force ||\n            this.sorting.shouldBeUpdated // ||\n        // this.filtering.shouldBeUpdated\n        ) {\n            await this.modifyData();\n        }\n    }\n    /**\n     * Load all options needed to generate the modifiers.\n     */\n    loadOptions() {\n        this.sorting.loadOptions();\n    }\n    /**\n     * Check if the data table does not need to be modified.\n     */\n    willNotModify() {\n        return (!this.sorting.modifier\n        // && !this.filtering.modifier\n        );\n    }\n    /**\n     * Apply all modifiers to the data table.\n     */\n    async modifyData() {\n        const originalDataTable = this.grid.dataTable;\n        if (!originalDataTable) {\n            return;\n        }\n        const modifiers = [];\n        // TODO: Implement filtering\n        // if (this.filtering.modifier) {\n        //     modifiers.push(this.filtering.modifier);\n        // }\n        if (this.sorting.modifier) {\n            modifiers.push(this.sorting.modifier);\n        }\n        if (modifiers.length > 0) {\n            const chainModifier = new Modifiers_ChainModifier({}, ...modifiers);\n            const dataTableCopy = originalDataTable.clone();\n            await chainModifier.modify(dataTableCopy.modified);\n            this.grid.presentationTable = dataTableCopy.modified;\n        }\n        else {\n            this.grid.presentationTable = originalDataTable.modified;\n        }\n        this.sorting.shouldBeUpdated = false;\n        /// this.filtering.shouldBeUpdated = false;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Querying_QueryingController = (QueryingController);\n\n;// ./code/grid/es-modules/Grid/Core/Grid.js\n/* *\n *\n *  Highcharts Grid class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\n\n\n\n\n\n\n\n\nconst { makeHTMLElement: Grid_makeHTMLElement, setHTMLContent: Grid_setHTMLContent } = Core_GridUtils;\nconst { fireEvent: Grid_fireEvent, extend: Grid_extend, getStyle: Grid_getStyle, merge: Grid_merge, pick: Grid_pick } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * A base class for the Grid.\n */\nclass Grid {\n    // Implementation\n    static grid(renderTo, options, async) {\n        if (async) {\n            return new Promise((resolve) => {\n                void new Grid(renderTo, options, (grid) => {\n                    resolve(grid);\n                });\n            });\n        }\n        return new Grid(renderTo, options);\n    }\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Constructs a new Grid.\n     *\n     * @param renderTo\n     * The render target (container) of the Grid.\n     *\n     * @param options\n     * The options of the Grid.\n     *\n     * @param afterLoadCallback\n     * The callback that is called after the Grid is loaded.\n     */\n    constructor(renderTo, options, afterLoadCallback) {\n        /**\n         * The user options declared for the columns as an object of column ID to\n         * column options.\n         * @internal\n         */\n        this.columnOptionsMap = {};\n        /**\n         * The options that were declared by the user when creating the Grid\n         * or when updating it.\n         */\n        this.userOptions = {};\n        /**\n         * The initial height of the container. Can be 0 also if not set.\n         * @internal\n         */\n        this.initialContainerHeight = 0;\n        this.loadUserOptions(options);\n        this.querying = new Querying_QueryingController(this);\n        this.id = this.options?.id || Core_Utilities.uniqueKey();\n        this.initContainers(renderTo);\n        this.initAccessibility();\n        this.loadDataTable(this.options?.dataTable);\n        this.locale = this.options?.lang?.locale || (this.container?.closest('[lang]')?.lang);\n        this.time = new Shared_TimeBase(Grid_extend(this.options?.time, { locale: this.locale }), this.options?.lang);\n        this.querying.loadOptions();\n        void this.querying.proceed().then(() => {\n            this.renderViewport();\n            afterLoadCallback?.(this);\n        });\n        Grid.grids.push(this);\n    }\n    /* *\n     *\n     *  Methods\n     *\n     * */\n    /*\n     * Initializes the accessibility controller.\n     */\n    initAccessibility() {\n        if (!this.options?.accessibility?.enabled) {\n            return;\n        }\n        // Can be moved to a separate module in the future (if needed).\n        this.accessibility = new Accessibility_Accessibility(this);\n    }\n    /**\n     * Initializes the container of the Grid.\n     *\n     * @param renderTo\n     * The render target (html element or id) of the Grid.\n     *\n     */\n    initContainers(renderTo) {\n        const container = (typeof renderTo === 'string') ?\n            Grid_Core_Globals.win.document.getElementById(renderTo) : renderTo;\n        // Display an error if the renderTo is wrong\n        if (!container) {\n            // eslint-disable-next-line no-console\n            console.error(`\n                Rendering div not found. It is unable to find the HTML element\n                to render the Grid in.\n            `);\n            return;\n        }\n        this.initialContainerHeight = Grid_getStyle(container, 'height', true) || 0;\n        this.container = container;\n        this.container.innerHTML = HTML_AST.emptyHTML;\n        this.contentWrapper = Grid_makeHTMLElement('div', {\n            className: Grid_Core_Globals.getClassName('container')\n        }, this.container);\n    }\n    /**\n     * Loads the new user options to all the important fields (`userOptions`,\n     * `options` and `columnOptionsMap`).\n     *\n     * @param newOptions\n     * The options that were declared by the user.\n     *\n     * @param oneToOne\n     * When `false` (default), the existing column options will be merged with\n     * the ones that are currently defined in the user options. When `true`,\n     * the columns not defined in the new options will be removed.\n     */\n    loadUserOptions(newOptions, oneToOne = false) {\n        // Operate on a copy of the options argument\n        newOptions = Grid_merge(newOptions);\n        if (newOptions.columns) {\n            if (oneToOne) {\n                this.loadColumnOptionsOneToOne(newOptions.columns);\n            }\n            else {\n                this.loadColumnOptions(newOptions.columns);\n            }\n            delete newOptions.columns;\n        }\n        this.userOptions = Grid_merge(this.userOptions, newOptions);\n        this.options = Grid_merge(this.options ?? Core_Defaults.defaultOptions, this.userOptions);\n        // Generate column options map\n        const columnOptionsArray = this.options?.columns;\n        if (!columnOptionsArray) {\n            return;\n        }\n        const columnOptionsObj = {};\n        for (let i = 0, iEnd = columnOptionsArray?.length ?? 0; i < iEnd; ++i) {\n            columnOptionsObj[columnOptionsArray[i].id] = columnOptionsArray[i];\n        }\n        this.columnOptionsMap = columnOptionsObj;\n    }\n    /**\n     * Loads the new column options to the userOptions field.\n     *\n     * @param newColumnOptions\n     * The new column options that should be loaded.\n     *\n     * @param overwrite\n     * Whether to overwrite the existing column options with the new ones.\n     * Default is `false`.\n     */\n    loadColumnOptions(newColumnOptions, overwrite = false) {\n        if (!this.userOptions.columns) {\n            this.userOptions.columns = [];\n        }\n        const columnOptions = this.userOptions.columns;\n        for (let i = 0, iEnd = newColumnOptions.length; i < iEnd; ++i) {\n            const newOptions = newColumnOptions[i];\n            const indexInPrevOptions = columnOptions.findIndex((prev) => prev.id === newOptions.id);\n            // If the new column options contain only the id.\n            if (Object.keys(newOptions).length < 2) {\n                if (overwrite && indexInPrevOptions !== -1) {\n                    columnOptions.splice(indexInPrevOptions, 1);\n                }\n                continue;\n            }\n            if (indexInPrevOptions === -1) {\n                columnOptions.push(newOptions);\n            }\n            else if (overwrite) {\n                columnOptions[indexInPrevOptions] = newOptions;\n            }\n            else {\n                columnOptions[indexInPrevOptions] = Grid_merge(columnOptions[indexInPrevOptions], newOptions);\n            }\n        }\n        if (columnOptions.length < 1) {\n            delete this.userOptions.columns;\n        }\n    }\n    /**\n     * Loads the new column options to the userOptions field in a one-to-one\n     * manner. It means that all the columns that are not defined in the new\n     * options will be removed.\n     *\n     * @param newColumnOptions\n     * The new column options that should be loaded.\n     */\n    loadColumnOptionsOneToOne(newColumnOptions) {\n        const prevColumnOptions = this.userOptions.columns;\n        const columnOptions = [];\n        let prevOptions;\n        for (let i = 0, iEnd = newColumnOptions.length; i < iEnd; ++i) {\n            const newOptions = newColumnOptions[i];\n            const indexInPrevOptions = prevColumnOptions?.findIndex((prev) => prev.id === newOptions.id);\n            if (indexInPrevOptions !== void 0 && indexInPrevOptions !== -1) {\n                prevOptions = prevColumnOptions?.[indexInPrevOptions];\n            }\n            const resultOptions = Grid_merge(prevOptions ?? {}, newOptions);\n            if (Object.keys(resultOptions).length > 1) {\n                columnOptions.push(resultOptions);\n            }\n        }\n        this.userOptions.columns = columnOptions;\n    }\n    /**\n     * Updates the Grid with new options.\n     *\n     * @param options\n     * The options of the Grid that should be updated. If not provided,\n     * the update will be proceeded based on the `this.userOptions` property.\n     * The `column` options are merged using the `id` property as a key.\n     *\n     * @param render\n     * Whether to re-render the Grid after updating the options.\n     *\n     * @param oneToOne\n     * When `false` (default), the existing column options will be merged with\n     * the ones that are currently defined in the user options. When `true`,\n     * the columns not defined in the new options will be removed.\n     */\n    async update(options = {}, render = true, oneToOne = false) {\n        this.loadUserOptions(options, oneToOne);\n        let newDataTable = false;\n        if (!this.dataTable || options.dataTable) {\n            this.userOptions.dataTable = options.dataTable;\n            (this.options ?? {}).dataTable = options.dataTable;\n            this.loadDataTable(this.options?.dataTable);\n            newDataTable = true;\n        }\n        this.querying.loadOptions();\n        if (render) {\n            await this.querying.proceed(newDataTable);\n            this.renderViewport();\n        }\n    }\n    /**\n     * Updates the column of the Grid with new options.\n     *\n     * @param columnId\n     * The ID of the column that should be updated.\n     *\n     * @param options\n     * The options of the columns that should be updated. If null,\n     * column options for this column ID will be removed.\n     *\n     * @param render\n     * Whether to re-render the Grid after updating the columns.\n     *\n     * @param overwrite\n     * If true, the column options will be updated by replacing the existing\n     * options with the new ones instead of merging them.\n     */\n    async updateColumn(columnId, options, render = true, overwrite = false) {\n        this.loadColumnOptions([{\n                id: columnId,\n                ...options\n            }], overwrite);\n        await this.update(void 0, render);\n    }\n    /**\n     * Hovers the row with the provided index. It removes the hover effect from\n     * the previously hovered row.\n     *\n     * @param rowIndex\n     * The index of the row.\n     */\n    hoverRow(rowIndex) {\n        const rows = this.viewport?.rows;\n        if (!rows) {\n            return;\n        }\n        const firstRowIndex = this.viewport?.rows[0]?.index ?? 0;\n        if (this.hoveredRowIndex !== void 0) {\n            rows[this.hoveredRowIndex - firstRowIndex]?.setHoveredState(false);\n        }\n        if (rowIndex !== void 0) {\n            rows[rowIndex - firstRowIndex]?.setHoveredState(true);\n        }\n        this.hoveredRowIndex = rowIndex;\n    }\n    /**\n     * Hovers the column with the provided ID. It removes the hover effect from\n     * the previously hovered column.\n     *\n     * @param columnId\n     * The ID of the column.\n     */\n    hoverColumn(columnId) {\n        const vp = this.viewport;\n        if (!vp) {\n            return;\n        }\n        if (this.hoveredColumnId) {\n            vp.getColumn(this.hoveredColumnId)?.setHoveredState(false);\n        }\n        if (columnId) {\n            vp.getColumn(columnId)?.setHoveredState(true);\n        }\n        this.hoveredColumnId = columnId;\n    }\n    /**\n     * Sets the sync state to the row with the provided index. It removes the\n     * synced effect from the previously synced row.\n     *\n     * @param rowIndex\n     * The index of the row.\n     */\n    syncRow(rowIndex) {\n        const rows = this.viewport?.rows;\n        if (!rows) {\n            return;\n        }\n        const firstRowIndex = this.viewport?.rows[0]?.index ?? 0;\n        if (this.syncedRowIndex !== void 0) {\n            rows[this.syncedRowIndex - firstRowIndex]?.setSyncedState(false);\n        }\n        if (rowIndex !== void 0) {\n            rows[rowIndex - firstRowIndex]?.setSyncedState(true);\n        }\n        this.syncedRowIndex = rowIndex;\n    }\n    /**\n     * Sets the sync state to the column with the provided ID. It removes the\n     * synced effect from the previously synced column.\n     *\n     * @param columnId\n     * The ID of the column.\n     */\n    syncColumn(columnId) {\n        const vp = this.viewport;\n        if (!vp) {\n            return;\n        }\n        if (this.syncedColumnId) {\n            vp.getColumn(this.syncedColumnId)?.setSyncedState(false);\n        }\n        if (columnId) {\n            vp.getColumn(columnId)?.setSyncedState(true);\n        }\n        this.syncedColumnId = columnId;\n    }\n    /**\n     * Render caption above the grid.\n     * @internal\n     */\n    renderCaption() {\n        const captionOptions = this.options?.caption;\n        const captionText = captionOptions?.text;\n        if (!captionText) {\n            return;\n        }\n        // Create a caption element.\n        this.captionElement = Grid_makeHTMLElement('div', {\n            className: Grid_Core_Globals.getClassName('captionElement'),\n            id: this.id + '-caption'\n        }, this.contentWrapper);\n        // Render the caption element content.\n        Grid_setHTMLContent(this.captionElement, captionText);\n        if (captionOptions.className) {\n            this.captionElement.classList.add(...captionOptions.className.split(/\\s+/g));\n        }\n    }\n    /**\n     * Render description under the grid.\n     *\n     * @internal\n     */\n    renderDescription() {\n        const descriptionOptions = this.options?.description;\n        const descriptionText = descriptionOptions?.text;\n        if (!descriptionText) {\n            return;\n        }\n        // Create a description element.\n        this.descriptionElement = Grid_makeHTMLElement('div', {\n            className: Grid_Core_Globals.getClassName('descriptionElement'),\n            id: this.id + '-description'\n        }, this.contentWrapper);\n        // Render the description element content.\n        Grid_setHTMLContent(this.descriptionElement, descriptionText);\n        if (descriptionOptions.className) {\n            this.descriptionElement.classList.add(...descriptionOptions.className.split(/\\s+/g));\n        }\n    }\n    /**\n     * Resets the content wrapper of the Grid. It clears the content and\n     * resets the class names.\n     * @internal\n     */\n    resetContentWrapper() {\n        if (!this.contentWrapper) {\n            return;\n        }\n        this.contentWrapper.innerHTML = HTML_AST.emptyHTML;\n        this.contentWrapper.className =\n            Grid_Core_Globals.getClassName('container') + ' ' +\n                this.options?.rendering?.theme || '';\n    }\n    /**\n     * Renders the viewport of the Grid. If the Grid is already\n     * rendered, it will be destroyed and re-rendered with the new data.\n     * @internal\n     */\n    renderViewport() {\n        const viewportMeta = this.viewport?.getStateMeta();\n        this.enabledColumns = this.getEnabledColumnIDs();\n        this.credits?.destroy();\n        this.viewport?.destroy();\n        delete this.viewport;\n        this.resetContentWrapper();\n        this.renderCaption();\n        if (this.enabledColumns.length > 0) {\n            this.viewport = this.renderTable();\n            if (viewportMeta && this.viewport) {\n                this.viewport.applyStateMeta(viewportMeta);\n            }\n        }\n        else {\n            this.renderNoData();\n        }\n        this.renderDescription();\n        this.accessibility?.setA11yOptions();\n        if (this.viewport?.virtualRows) {\n            this.viewport.reflow();\n        }\n        Grid_fireEvent(this, 'afterRenderViewport');\n    }\n    /**\n     * Renders the table (viewport) of the Grid.\n     *\n     * @returns\n     * The newly rendered table (viewport) of the Grid.\n     */\n    renderTable() {\n        this.tableElement = Grid_makeHTMLElement('table', {\n            className: Grid_Core_Globals.getClassName('tableElement')\n        }, this.contentWrapper);\n        return new Table_Table(this, this.tableElement);\n    }\n    /**\n     * Renders a message that there is no data to display.\n     */\n    renderNoData() {\n        Grid_makeHTMLElement('div', {\n            className: Grid_Core_Globals.getClassName('noData'),\n            innerText: this.options?.lang?.noData\n        }, this.contentWrapper);\n    }\n    /**\n     * Returns the array of IDs of columns that should be displayed in the data\n     * grid, in the correct order.\n     */\n    getEnabledColumnIDs() {\n        const { columnOptionsMap } = this;\n        const header = this.options?.header;\n        const headerColumns = this.getColumnIds(header || [], false);\n        const columnsIncluded = this.options?.rendering?.columns?.included || (headerColumns && headerColumns.length > 0 ?\n            headerColumns : this.dataTable?.getColumnNames());\n        if (!columnsIncluded?.length) {\n            return [];\n        }\n        if (!columnOptionsMap) {\n            return columnsIncluded;\n        }\n        let columnName;\n        const result = [];\n        for (let i = 0, iEnd = columnsIncluded.length; i < iEnd; ++i) {\n            columnName = columnsIncluded[i];\n            if (columnOptionsMap?.[columnName]?.enabled !== false) {\n                result.push(columnName);\n            }\n        }\n        return result;\n    }\n    loadDataTable(tableOptions) {\n        // If the table is passed as a reference, it should be used instead of\n        // creating a new one.\n        if (tableOptions?.id) {\n            this.dataTable = tableOptions;\n            this.presentationTable = this.dataTable.modified;\n            return;\n        }\n        this.dataTable = this.presentationTable =\n            new Data_DataTable(tableOptions);\n    }\n    /**\n     * Extracts all references to columnIds on all levels below defined level\n     * in the settings.header structure.\n     *\n     * @param columnsTree\n     * Structure that we start calculation\n     *\n     * @param [onlyEnabledColumns=true]\n     * Extract all columns from header or columns filtered by enabled param\n     * @returns\n     */\n    getColumnIds(columnsTree, onlyEnabledColumns = true) {\n        let columnIds = [];\n        const { enabledColumns } = this;\n        for (const column of columnsTree) {\n            const columnId = typeof column === 'string' ? column : column.columnId;\n            if (columnId &&\n                (!onlyEnabledColumns || (enabledColumns?.includes(columnId)))) {\n                columnIds.push(columnId);\n            }\n            if (typeof column !== 'string' && column.columns) {\n                columnIds = columnIds.concat(this.getColumnIds(column.columns, onlyEnabledColumns));\n            }\n        }\n        return columnIds;\n    }\n    /**\n     * Destroys the Grid.\n     */\n    destroy() {\n        const dgIndex = Grid.grids.findIndex((dg) => dg === this);\n        this.viewport?.destroy();\n        if (this.container) {\n            this.container.innerHTML = HTML_AST.emptyHTML;\n            this.container.classList.remove(Grid_Core_Globals.getClassName('container'));\n        }\n        // Clear all properties\n        Object.keys(this).forEach((key) => {\n            delete this[key];\n        });\n        Grid.grids.splice(dgIndex, 1);\n    }\n    /**\n     * Grey out the Grid and show a loading indicator.\n     *\n     * @param message\n     * The message to display in the loading indicator.\n     */\n    showLoading(message) {\n        if (this.loadingWrapper) {\n            return;\n        }\n        // Create loading wrapper.\n        this.loadingWrapper = Grid_makeHTMLElement('div', {\n            className: Grid_Core_Globals.getClassName('loadingWrapper')\n        }, this.contentWrapper);\n        // Create spinner element.\n        Grid_makeHTMLElement('div', {\n            className: Grid_Core_Globals.getClassName('loadingSpinner')\n        }, this.loadingWrapper);\n        // Create loading message span element.\n        const loadingSpan = Grid_makeHTMLElement('span', {\n            className: Grid_Core_Globals.getClassName('loadingMessage')\n        }, this.loadingWrapper);\n        Grid_setHTMLContent(loadingSpan, Grid_pick(message, this.options?.lang?.loading, ''));\n    }\n    /**\n     * Removes the loading indicator.\n     */\n    hideLoading() {\n        this.loadingWrapper?.remove();\n        delete this.loadingWrapper;\n    }\n    /**\n     * Returns the current grid data as a JSON string.\n     *\n     * @return\n     * JSON representation of the data\n     */\n    getData() {\n        const json = this.viewport?.dataTable.modified.columns;\n        if (!this.enabledColumns || !json) {\n            return '{}';\n        }\n        for (const key of Object.keys(json)) {\n            if (this.enabledColumns.indexOf(key) === -1) {\n                delete json[key];\n            }\n        }\n        return JSON.stringify(json);\n    }\n    /**\n     * Returns the current grid data as a JSON string.\n     *\n     * @return\n     * JSON representation of the data\n     *\n     * @deprecated\n     */\n    getJSON() {\n        return this.getData();\n    }\n    /**\n     * Returns the current Grid options.\n     *\n     * @param onlyUserOptions\n     * Whether to return only the user options or all options (user options\n     * merged with the default ones). Default is `true`.\n     *\n     * @returns\n     * Grid options.\n     */\n    getOptions(onlyUserOptions = true) {\n        const options = onlyUserOptions ? Grid_merge(this.userOptions) : Grid_merge(this.options);\n        if (options.dataTable?.id) {\n            options.dataTable = {\n                columns: options.dataTable.columns\n            };\n        }\n        return options;\n    }\n    /**\n     * Returns the current Grid options.\n     *\n     * @param onlyUserOptions\n     * Whether to return only the user options or all options (user options\n     * merged with the default ones). Default is `true`.\n     *\n     * @returns\n     * Options as a JSON string\n     *\n     * @deprecated\n     */\n    getOptionsJSON(onlyUserOptions = true) {\n        return JSON.stringify(this.getOptions(onlyUserOptions));\n    }\n}\n/* *\n*\n*  Properties\n*\n* */\n/**\n * An array containing the current Grid objects in the page.\n * @internal\n */\nGrid.grids = [];\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Core_Grid = (Grid);\n\n;// ./code/grid/es-modules/Data/DataPoolDefaults.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *\n * */\n\n/* *\n *\n *  API Options\n *\n * */\nconst DataPoolDefaults = {\n    connectors: []\n};\n/* *\n *\n *  Export Defaults\n *\n * */\n/* harmony default export */ const Data_DataPoolDefaults = (DataPoolDefaults);\n\n;// ./code/grid/es-modules/Data/DataPool.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *\n * */\n\n\n\n\n/* *\n *\n *  Class\n *\n * */\n/**\n * Data pool to load connectors on-demand.\n *\n * @class\n * @name Data.DataPool\n *\n * @param {Data.DataPoolOptions} options\n * Pool options with all connectors.\n */\nclass DataPool {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(options = Data_DataPoolDefaults) {\n        options.connectors = (options.connectors || []);\n        this.connectors = {};\n        this.options = options;\n        this.waiting = {};\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Emits an event on this data pool to all registered callbacks of the given\n     * event.\n     * @private\n     *\n     * @param {DataTable.Event} e\n     * Event object with event information.\n     */\n    emit(e) {\n        Core_Utilities.fireEvent(this, e.type, e);\n    }\n    /**\n     * Loads the connector.\n     *\n     * @function Data.DataPool#getConnector\n     *\n     * @param {string} connectorId\n     * ID of the connector.\n     *\n     * @return {Promise<Data.DataConnector>}\n     * Returns the connector.\n     */\n    getConnector(connectorId) {\n        const connector = this.connectors[connectorId];\n        // Already loaded\n        if (connector) {\n            return Promise.resolve(connector);\n        }\n        let waitingList = this.waiting[connectorId];\n        // Start loading\n        if (!waitingList) {\n            waitingList = this.waiting[connectorId] = [];\n            const connectorOptions = this.getConnectorOptions(connectorId);\n            if (!connectorOptions) {\n                throw new Error(`Connector '${connectorId}' not found.`);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this\n                .loadConnector(connectorOptions)\n                .then((connector) => {\n                delete this.waiting[connectorId];\n                for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                    waitingList[i][0](connector);\n                }\n            })['catch']((error) => {\n                delete this.waiting[connectorId];\n                for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                    waitingList[i][1](error);\n                }\n            });\n        }\n        // Add request to waiting list\n        return new Promise((resolve, reject) => {\n            waitingList.push([resolve, reject]);\n        });\n    }\n    /**\n     * Returns the IDs of all connectors.\n     *\n     * @private\n     *\n     * @return {Array<string>}\n     * Names of all connectors.\n     */\n    getConnectorIds() {\n        const connectors = this.options.connectors, connectorIds = [];\n        for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n            connectorIds.push(connectors[i].id);\n        }\n        return connectorIds;\n    }\n    /**\n     * Loads the options of the connector.\n     *\n     * @private\n     *\n     * @param {string} connectorId\n     * ID of the connector.\n     *\n     * @return {DataPoolConnectorOptions|undefined}\n     * Returns the options of the connector, or `undefined` if not found.\n     */\n    getConnectorOptions(connectorId) {\n        const connectors = this.options.connectors;\n        for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n            if (connectors[i].id === connectorId) {\n                return connectors[i];\n            }\n        }\n    }\n    /**\n     * Loads the connector table.\n     *\n     * @function Data.DataPool#getConnectorTable\n     *\n     * @param {string} connectorId\n     * ID of the connector.\n     *\n     * @return {Promise<Data.DataTable>}\n     * Returns the connector table.\n     */\n    getConnectorTable(connectorId) {\n        return this\n            .getConnector(connectorId)\n            .then((connector) => connector.table);\n    }\n    /**\n     * Tests whether the connector has never been requested.\n     *\n     * @param {string} connectorId\n     * Name of the connector.\n     *\n     * @return {boolean}\n     * Returns `true`, if the connector has never been requested, otherwise\n     * `false`.\n     */\n    isNewConnector(connectorId) {\n        return !this.connectors[connectorId];\n    }\n    /**\n     * Creates and loads the connector.\n     *\n     * @private\n     *\n     * @param {Data.DataPoolConnectorOptions} options\n     * Options of connector.\n     *\n     * @return {Promise<Data.DataConnector>}\n     * Returns the connector.\n     */\n    loadConnector(options) {\n        return new Promise((resolve, reject) => {\n            this.emit({\n                type: 'load',\n                options\n            });\n            const ConnectorClass = Connectors_DataConnector.types[options.type];\n            if (!ConnectorClass) {\n                throw new Error(`Connector type not found. (${options.type})`);\n            }\n            const connector = new ConnectorClass(options.options);\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            connector\n                .load()\n                .then((connector) => {\n                this.connectors[options.id] = connector;\n                this.emit({\n                    type: 'afterLoad',\n                    options\n                });\n                resolve(connector);\n            })['catch'](reject);\n        });\n    }\n    /**\n     * Registers a callback for a specific event.\n     *\n     * @function Highcharts.DataPool#on\n     *\n     * @param {string} type\n     * Event type as a string.\n     *\n     * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n     * Function to register for an event callback.\n     *\n     * @return {Function}\n     * Function to unregister callback from the event.\n     */\n    on(type, callback) {\n        return Core_Utilities.addEvent(this, type, callback);\n    }\n    /**\n     * Sets connector options under the specified `options.id`.\n     *\n     * @param {Data.DataPoolConnectorOptions} options\n     * Connector options to set.\n     */\n    setConnectorOptions(options) {\n        const connectors = this.options.connectors, instances = this.connectors;\n        this.emit({\n            type: 'setConnectorOptions',\n            options\n        });\n        for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n            if (connectors[i].id === options.id) {\n                connectors.splice(i, 1);\n                break;\n            }\n        }\n        if (instances[options.id]) {\n            instances[options.id].stopPolling();\n            delete instances[options.id];\n        }\n        connectors.push(options);\n        this.emit({\n            type: 'afterSetConnectorOptions',\n            options\n        });\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Semantic version string of the DataPool class.\n * @internal\n */\nDataPool.version = '1.0.0';\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Data_DataPool = (DataPool);\n\n;// ./code/grid/es-modules/Grid/Core/Credits.js\n/* *\n *\n *  Grid Credits class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Dawid Dragula\n *  - Sebastian Bochan\n *\n * */\n\n\n\nconst { makeHTMLElement: Credits_makeHTMLElement } = Core_GridUtils;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Represents a credits in the data grid.\n */\nclass Credits {\n    /* *\n    *\n    *  Constructor\n    *\n    * */\n    /**\n     * Construct the credits.\n     *\n     * @param grid\n     * The Grid instance which the credits belong to.\n     *\n     * @param options\n     * Options for the credits label. Predefined if not provided.\n     *\n     */\n    constructor(grid, options) {\n        this.grid = grid;\n        this.containerElement = Credits_makeHTMLElement('div', {\n            className: Grid_Core_Globals.getClassName('creditsContainer')\n        });\n        this.textElement = Credits_makeHTMLElement('a', {\n            className: Grid_Core_Globals.getClassName('creditsText')\n        }, this.containerElement);\n        this.textElement.setAttribute('target', '_top');\n        this.options = options ?? Credits.defaultOptions;\n        this.render();\n    }\n    /* *\n    *\n    *  Methods\n    *\n    * */\n    /**\n     * Render the credits. If the credits are disabled, they will be removed\n     * from the container. If also reflows the viewport dimensions.\n     */\n    render() {\n        const { text, href } = this.options;\n        this.containerElement.remove();\n        if (text && href) {\n            this.textElement.innerHTML = text;\n            this.textElement.setAttribute('href', href || '');\n        }\n        this.grid.contentWrapper?.appendChild(this.containerElement);\n        this.grid.viewport?.reflow();\n    }\n    /**\n     * Get the height of the credits container.\n     */\n    getHeight() {\n        return this.containerElement.offsetHeight;\n    }\n    /**\n     * Destroy the credits. The credits will be removed from the container and\n     * the reference to the credits will be deleted from the Grid instance\n     * it belongs to.\n     */\n    destroy() {\n        this.containerElement.remove();\n    }\n}\n/* *\n*\n*  Static Properties\n*\n* */\n/**\n * Default options of the credits.\n */\nCredits.defaultOptions = {\n    enabled: true,\n    text: '<img src=\"https://wp-assets.highcharts.com/www-highcharts-com/blog/wp-content/uploads/2021/05/19085042/favicon-1.ico\">',\n    href: 'https://www.highcharts.com',\n    position: 'bottom'\n};\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Core_Credits = (Credits);\n\n;// ./code/grid/es-modules/Grid/Lite/Credits/CreditsLiteComposition.js\n/* *\n *\n *  Grid Credits class\n *\n *  (c) 2020-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sebastian Bochan\n *\n * */\n\n\n\nconst { addEvent: CreditsLiteComposition_addEvent, pushUnique: CreditsLiteComposition_pushUnique } = Core_Utilities;\nvar CreditsLiteComposition;\n(function (CreditsLiteComposition) {\n    /**\n     * Extends the grid classes with credits.\n     *\n     * @param GridClass\n     * The class to extend.\n     *\n     */\n    function compose(GridClass) {\n        if (!CreditsLiteComposition_pushUnique(Core_Globals.composed, 'CreditsLite')) {\n            return;\n        }\n        CreditsLiteComposition_addEvent(GridClass, 'afterRenderViewport', initCredits);\n    }\n    CreditsLiteComposition.compose = compose;\n    /**\n     * Callback function called before table initialization.\n     */\n    function initCredits() {\n        return new Core_Credits(this);\n    }\n})(CreditsLiteComposition || (CreditsLiteComposition = {}));\n/* harmony default export */ const Credits_CreditsLiteComposition = (CreditsLiteComposition);\n\n;// ./code/grid/es-modules/Data/Converters/CSVConverter.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Torstein Hønsi\n *  - Christer Vasseng\n *  - Gøran Slettemark\n *  - Sophie Bremer\n *\n * */\n\n\n\nconst { merge: CSVConverter_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Handles parsing and transforming CSV to a table.\n *\n * @private\n */\nclass CSVConverter extends Converters_DataConverter {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of the CSV parser.\n     *\n     * @param {CSVConverter.UserOptions} [options]\n     * Options for the CSV parser.\n     */\n    constructor(options) {\n        const mergedOptions = CSVConverter_merge(CSVConverter.defaultOptions, options);\n        super(mergedOptions);\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        this.columns = [];\n        this.headers = [];\n        this.dataTypes = [];\n        this.options = mergedOptions;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Creates a CSV string from the datatable on the connector instance.\n     *\n     * @param {DataConnector} connector\n     * Connector instance to export from.\n     *\n     * @param {CSVConverter.Options} [options]\n     * Options used for the export.\n     *\n     * @return {string}\n     * CSV string from the connector table.\n     */\n    export(connector, options = this.options) {\n        const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n        let { decimalPoint, itemDelimiter } = options;\n        if (!decimalPoint) {\n            decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                (1.1).toLocaleString()[1] :\n                '.');\n        }\n        if (!itemDelimiter) {\n            itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n        }\n        const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n        const rowArray = [];\n        // Add the names as the first row if they should be exported\n        if (exportNames) {\n            csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n        }\n        for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n            const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n            const columnMeta = connector.whatIs(columnName);\n            let columnDataType;\n            if (columnMeta) {\n                columnDataType = columnMeta.dataType;\n            }\n            for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                let cellValue = column[rowIndex];\n                if (!rowArray[rowIndex]) {\n                    rowArray[rowIndex] = [];\n                }\n                // Prefer datatype from metadata\n                if (columnDataType === 'string') {\n                    cellValue = '\"' + cellValue + '\"';\n                }\n                else if (typeof cellValue === 'number') {\n                    cellValue = String(cellValue).replace('.', decimalPoint);\n                }\n                else if (typeof cellValue === 'string') {\n                    cellValue = `\"${cellValue}\"`;\n                }\n                rowArray[rowIndex][columnIndex] = cellValue;\n                // On the final column, push the row to the CSV\n                if (columnIndex === columnsCount - 1) {\n                    // Trim repeated undefined values starting at the end\n                    // Currently, we export the first \"comma\" even if the\n                    // second value is undefined\n                    let i = columnIndex;\n                    while (rowArray[rowIndex].length > 2) {\n                        const cellVal = rowArray[rowIndex][i];\n                        if (cellVal !== void 0) {\n                            break;\n                        }\n                        rowArray[rowIndex].pop();\n                        i--;\n                    }\n                    csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                }\n            }\n        }\n        return csvRows.join(lineDelimiter);\n    }\n    /**\n     * Initiates parsing of CSV\n     *\n     * @param {CSVConverter.UserOptions}[options]\n     * Options for the parser\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits CSVDataParser#parse\n     * @emits CSVDataParser#afterParse\n     */\n    parse(options, eventDetail) {\n        const converter = this, dataTypes = converter.dataTypes, parserOptions = CSVConverter_merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n        let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n        converter.columns = [];\n        converter.emit({\n            type: 'parse',\n            columns: converter.columns,\n            detail: eventDetail,\n            headers: converter.headers\n        });\n        if (csv && beforeParse) {\n            csv = beforeParse(csv);\n        }\n        if (csv) {\n            lines = csv\n                .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                .split(lineDelimiter || '\\n');\n            if (!startRow || startRow < 0) {\n                startRow = 0;\n            }\n            if (!endRow || endRow >= lines.length) {\n                endRow = lines.length - 1;\n            }\n            if (!itemDelimiter) {\n                converter.guessedItemDelimiter =\n                    converter.guessDelimiter(lines);\n            }\n            // If the first row contain names, add them to the\n            // headers array and skip the row.\n            if (firstRowAsNames) {\n                const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                // Remove \"\"s from the headers\n                for (let i = 0; i < headers.length; i++) {\n                    headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                }\n                converter.headers = headers;\n                startRow++;\n            }\n            let offset = 0;\n            for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                if (lines[rowIt][0] === '#') {\n                    offset++;\n                }\n                else {\n                    converter\n                        .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                }\n            }\n            if (dataTypes.length &&\n                dataTypes[0].length &&\n                dataTypes[0][1] === 'date' && // Format is a string date\n                !converter.options.dateFormat) {\n                converter.deduceDateFormat(converter.columns[0], null, true);\n            }\n            // Guess types.\n            for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                column = converter.columns[i];\n                for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                    if (column[j] && typeof column[j] === 'string') {\n                        let cellValue = converter.asGuessedType(column[j]);\n                        if (cellValue instanceof Date) {\n                            cellValue = cellValue.getTime();\n                        }\n                        converter.columns[i][j] = cellValue;\n                    }\n                }\n            }\n        }\n        converter.emit({\n            type: 'afterParse',\n            columns: converter.columns,\n            detail: eventDetail,\n            headers: converter.headers\n        });\n    }\n    /**\n     * Internal method that parses a single CSV row\n     */\n    parseCSVRow(columnStr, rowNumber) {\n        const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n            converter.guessedItemDelimiter);\n        let { decimalPoint } = converter.options;\n        if (!decimalPoint || decimalPoint === itemDelimiter) {\n            decimalPoint = converter.guessedDecimalPoint || '.';\n        }\n        let i = 0, c = '', token = '', actualColumn = 0, column = 0;\n        const read = (j) => {\n            c = columnStr[j];\n        };\n        const pushType = (type) => {\n            if (dataTypes.length < column + 1) {\n                dataTypes.push([type]);\n            }\n            if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                dataTypes[column].push(type);\n            }\n        };\n        const push = () => {\n            if (startColumn > actualColumn || actualColumn > endColumn) {\n                // Skip this column, but increment the column count (#7272)\n                ++actualColumn;\n                token = '';\n                return;\n            }\n            // Save the type of the token.\n            if (typeof token === 'string') {\n                if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                    token = parseFloat(token);\n                    pushType('number');\n                }\n                else if (!isNaN(Date.parse(token))) {\n                    token = token.replace(/\\//g, '-');\n                    pushType('date');\n                }\n                else {\n                    pushType('string');\n                }\n            }\n            else {\n                pushType('number');\n            }\n            if (columns.length < column + 1) {\n                columns.push([]);\n            }\n            // Try to apply the decimal point, and check if the token then is a\n            // number. If not, reapply the initial value\n            if (typeof token !== 'number' &&\n                converter.guessType(token) !== 'number' &&\n                decimalPoint) {\n                const initialValue = token;\n                token = token.replace(decimalPoint, '.');\n                if (converter.guessType(token) !== 'number') {\n                    token = initialValue;\n                }\n            }\n            columns[column][rowNumber] = token;\n            token = '';\n            ++column;\n            ++actualColumn;\n        };\n        if (!columnStr.trim().length) {\n            return;\n        }\n        if (columnStr.trim()[0] === '#') {\n            return;\n        }\n        for (; i < columnStr.length; i++) {\n            read(i);\n            if (c === '#') {\n                // If there are hexvalues remaining (#13283)\n                if (!/^#[A-F\\d]{3,3}|[A-F\\d]{6,6}/i.test(columnStr.substring(i))) {\n                    // The rest of the row is a comment\n                    push();\n                    return;\n                }\n            }\n            // Quoted string\n            if (c === '\"') {\n                read(++i);\n                while (i < columnStr.length) {\n                    if (c === '\"') {\n                        break;\n                    }\n                    token += c;\n                    read(++i);\n                }\n            }\n            else if (c === itemDelimiter) {\n                push();\n                // Actual column data\n            }\n            else {\n                token += c;\n            }\n        }\n        push();\n    }\n    /**\n     * Internal method that guesses the delimiter from the first\n     * 13 lines of the CSV\n     * @param {Array<string>} lines\n     * The CSV, split into lines\n     */\n    guessDelimiter(lines) {\n        let points = 0, commas = 0, guessed;\n        const potDelimiters = {\n            ',': 0,\n            ';': 0,\n            '\\t': 0\n        }, linesCount = lines.length;\n        for (let i = 0; i < linesCount; i++) {\n            let inStr = false, c, cn, cl, token = '';\n            // We should be able to detect dateformats within 13 rows\n            if (i > 13) {\n                break;\n            }\n            const columnStr = lines[i];\n            for (let j = 0; j < columnStr.length; j++) {\n                c = columnStr[j];\n                cn = columnStr[j + 1];\n                cl = columnStr[j - 1];\n                if (c === '#') {\n                    // Skip the rest of the line - it's a comment\n                    break;\n                }\n                if (c === '\"') {\n                    if (inStr) {\n                        if (cl !== '\"' && cn !== '\"') {\n                            while (cn === ' ' && j < columnStr.length) {\n                                cn = columnStr[++j];\n                            }\n                            // After parsing a string, the next non-blank\n                            // should be a delimiter if the CSV is properly\n                            // formed.\n                            if (typeof potDelimiters[cn] !== 'undefined') {\n                                potDelimiters[cn]++;\n                            }\n                            inStr = false;\n                        }\n                    }\n                    else {\n                        inStr = true;\n                    }\n                }\n                else if (typeof potDelimiters[c] !== 'undefined') {\n                    token = token.trim();\n                    if (!isNaN(Date.parse(token))) {\n                        potDelimiters[c]++;\n                    }\n                    else if (isNaN(Number(token)) ||\n                        !isFinite(Number(token))) {\n                        potDelimiters[c]++;\n                    }\n                    token = '';\n                }\n                else {\n                    token += c;\n                }\n                if (c === ',') {\n                    commas++;\n                }\n                if (c === '.') {\n                    points++;\n                }\n            }\n        }\n        // Count the potential delimiters.\n        // This could be improved by checking if the number of delimiters\n        // equals the number of columns - 1\n        if (potDelimiters[';'] > potDelimiters[',']) {\n            guessed = ';';\n        }\n        else if (potDelimiters[','] > potDelimiters[';']) {\n            guessed = ',';\n        }\n        else {\n            // No good guess could be made..\n            guessed = ',';\n        }\n        // Try to deduce the decimal point if it's not explicitly set.\n        // If both commas or points is > 0 there is likely an issue\n        if (points > commas) {\n            this.guessedDecimalPoint = '.';\n        }\n        else {\n            this.guessedDecimalPoint = ',';\n        }\n        return guessed;\n    }\n    /**\n     * Handles converting the parsed data to a table.\n     *\n     * @return {DataTable}\n     * Table from the parsed CSV.\n     */\n    getTable() {\n        return Converters_DataConverter.getTableFromColumns(this.columns, this.headers);\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Default options\n */\nCSVConverter.defaultOptions = {\n    ...Converters_DataConverter.defaultOptions,\n    lineDelimiter: '\\n'\n};\nConverters_DataConverter.registerType('CSV', CSVConverter);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Converters_CSVConverter = (CSVConverter);\n\n;// ./code/grid/es-modules/Data/Connectors/CSVConnector.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Torstein Hønsi\n *  - Christer Vasseng\n *  - Gøran Slettemark\n *  - Sophie Bremer\n *\n * */\n\n\n\n\nconst { merge: CSVConnector_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class that handles creating a DataConnector from CSV\n *\n * @private\n */\nclass CSVConnector extends Connectors_DataConnector {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of CSVConnector.\n     *\n     * @param {CSVConnector.UserOptions} [options]\n     * Options for the connector and converter.\n     */\n    constructor(options) {\n        const mergedOptions = CSVConnector_merge(CSVConnector.defaultOptions, options);\n        super(mergedOptions);\n        this.converter = new Converters_CSVConverter(mergedOptions);\n        this.options = mergedOptions;\n        if (mergedOptions.enablePolling) {\n            this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n        }\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Initiates the loading of the CSV source to the connector\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits CSVConnector#load\n     * @emits CSVConnector#afterLoad\n     */\n    load(eventDetail) {\n        const connector = this, converter = connector.converter, table = connector.table, { csv, csvURL, dataModifier } = connector.options;\n        connector.emit({\n            type: 'load',\n            csv,\n            detail: eventDetail,\n            table\n        });\n        return Promise\n            .resolve(csvURL ?\n            fetch(csvURL).then((response) => response.text()) :\n            csv || '')\n            .then((csv) => {\n            if (csv) {\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                converter.parse({ csv });\n                table.setColumns(converter.getTable().getColumns());\n            }\n            return connector\n                .setModifierOptions(dataModifier)\n                .then(() => csv);\n        })\n            .then((csv) => {\n            connector.emit({\n                type: 'afterLoad',\n                csv,\n                detail: eventDetail,\n                table\n            });\n            return connector;\n        })['catch']((error) => {\n            connector.emit({\n                type: 'loadError',\n                detail: eventDetail,\n                error,\n                table\n            });\n            throw error;\n        });\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\nCSVConnector.defaultOptions = {\n    csv: '',\n    csvURL: '',\n    enablePolling: false,\n    dataRefreshRate: 1,\n    firstRowAsNames: true\n};\nConnectors_DataConnector.registerType('CSV', CSVConnector);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Connectors_CSVConnector = ((/* unused pure expression or super */ null && (CSVConnector)));\n\n;// ./code/grid/es-modules/Data/Converters/GoogleSheetsConverter.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Torstein Hønsi\n *  - Gøran Slettemark\n *  - Wojciech Chmiel\n *  - Sophie Bremer\n *\n * */\n\n\n\nconst { merge: GoogleSheetsConverter_merge, uniqueKey: GoogleSheetsConverter_uniqueKey } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Handles parsing and transformation of an Google Sheets to a table.\n *\n * @private\n */\nclass GoogleSheetsConverter extends Converters_DataConverter {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of the GoogleSheetsConverter.\n     *\n     * @param {GoogleSheetsConverter.UserOptions} [options]\n     * Options for the GoogleSheetsConverter.\n     */\n    constructor(options) {\n        const mergedOptions = GoogleSheetsConverter_merge(GoogleSheetsConverter.defaultOptions, options);\n        super(mergedOptions);\n        this.columns = [];\n        this.header = [];\n        this.options = mergedOptions;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Initiates the parsing of the Google Sheet\n     *\n     * @param {GoogleSheetsConverter.UserOptions}[options]\n     * Options for the parser\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits GoogleSheetsParser#parse\n     * @emits GoogleSheetsParser#afterParse\n     */\n    parse(options, eventDetail) {\n        const converter = this, parseOptions = GoogleSheetsConverter_merge(converter.options, options);\n        let columns = ((parseOptions.json?.values) || []).map((column) => column.slice());\n        if (columns.length === 0) {\n            return false;\n        }\n        converter.header = [];\n        converter.columns = [];\n        converter.emit({\n            type: 'parse',\n            columns: converter.columns,\n            detail: eventDetail,\n            headers: converter.header\n        });\n        // If beforeParse is defined, use it to modify the data\n        const { beforeParse, json } = parseOptions;\n        if (beforeParse && json) {\n            columns = beforeParse(json.values);\n        }\n        let column;\n        converter.columns = columns;\n        for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n            column = columns[i];\n            converter.header[i] = (parseOptions.firstRowAsNames ?\n                `${column.shift()}` :\n                GoogleSheetsConverter_uniqueKey());\n            for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                if (column[j] && typeof column[j] === 'string') {\n                    let cellValue = converter.asGuessedType(column[j]);\n                    if (cellValue instanceof Date) {\n                        cellValue = cellValue.getTime();\n                    }\n                    converter.columns[i][j] = cellValue;\n                }\n            }\n        }\n        converter.emit({\n            type: 'afterParse',\n            columns: converter.columns,\n            detail: eventDetail,\n            headers: converter.header\n        });\n    }\n    /**\n     * Handles converting the parsed data to a table.\n     *\n     * @return {DataTable}\n     * Table from the parsed Google Sheet\n     */\n    getTable() {\n        return Converters_DataConverter.getTableFromColumns(this.columns, this.header);\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Default options\n */\nGoogleSheetsConverter.defaultOptions = {\n    ...Converters_DataConverter.defaultOptions\n};\nConverters_DataConverter.registerType('GoogleSheets', GoogleSheetsConverter);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Converters_GoogleSheetsConverter = (GoogleSheetsConverter);\n\n;// ./code/grid/es-modules/Data/Connectors/GoogleSheetsConnector.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Torstein Hønsi\n *  - Gøran Slettemark\n *  - Wojciech Chmiel\n *  - Sophie Bremer\n *  - Jomar Hønsi\n *\n * */\n\n\n\n\nconst { merge: GoogleSheetsConnector_merge, pick: GoogleSheetsConnector_pick } = Core_Utilities;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Tests Google's response for error.\n * @private\n */\nfunction isGoogleError(json) {\n    return (typeof json === 'object' && json &&\n        typeof json.error === 'object' && json.error &&\n        typeof json.error.code === 'number' &&\n        typeof json.error.message === 'string' &&\n        typeof json.error.status === 'string');\n}\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n * @todo implement save, requires oauth2\n */\nclass GoogleSheetsConnector extends Connectors_DataConnector {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of GoogleSheetsConnector\n     *\n     * @param {GoogleSheetsConnector.UserOptions} [options]\n     * Options for the connector and converter.\n     */\n    constructor(options) {\n        const mergedOptions = GoogleSheetsConnector_merge(GoogleSheetsConnector.defaultOptions, options);\n        super(mergedOptions);\n        this.converter = new Converters_GoogleSheetsConverter(mergedOptions);\n        this.options = mergedOptions;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Loads data from a Google Spreadsheet.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Promise<this>}\n     * Same connector instance with modified table.\n     */\n    load(eventDetail) {\n        const connector = this, converter = connector.converter, table = connector.table, { dataModifier, dataRefreshRate, enablePolling, firstRowAsNames, googleAPIKey, googleSpreadsheetKey } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n        connector.emit({\n            type: 'load',\n            detail: eventDetail,\n            table,\n            url\n        });\n        if (!URL.canParse(url)) {\n            throw new Error('Invalid URL: ' + url);\n        }\n        return fetch(url)\n            .then((response) => (response.json()))\n            .then((json) => {\n            if (isGoogleError(json)) {\n                throw new Error(json.error.message);\n            }\n            converter.parse({\n                firstRowAsNames,\n                json\n            });\n            // If already loaded, clear the current table\n            table.deleteColumns();\n            table.setColumns(converter.getTable().getColumns());\n            return connector.setModifierOptions(dataModifier);\n        })\n            .then(() => {\n            connector.emit({\n                type: 'afterLoad',\n                detail: eventDetail,\n                table,\n                url\n            });\n            // Polling\n            if (enablePolling) {\n                setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n            }\n            return connector;\n        })['catch']((error) => {\n            connector.emit({\n                type: 'loadError',\n                detail: eventDetail,\n                error,\n                table\n            });\n            throw error;\n        });\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\nGoogleSheetsConnector.defaultOptions = {\n    googleAPIKey: '',\n    googleSpreadsheetKey: '',\n    enablePolling: false,\n    dataRefreshRate: 2,\n    firstRowAsNames: true\n};\n/* *\n *\n *  Class Namespace\n *\n * */\n(function (GoogleSheetsConnector) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Creates GoogleSheets API v4 URL.\n     * @private\n     */\n    function buildFetchURL(apiKey, sheetKey, options = {}) {\n        const url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/`);\n        const range = options.onlyColumnNames ?\n            'A1:Z1' : buildQueryRange(options);\n        url.pathname += range;\n        const searchParams = url.searchParams;\n        searchParams.set('alt', 'json');\n        if (!options.onlyColumnNames) {\n            searchParams.set('dateTimeRenderOption', 'FORMATTED_STRING');\n            searchParams.set('majorDimension', 'COLUMNS');\n            searchParams.set('valueRenderOption', 'UNFORMATTED_VALUE');\n        }\n        searchParams.set('prettyPrint', 'false');\n        searchParams.set('key', apiKey);\n        return url.href;\n    }\n    GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n    /**\n     * Creates sheets range.\n     * @private\n     */\n    function buildQueryRange(options = {}) {\n        const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n        return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n            (Math.max((startRow || 0), 0) + 1) +\n            ':' +\n            (alphabet[GoogleSheetsConnector_pick(endColumn, 25)] || 'Z') +\n            (endRow ?\n                Math.max(endRow, 0) :\n                'Z'));\n    }\n    GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n})(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\nConnectors_DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Connectors_GoogleSheetsConnector = ((/* unused pure expression or super */ null && (GoogleSheetsConnector)));\n\n;// ./code/grid/es-modules/Data/Converters/HTMLTableConverter.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Torstein Hønsi\n *  - Gøran Slettemark\n *  - Wojciech Chmiel\n *  - Sophie Bremer\n *\n * */\n\n\n\nconst { merge: HTMLTableConverter_merge } = Core_Utilities;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Row equal\n */\nfunction isRowEqual(row1, row2) {\n    let i = row1.length;\n    if (row2.length === i) {\n        while (--i) {\n            if (row1[i] !== row2[i]) {\n                return false;\n            }\n        }\n    }\n    else {\n        return false;\n    }\n    return true;\n}\n/* *\n *\n *  Class\n *\n * */\n/**\n * Handles parsing and transformation of an HTML table to a table.\n *\n * @private\n */\nclass HTMLTableConverter extends Converters_DataConverter {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of the HTMLTableConverter.\n     *\n     * @param {HTMLTableConverter.UserOptions} [options]\n     * Options for the HTMLTableConverter.\n     */\n    constructor(options) {\n        const mergedOptions = HTMLTableConverter_merge(HTMLTableConverter.defaultOptions, options);\n        super(mergedOptions);\n        this.columns = [];\n        this.headers = [];\n        this.options = mergedOptions;\n        if (mergedOptions.tableElement) {\n            this.tableElement = mergedOptions.tableElement;\n            this.tableElementID = mergedOptions.tableElement.id;\n        }\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Exports the dataconnector as an HTML string, using the options\n     * provided on import unless other options are provided.\n     *\n     * @param {DataConnector} connector\n     * Connector instance to export from.\n     *\n     * @param {HTMLTableConnector.ExportOptions} [options]\n     * Options that override default or existing export options.\n     *\n     * @return {string}\n     * HTML from the current dataTable.\n     */\n    export(connector, options = this.options) {\n        const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n        const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n        const rowArray = [];\n        let tableHead = '';\n        // Add the names as the first row if they should be exported\n        if (exportNames) {\n            const subcategories = [];\n            // If using multilevel headers, the first value\n            // of each column is a subcategory\n            if (useMultiLevelHeaders) {\n                for (const name of columnNames) {\n                    let column = columns[name];\n                    if (!Array.isArray(column)) {\n                        // Convert to conventional array from typed array\n                        // if needed\n                        column = Array.from(column);\n                    }\n                    const subhead = (column.shift() || '').toString();\n                    columns[name] = column;\n                    subcategories.push(subhead);\n                }\n                tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n            }\n            else {\n                tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n            }\n        }\n        for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n            const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n            for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                let cellValue = column[rowIndex];\n                if (!rowArray[rowIndex]) {\n                    rowArray[rowIndex] = [];\n                }\n                // Alternative: Datatype from HTML attribute with\n                // connector.whatIs(columnName)\n                if (!(typeof cellValue === 'string' ||\n                    typeof cellValue === 'number' ||\n                    typeof cellValue === 'undefined')) {\n                    cellValue = (cellValue || '').toString();\n                }\n                rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                // On the final column, push the row to the array\n                if (columnIndex === columnsCount - 1) {\n                    htmlRows.push('<tr>' +\n                        rowArray[rowIndex].join('') +\n                        '</tr>');\n                }\n            }\n        }\n        let caption = '';\n        // Add table caption\n        // Current exportdata falls back to chart title\n        // but that should probably be handled elsewhere?\n        if (options.tableCaption) {\n            caption = '<caption class=\"highcharts-table-caption\">' +\n                options.tableCaption +\n                '</caption>';\n        }\n        return ('<table>' +\n            caption +\n            tableHead +\n            '<tbody>' +\n            htmlRows.join('') +\n            '</tbody>' +\n            '</table>');\n    }\n    /**\n     * Get table cell markup from row data.\n     */\n    getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n        let val = value, className = 'text' + (classes ? ' ' + classes : '');\n        // Convert to string if number\n        if (typeof val === 'number') {\n            val = val.toString();\n            if (decimalPoint === ',') {\n                val = val.replace('.', decimalPoint);\n            }\n            className = 'number';\n        }\n        else if (!value) {\n            val = '';\n            className = 'empty';\n        }\n        return '<' + tag + (attrs ? ' ' + attrs : '') +\n            ' class=\"' + className + '\">' +\n            val + '</' + tag + '>';\n    }\n    /**\n     * Get table header markup from row data.\n     */\n    getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n        const { useMultiLevelHeaders, useRowspanHeaders } = options;\n        let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n        // Clean up multiple table headers. Chart.getDataRows() returns two\n        // levels of headers when using multilevel, not merged. We need to\n        // merge identical headers, remove redundant headers, and keep it\n        // all marked up nicely.\n        if (useMultiLevelHeaders &&\n            topheaders &&\n            subheaders &&\n            !isRowEqual(topheaders, subheaders)) {\n            html += '<tr>';\n            for (; i < len; ++i) {\n                cur = topheaders[i];\n                next = topheaders[i + 1];\n                if (cur === next) {\n                    ++curColspan;\n                }\n                else if (curColspan) {\n                    // Ended colspan\n                    // Add cur to HTML with colspan.\n                    html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                        'colspan=\"' + (curColspan + 1) + '\"', cur);\n                    curColspan = 0;\n                }\n                else {\n                    // Cur is standalone. If it is same as sublevel,\n                    // remove sublevel and add just toplevel.\n                    if (cur === subheaders[i]) {\n                        if (useRowspanHeaders) {\n                            rowspan = 2;\n                            delete subheaders[i];\n                        }\n                        else {\n                            rowspan = 1;\n                            subheaders[i] = '';\n                        }\n                    }\n                    else {\n                        rowspan = 1;\n                    }\n                    html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                        (rowspan > 1 ?\n                            ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                            ''), cur);\n                }\n            }\n            html += '</tr>';\n        }\n        // Add the subheaders (the only headers if not using multilevels)\n        if (subheaders) {\n            html += '<tr>';\n            for (i = 0, len = subheaders.length; i < len; ++i) {\n                if (typeof subheaders[i] !== 'undefined') {\n                    html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</thead>';\n        return html;\n    }\n    /**\n     * Initiates the parsing of the HTML table\n     *\n     * @param {HTMLTableConverter.UserOptions}[options]\n     * Options for the parser\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits CSVDataParser#parse\n     * @emits CSVDataParser#afterParse\n     * @emits HTMLTableParser#parseError\n     */\n    parse(options, eventDetail) {\n        const converter = this, columns = [], headers = [], parseOptions = HTMLTableConverter_merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n        if (!(tableHTML instanceof HTMLElement)) {\n            converter.emit({\n                type: 'parseError',\n                columns,\n                detail: eventDetail,\n                headers,\n                error: 'Not a valid HTML Table'\n            });\n            return;\n        }\n        converter.tableElement = tableHTML;\n        converter.tableElementID = tableHTML.id;\n        this.emit({\n            type: 'parse',\n            columns: converter.columns,\n            detail: eventDetail,\n            headers: converter.headers\n        });\n        const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n        let rowIndex = 0, item, { startRow } = parseOptions;\n        // Insert headers from the first row\n        if (firstRowAsNames && rowsCount) {\n            const items = rows[0].children, itemsLength = items.length;\n            for (let i = startColumn; i < itemsLength; i++) {\n                if (i > endColumn) {\n                    break;\n                }\n                item = items[i];\n                if (item.tagName === 'TD' ||\n                    item.tagName === 'TH') {\n                    headers.push(item.innerHTML);\n                }\n            }\n            startRow++;\n        }\n        while (rowIndex < rowsCount) {\n            if (rowIndex >= startRow && rowIndex <= endRow) {\n                const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                let columnIndex = 0;\n                while (columnIndex < columnsInRowLength) {\n                    const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                    item = columnsInRow[columnIndex];\n                    if ((item.tagName === 'TD' ||\n                        item.tagName === 'TH') &&\n                        (columnIndex >= startColumn &&\n                            columnIndex <= endColumn)) {\n                        if (!columns[relativeColumnIndex]) {\n                            columns[relativeColumnIndex] = [];\n                        }\n                        let cellValue = converter.asGuessedType(item.innerHTML);\n                        if (cellValue instanceof Date) {\n                            cellValue = cellValue.getTime();\n                        }\n                        columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                        // Loop over all previous indices and make sure\n                        // they are nulls, not undefined.\n                        let i = 1;\n                        while (rowIndex - startRow >= i &&\n                            row[rowIndex - startRow - i] === void 0) {\n                            row[rowIndex - startRow - i] = null;\n                            i++;\n                        }\n                    }\n                    columnIndex++;\n                }\n            }\n            rowIndex++;\n        }\n        this.columns = columns;\n        this.headers = headers;\n        this.emit({\n            type: 'afterParse',\n            columns,\n            detail: eventDetail,\n            headers\n        });\n    }\n    /**\n     * Handles converting the parsed data to a table.\n     *\n     * @return {DataTable}\n     * Table from the parsed HTML table\n     */\n    getTable() {\n        return Converters_DataConverter.getTableFromColumns(this.columns, this.headers);\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Default options\n */\nHTMLTableConverter.defaultOptions = {\n    ...Converters_DataConverter.defaultOptions,\n    useRowspanHeaders: true,\n    useMultiLevelHeaders: true\n};\nConverters_DataConverter.registerType('HTMLTable', HTMLTableConverter);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Converters_HTMLTableConverter = (HTMLTableConverter);\n\n;// ./code/grid/es-modules/Data/Connectors/HTMLTableConnector.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Torstein Hønsi\n *  - Gøran Slettemark\n *  - Wojciech Chmiel\n *  - Sophie Bremer\n *\n * */\n\n\n\nconst { win: HTMLTableConnector_win } = Core_Globals;\n\n\nconst { merge: HTMLTableConnector_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class that handles creating a data connector from an HTML table.\n *\n * @private\n */\nclass HTMLTableConnector extends Connectors_DataConnector {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of HTMLTableConnector.\n     *\n     * @param {HTMLTableConnector.UserOptions} [options]\n     * Options for the connector and converter.\n     */\n    constructor(options) {\n        const mergedOptions = HTMLTableConnector_merge(HTMLTableConnector.defaultOptions, options);\n        super(mergedOptions);\n        this.converter = new Converters_HTMLTableConverter(mergedOptions);\n        this.options = mergedOptions;\n    }\n    /**\n     * Initiates creating the dataconnector from the HTML table\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits HTMLTableConnector#load\n     * @emits HTMLTableConnector#afterLoad\n     * @emits HTMLTableConnector#loadError\n     */\n    load(eventDetail) {\n        const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n        connector.emit({\n            type: 'load',\n            detail: eventDetail,\n            table,\n            tableElement: connector.tableElement\n        });\n        let tableElement;\n        if (typeof tableHTML === 'string') {\n            connector.tableID = tableHTML;\n            tableElement = HTMLTableConnector_win.document.getElementById(tableHTML);\n        }\n        else {\n            tableElement = tableHTML;\n            connector.tableID = tableElement.id;\n        }\n        connector.tableElement = tableElement || void 0;\n        if (!connector.tableElement) {\n            const error = 'HTML table not provided, or element with ID not found';\n            connector.emit({\n                type: 'loadError',\n                detail: eventDetail,\n                error,\n                table\n            });\n            return Promise.reject(new Error(error));\n        }\n        converter.parse(HTMLTableConnector_merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n        // If already loaded, clear the current rows\n        table.deleteColumns();\n        table.setColumns(converter.getTable().getColumns());\n        return connector\n            .setModifierOptions(dataModifier)\n            .then(() => {\n            connector.emit({\n                type: 'afterLoad',\n                detail: eventDetail,\n                table,\n                tableElement: connector.tableElement\n            });\n            return connector;\n        });\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\nHTMLTableConnector.defaultOptions = {\n    table: ''\n};\nConnectors_DataConnector.registerType('HTMLTable', HTMLTableConnector);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Connectors_HTMLTableConnector = ((/* unused pure expression or super */ null && (HTMLTableConnector)));\n\n;// ./code/grid/es-modules/Data/Converters/JSONConverter.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Pawel Lysy\n *\n * */\n\n\n\n\nconst { error: JSONConverter_error, isArray: JSONConverter_isArray, merge: JSONConverter_merge, objectEach: JSONConverter_objectEach } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Handles parsing and transforming JSON to a table.\n *\n * @private\n */\nclass JSONConverter extends Converters_DataConverter {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of the JSON parser.\n     *\n     * @param {JSONConverter.UserOptions} [options]\n     * Options for the JSON parser.\n     */\n    constructor(options) {\n        const mergedOptions = JSONConverter_merge(JSONConverter.defaultOptions, options);\n        super(mergedOptions);\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        this.columns = [];\n        this.headers = [];\n        this.options = mergedOptions;\n        this.table = new Data_DataTable();\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Initiates parsing of JSON structure.\n     *\n     * @param {JSONConverter.UserOptions}[options]\n     * Options for the parser\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits JSONConverter#parse\n     * @emits JSONConverter#afterParse\n     */\n    parse(options, eventDetail) {\n        const converter = this;\n        options = JSONConverter_merge(converter.options, options);\n        const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n        let data = options.data;\n        if (!data) {\n            return;\n        }\n        converter.columns = [];\n        converter.emit({\n            type: 'parse',\n            columns: converter.columns,\n            detail: eventDetail,\n            headers: converter.headers\n        });\n        if (beforeParse) {\n            data = beforeParse(data);\n        }\n        data = data.slice();\n        if (orientation === 'columns') {\n            for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                const item = data[i];\n                if (!(item instanceof Array)) {\n                    return;\n                }\n                if (converter.headers instanceof Array) {\n                    if (firstRowAsNames) {\n                        converter.headers.push(`${item.shift()}`);\n                    }\n                    else if (columnNames && columnNames instanceof Array) {\n                        converter.headers.push(columnNames[i]);\n                    }\n                    converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                }\n                else {\n                    JSONConverter_error('JSONConverter: Invalid `columnNames` option.', false);\n                }\n            }\n        }\n        else if (orientation === 'rows') {\n            if (firstRowAsNames) {\n                converter.headers = data.shift();\n            }\n            else if (columnNames) {\n                converter.headers = columnNames;\n            }\n            for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                let row = data[rowIndex];\n                if (JSONConverter_isArray(row)) {\n                    for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                        if (converter.columns.length < columnIndex + 1) {\n                            converter.columns.push([]);\n                        }\n                        converter.columns[columnIndex].push(row[columnIndex]);\n                        if (converter.headers instanceof Array) {\n                            this.table.setColumn(converter.headers[columnIndex] ||\n                                columnIndex.toString(), converter.columns[columnIndex]);\n                        }\n                        else {\n                            JSONConverter_error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else {\n                    const columnNames = converter.headers;\n                    if (columnNames && !(columnNames instanceof Array)) {\n                        const newRow = {};\n                        JSONConverter_objectEach(columnNames, (arrayWithPath, name) => {\n                            newRow[name] = arrayWithPath.reduce((acc, key) => acc[key], row);\n                        });\n                        row = newRow;\n                    }\n                    this.table.setRows([row], rowIndex);\n                }\n            }\n        }\n        converter.emit({\n            type: 'afterParse',\n            columns: converter.columns,\n            detail: eventDetail,\n            headers: converter.headers\n        });\n    }\n    /**\n     * Handles converting the parsed data to a table.\n     *\n     * @return {DataTable}\n     * Table from the parsed CSV.\n     */\n    getTable() {\n        return this.table;\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Default options\n */\nJSONConverter.defaultOptions = {\n    ...Converters_DataConverter.defaultOptions,\n    data: [],\n    orientation: 'rows'\n};\nConverters_DataConverter.registerType('JSON', JSONConverter);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Converters_JSONConverter = (JSONConverter);\n\n;// ./code/grid/es-modules/Data/Connectors/JSONConnector.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Pawel Lysy\n *\n * */\n\n\n\n\nconst { merge: JSONConnector_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Class that handles creating a DataConnector from JSON structure\n *\n * @private\n */\nclass JSONConnector extends Connectors_DataConnector {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of JSONConnector.\n     *\n     * @param {JSONConnector.UserOptions} [options]\n     * Options for the connector and converter.\n     */\n    constructor(options) {\n        const mergedOptions = JSONConnector_merge(JSONConnector.defaultOptions, options);\n        super(mergedOptions);\n        this.converter = new Converters_JSONConverter(mergedOptions);\n        this.options = mergedOptions;\n        if (mergedOptions.enablePolling) {\n            this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n        }\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Initiates the loading of the JSON source to the connector\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits JSONConnector#load\n     * @emits JSONConnector#afterLoad\n     */\n    load(eventDetail) {\n        const connector = this, converter = connector.converter, table = connector.table, { data, dataUrl, dataModifier } = connector.options;\n        connector.emit({\n            type: 'load',\n            data,\n            detail: eventDetail,\n            table\n        });\n        return Promise\n            .resolve(dataUrl ?\n            fetch(dataUrl).then((response) => response.json())['catch']((error) => {\n                connector.emit({\n                    type: 'loadError',\n                    detail: eventDetail,\n                    error,\n                    table\n                });\n                console.warn(`Unable to fetch data from ${dataUrl}.`); // eslint-disable-line no-console\n            }) :\n            data || [])\n            .then((data) => {\n            if (data) {\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                converter.parse({ data });\n                table.setColumns(converter.getTable().getColumns());\n            }\n            return connector.setModifierOptions(dataModifier).then(() => data);\n        })\n            .then((data) => {\n            connector.emit({\n                type: 'afterLoad',\n                data,\n                detail: eventDetail,\n                table\n            });\n            return connector;\n        })['catch']((error) => {\n            connector.emit({\n                type: 'loadError',\n                detail: eventDetail,\n                error,\n                table\n            });\n            throw error;\n        });\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\nJSONConnector.defaultOptions = {\n    data: [],\n    enablePolling: false,\n    dataRefreshRate: 0,\n    firstRowAsNames: true,\n    orientation: 'rows'\n};\nConnectors_DataConnector.registerType('JSON', JSONConnector);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Connectors_JSONConnector = ((/* unused pure expression or super */ null && (JSONConnector)));\n\n;// ./code/grid/es-modules/Data/Modifiers/InvertModifier.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Wojciech Chmiel\n *  - Sophie Bremer\n *\n * */\n\n\n\nconst { merge: InvertModifier_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Inverts columns and rows in a table.\n *\n * @private\n */\nclass InvertModifier extends Modifiers_DataModifier {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of the invert modifier.\n     *\n     * @param {Partial<InvertModifier.Options>} [options]\n     * Options to configure the invert modifier.\n     */\n    constructor(options) {\n        super();\n        this.options = InvertModifier_merge(InvertModifier.defaultOptions, options);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Applies partial modifications of a cell change to the property `modified`\n     * of the given modified table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {string} columnName\n     * Column name of changed cell.\n     *\n     * @param {number|undefined} rowIndex\n     * Row index of changed cell.\n     *\n     * @param {Highcharts.DataTableCellType} cellValue\n     * Changed cell value.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n        const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n        if (typeof modifiedRowIndex === 'undefined') {\n            modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n        }\n        else {\n            modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n        }\n        return table;\n    }\n    /**\n     * Applies partial modifications of column changes to the property\n     * `modified` of the given table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {Highcharts.DataTableColumnCollection} columns\n     * Changed columns as a collection, where the keys are the column names.\n     *\n     * @param {number} [rowIndex=0]\n     * Index of the first changed row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyColumns(table, columns, rowIndex, eventDetail) {\n        const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n        let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n        if (!reset) {\n            for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                if (columnNames[i] !== modifiedColumnNames[i]) {\n                    reset = true;\n                    break;\n                }\n            }\n        }\n        if (reset) {\n            return this.modifyTable(table, eventDetail);\n        }\n        columnNames = Object.keys(columns);\n        for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n            columnName = columnNames[i];\n            column = columns[columnName];\n            modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                modified.getRowCount());\n            for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n            }\n        }\n        return table;\n    }\n    /**\n     * Applies partial modifications of row changes to the property `modified`\n     * of the given table.\n     *\n     * @param {Highcharts.DataTable} table\n     * Modified table.\n     *\n     * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n     * Changed rows.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first changed row.\n     *\n     * @param {Highcharts.DataTableEventDetail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {Highcharts.DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyRows(table, rows, rowIndex, eventDetail) {\n        const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n        let reset = (table.getRowCount() !== modifiedColumnNames.length);\n        if (!reset) {\n            for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                if (columnNames[i] !== modifiedColumnNames[i]) {\n                    reset = true;\n                    break;\n                }\n            }\n        }\n        if (reset) {\n            return this.modifyTable(table, eventDetail);\n        }\n        for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n            row = rows[i];\n            if (row instanceof Array) {\n                modified.setColumn(`${i2}`, row);\n            }\n            else {\n                for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                    modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                }\n            }\n        }\n        return table;\n    }\n    /**\n     * Inverts rows and columns in the table.\n     *\n     * @param {DataTable} table\n     * Table to invert.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {DataTable}\n     * Table with inverted `modified` property as a reference.\n     */\n    modifyTable(table, eventDetail) {\n        const modifier = this;\n        modifier.emit({ type: 'modify', detail: eventDetail, table });\n        const modified = table.modified;\n        if (table.hasColumns(['columnNames'])) { // Inverted table\n            const columnNamesColumn = ((table.deleteColumns(['columnNames']) || {})\n                .columnNames || []), columns = {}, columnNames = [];\n            for (let i = 0, iEnd = columnNamesColumn.length; i < iEnd; ++i) {\n                columnNames.push('' + columnNamesColumn[i]);\n            }\n            for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                row = table.getRow(i);\n                if (row) {\n                    columns[columnNames[i]] = row;\n                }\n            }\n            modified.deleteColumns();\n            modified.setColumns(columns);\n        }\n        else { // Regular table\n            const columns = {};\n            for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                row = table.getRow(i);\n                if (row) {\n                    columns[`${i}`] = row;\n                }\n            }\n            columns.columnNames = table.getColumnNames();\n            modified.deleteColumns();\n            modified.setColumns(columns);\n        }\n        modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n        return table;\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Default options for the invert modifier.\n */\nInvertModifier.defaultOptions = {\n    type: 'Invert'\n};\nModifiers_DataModifier.registerType('Invert', InvertModifier);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Modifiers_InvertModifier = ((/* unused pure expression or super */ null && (InvertModifier)));\n\n;// ./code/grid/es-modules/Data/Modifiers/RangeModifier.js\n/* *\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - Dawid Dragula\n *\n * */\n\n\n\nconst { merge: RangeModifier_merge } = Core_Utilities;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Filters out table rows with a specific value range.\n *\n */\nclass RangeModifier extends Modifiers_DataModifier {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    /**\n     * Constructs an instance of the range modifier.\n     *\n     * @param {Partial<RangeModifier.Options>} [options]\n     * Options to configure the range modifier.\n     */\n    constructor(options) {\n        super();\n        this.options = RangeModifier_merge(RangeModifier.defaultOptions, options);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Replaces table rows with filtered rows.\n     *\n     * @param {DataTable} table\n     * Table to modify.\n     *\n     * @param {DataEvent.Detail} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @return {DataTable}\n     * Table with `modified` property as a reference.\n     */\n    modifyTable(table, eventDetail) {\n        const modifier = this;\n        modifier.emit({ type: 'modify', detail: eventDetail, table });\n        let indexes = [];\n        const { additive, ranges, strict } = modifier.options;\n        if (ranges.length) {\n            const modified = table.modified;\n            let columns = table.getColumns(), rows = [];\n            for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                range = ranges[i];\n                if (strict &&\n                    typeof range.minValue !== typeof range.maxValue) {\n                    continue;\n                }\n                if (i > 0 && !additive) {\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                    modified.setOriginalRowIndexes(indexes, true);\n                    columns = modified.getColumns();\n                    rows = [];\n                    indexes = [];\n                }\n                rangeColumn = (columns[range.column] || []);\n                for (let j = 0, jEnd = rangeColumn.length, cell, row, originalRowIndex; j < jEnd; ++j) {\n                    cell = rangeColumn[j];\n                    switch (typeof cell) {\n                        default:\n                            continue;\n                        case 'boolean':\n                        case 'number':\n                        case 'string':\n                            break;\n                    }\n                    if (strict &&\n                        typeof cell !== typeof range.minValue) {\n                        continue;\n                    }\n                    if (cell >= range.minValue &&\n                        cell <= range.maxValue) {\n                        if (additive) {\n                            row = table.getRow(j);\n                            originalRowIndex = table.getOriginalRowIndex(j);\n                        }\n                        else {\n                            row = modified.getRow(j);\n                            originalRowIndex = modified.getOriginalRowIndex(j);\n                        }\n                        if (row) {\n                            rows.push(row);\n                            indexes.push(originalRowIndex);\n                        }\n                    }\n                }\n            }\n            modified.deleteRows();\n            modified.setRows(rows);\n            modified.setOriginalRowIndexes(indexes);\n        }\n        modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n        return table;\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\n/**\n * Default options for the range modifier.\n */\nRangeModifier.defaultOptions = {\n    type: 'Range',\n    ranges: []\n};\nModifiers_DataModifier.registerType('Range', RangeModifier);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Modifiers_RangeModifier = ((/* unused pure expression or super */ null && (RangeModifier)));\n\n;// ./code/grid/es-modules/masters/grid-lite.src.js\n\n\n/* *\n *\n *  Imports\n *\n * */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Fill registries\n\n\n\n\n\n\n\n\n/* *\n *\n *  Namespace\n *\n * */\nconst G = Grid_Core_Globals;\nG.AST = HTML_AST;\nG.DataConnector = Connectors_DataConnector;\nG.DataCursor = Data_DataCursor;\nG.DataConverter = Converters_DataConverter;\nG.Grid = Core_Grid;\nG.grid = Core_Grid.grid;\nG.grids = Core_Grid.grids;\nG.DataModifier = Modifiers_DataModifier;\nG.DataPool = Data_DataPool;\nG.DataTable = Data_DataTable;\nG.defaultOptions = Core_Defaults.defaultOptions;\nG.isHighContrastModeActive = HighContrastMode.isHighContrastModeActive;\nG.Templating = Core_Templating;\nG.product = 'Grid Lite';\nG.setOptions = Core_Defaults.setOptions;\nG.Table = G.Table || Table_Table;\nCredits_CreditsLiteComposition.compose(G.Grid);\n/* *\n *\n *  Classic Export\n *\n * */\nif (!G.win.Grid) {\n    G.win.Grid = G;\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const grid_lite_src = (G);\n\n__webpack_exports__ = __webpack_exports__[\"default\"];\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});"],"names":["root","factory","exports","module","define","amd","error","window","serialMode","Globals","ColumnUtils","Globals_Globals","GridUtils","Defaults_Defaults","CreditsLiteComposition","__webpack_require__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","__webpack_exports__","grid_lite_src","SVG_NS","product","version","win","doc","document","svg","createElementNS","createSVGRect","pageLang","documentElement","closest","lang","userAgent","navigator","isChrome","chrome","isFirefox","indexOf","isMS","test","opera","isSafari","isTouchDevice","isWebKit","deg2rad","Math","PI","marginNames","noop","supportsPassiveEvents","supportsPassive","opts","addEventListener","removeEventListener","charts","composed","dateFormats","seriesTypes","symbolSizes","chartCount","Core_Globals","code","stop","chart","params","severity","isCode","isNumber","message","toString","additionalMessages","objectEach","value","encodeURI","fireEvent","Error","console","messages","warn","push","pInt","s","mag","parseInt","isString","isArray","str","isObject","strict","isDOMElement","nodeType","isClass","c","constructor","name","n","isNaN","Infinity","defined","attr","elem","keyOrAttribs","ret","isGetter","attrSingle","setAttribute","getAttribute","removeAttribute","splat","extend","a","b","pick","args","arguments","length","i","arg","css","el","styles","style","getMagnitude","num","pow","floor","log","LN10","correctFloat","prec","parseFloat","toPrecision","easeInOutSine","pos","cos","find","Array","arr","callback","fn","ctx","removeEvent","type","removeOneEvent","removeAllEvents","eventCollection","types","len","nodeName","_val","owner","events","hcEvents","typeEvents","filter","eventArguments","defaultFunction","createEvent","dispatchEvent","e","initEvent","target","preventDefault","defaultPrevented","object","multilevel","unshift","apply","getPrototypeOf","sort","order","forEach","uniqueKey","hash","random","substring","id","jQuery","highcharts","slice","shift","Utilities","addEvent","options","Point","series","runTrackerClick","passive","capture","eventObject","arrayMax","data","max","arrayMin","min","clamp","clearTimeout","createElement","tag","attribs","parent","nopad","padding","border","margin","appendChild","crisp","lineWidth","inverted","mod","inverter","round","destroyObjectProperties","except","destructablesOnly","val","destroy","diffObjects","newer","older","keepOlder","collectionsWithUpdate","diff","depth","keeper","newerVal","keys","discardElement","element","parentElement","removeChild","erase","item","splice","extendClass","members","getAlignFactor","align","center","right","middle","bottom","getClosestDistance","arrays","onError","loopLength","distance","allowNegative","xData","getNestedProperty","path","pathElements","split","pathElement","thisProp","child","replace","getStyle","toInt","offsetWidth","scrollWidth","boundingClientRectWidth","getBoundingClientRect","width","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","insertItem","collection","indexOption","index","isInternal","_i","isFunction","merge","extendOrSource","sources","doCopy","copy","original","normalizeTickInterval","interval","multiples","magnitude","allowDecimals","hasTickAmount","retInterval","normalized","offset","docElem","box","parentNode","top","left","height","pageYOffset","scrollTop","clientTop","pageXOffset","scrollLeft","clientLeft","pad","number","padder","String","join","pushUnique","array","relativeLength","base","replaceNested","text","replacements","previous","replacement","stableSort","sortFunction","sortValue","safeI","syncTimeout","delay","context","setTimeout","timeUnits","millisecond","second","minute","hour","day","week","month","year","ucfirst","toUpperCase","useSerialIds","mode","wrap","method","func","proceed","outerArgs","scope","concat","AST_win","AST_attr","AST_createElement","AST_css","AST_error","AST_isFunction","AST_isString","AST_objectEach","AST_splat","trustedTypes","trustedTypesPolicy","createPolicy","createHTML","emptyHTML","AST","filterUserAttributes","attributes","valid","allowedAttributes","allowedReferences","some","ref","parseStyle","reduce","line","pair","map","trim","g","setElementHTML","html","innerHTML","ast","addToDOM","source","nodes","parseMarkup","recurse","subtree","subParent","node","tagName","textNode","textContent","createTextNode","bypassHTMLFiltering","allowedTags","NS","namespaceURI","children","markup","DOMParser","parseFromString","body","appendChildNodes","addTo","toLowerCase","astNode","parsedAttributes","attrib","childNodes","childNode","TimeBase_win","TimeBase_defined","TimeBase_error","TimeBase_extend","TimeBase_isNumber","TimeBase_isObject","TimeBase_isString","TimeBase_merge","TimeBase_objectEach","TimeBase_pad","TimeBase_splat","TimeBase_timeUnits","TimeBase_ucfirst","hasOldSafariBug","Intl","DateTimeFormat","formatRange","isDateTimeFormatOptions","main","Shared_TimeBase","timezone","variableTimezone","Date","update","dTLCache","timezoneOffset","useUTC","isMonth","isShort","timeZone","position","dateFormat","toParts","timestamp","weekday","dayOfMonth","hours","minutes","seconds","dateTimeFormat","Number","locale","cacheKey","JSON","stringify","str2dtf","dTL","format","dtf","mapping","L","fractionalSecondDigits","S","M","H","k","E","A","B","m","y","Y","makeTime","date","milliseconds","UTC","getTimezoneOffset","newOffset","parse","hasTimezone","isYYYYMMDD","ts","gmt","colon","timeZoneName","upperCaseFirst","invalidDate","match","localeAwareRegex","exec","time","fullYear","langWeekdays","weekdays","shortWeekdays","months","shortMonths","substr","w","v","weekFrom","I","l","p","P","tzHours","prefix","suffix","resolveDTLFormat","f","from","to","getDateFormat","range","startOfWeek","dateTimeLabelFormats","dateStr","blank","strpos","lastN","Time_defined","Time_extend","Time_timeUnits","Core_Time","getTimeTicks","normalizedInterval","tickPositions","higherRanks","count","unitRange","variableDayLength","weekdayNo","t","info","totalRange","Defaults_fireEvent","Defaults_merge","defaultOptions","colors","symbols","chartTitle","loading","seriesName","numericSymbols","pieSliceName","resetZoom","yAxisTitle","resetZoomTitle","global","buttonTheme","fill","r","stroke","color","cursor","fontSize","fontWeight","states","hover","select","disabled","alignThresholds","panning","enabled","styledMode","borderRadius","colorCount","allowMutatingData","ignoreHiddenSeries","spacing","resetZoomButton","theme","reflow","zooming","singleTouch","resetButton","zIndex","x","borderColor","backgroundColor","plotBorderColor","title","minScale","subtitle","caption","verticalAlign","plotOptions","legend","alignColumns","className","layout","itemMarginBottom","itemMarginTop","labelFormatter","navigation","activeColor","inactiveColor","itemStyle","textDecoration","textOverflow","itemHoverStyle","itemHiddenStyle","shadow","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","opacity","textAlign","tooltip","animation","duration","easing","sqrt","footerFormat","headerShape","hideDelay","shape","shared","snap","headerFormat","pointFormat","borderWidth","stickOnContact","useHTML","credits","href","defaultTime","Templating_defaultOptions","Templating_defaultTime","getOptions","setOptions","Templating_pageLang","Templating_extend","Templating_getNestedProperty","Templating_isArray","Templating_isNumber","Templating_isObject","Templating_isString","Templating_pick","Templating_ucfirst","helpers","add","divide","eq","each","ge","gt","condition","le","lt","multiply","ne","subtract","unless","numberFormatCache","isQuotedString","regex","subRegex","matches","floatRegex","decRegex","numberFormatter","numberFormat","resolveProperty","currentMatch","hasSub","mainMatch","subMatch","isBlock","expression","charAt","start","startInner","startingElseSection","elseBody","parts","startChar","char","valueAndFormat","segment","decimals","decimalPoint","thousandsSep","lastIndex","fractionDigits","mantissa","exp","origDec","firstDecimals","toExponential","toFixed","minimumFractionDigits","maximumFractionDigits","useGrouping","hasSeparators","nf","NumberFormat","Core_Templating","DataModifier_addEvent","DataModifier_fireEvent","DataModifier_merge","DataModifier","benchmark","dataTable","results","modifier","execute","modifyTable","emit","iterations","on","times","startTime","endTime","performance","now","modify","table","eventDetail","Promise","resolve","reject","modified","clone","detail","modifyCell","columnName","rowIndex","cellValue","modifyColumns","columns","modifyRows","rows","registerType","DataModifierClass","Modifiers_DataModifier","setLength","column","asSubarray","deleteCount","removedAsSubarray","items","removed","Constructor","result","set","subarray","Data_ColumnUtils","DataTableCore_fireEvent","DataTableCore_objectEach","DataTableCore_uniqueKey","Data_DataTableCore","autoId","rowCount","versionTag","applyRowCount","deleteRows","getColumn","asReference","getColumns","columnNames","getRow","setColumn","setColumns","silent","setRow","row","insert","indexRowCount","addColumns","DataTable_addEvent","DataTable_defined","DataTable_extend","DataTable_fireEvent","DataTable_isNumber","DataTable_uniqueKey","DataTable","isNull","NULL","iEnd","skipColumns","tableOptions","tableClone","originalRowIndexes","localRowIndexes","deleteColumns","deletedColumns","modifiedColumns","deleteRowIndexReferences","deletedRows","modifiedRows","deletedCells","j","jEnd","includes","getCell","getCellAsBoolean","getCellAsNumber","useNaN","getCellAsString","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","asBasicColumns","tableColumns","getLocalRowIndex","originalRowIndex","getModifier","getOriginalRowIndex","getRows","getRowCount","getRowIndexBy","rowIndexOffset","getRowObject","getRowObjects","i2","getVersionTag","hasColumns","hasRowWith","isFinite","renameColumn","newColumnName","setCell","typeAsOriginal","tableModifier","tableColumn","ArrayConstructor","setModifier","promise","then","setOriginalRowIndexes","omitLocalRowIndexes","modifiedIndexes","originalIndex","setRows","DataConnector_addEvent","DataConnector_fireEvent","DataConnector_merge","DataConnector_pick","DataConnector","metadata","polling","describeColumn","columnMeta","connector","describeColumns","pop","getColumnOrder","usePresentationState","names","getSortedColumns","usePresentationOrder","load","save","setColumnOrder","setModifierOptions","modifierOptions","ModifierClass","startPolling","refreshTime","_polling","stopPolling","whatIs","DataConnectorClass","Connectors_DataConnector","DataConverter_addEvent","DataConverter_fireEvent","DataConverter_isNumber","DataConverter_merge","DataConverter","parser","NaN","alternative","getFullYear","mergedOptions","regExpPoint","decimalRegExp","RegExp","asBoolean","asNumber","asDate","parseDate","asString","asGuessedType","typeMap","converter","guessType","decimalRegex","getDate","deduceDateFormat","limit","stable","thing","guessedFormat","madeDeduction","export","headers","getTable","trimedValue","innerTrimedValue","floatValue","dateFormatProp","getTime","inside","alternativeFormat","startColumn","endColumn","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","DataConverterClass","getTableFromColumns","Converters_DataConverter","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","listeners","buildEmittingTag","firstRow","lastRow","emitCursor","event","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","needle","columnNeedle","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","Data_DataCursor","HighContrastMode_doc","HighContrastMode_win","HighContrastMode","isHighContrastModeActive","isEdge","matchMedia","testDiv","backgroundImage","bi","currentStyle","classNamePrefix","rawClassNames","container","tableElement","captionElement","descriptionElement","theadElement","tbodyElement","rowElement","rowEven","rowOdd","hoveredRow","columnElement","hoveredCell","hoveredColumn","syncedRow","syncedCell","syncedColumn","editedCell","mockedCell","rowsContentNowrap","virtualization","scrollableContent","headerCell","headerCellContent","headerRow","noData","columnFirst","columnSortable","columnSortableIcon","columnSortedAsc","columnSortedDesc","resizerWrapper","resizerHandles","resizedColumn","creditsContainer","creditsText","visuallyHidden","lastHeaderCellInRow","loadingWrapper","loadingSpinner","loadingMessage","getClassName","classNameKey","Grid_Core_Globals","makeHTMLElement","paramsKeys","assign","isHTML","makeDiv","sanitizeText","setHTMLContent","content","formattedNodes","innerText","Core_GridUtils","Accessibility_Accessibility","grid","classList","prepend","announcerElement","addSortableColumnHint","sortableLang","accessibility","sorting","sortable","addHeaderCellDescription","thElement","description","announce","msg","assertive","announcerTimeout","remove","userSortedColumn","announcementsLang","announcements","ascending","descending","none","setColumnSortState","addHighContrast","highContrastMode","contentWrapper","setRowIndex","idx","setA11yOptions","tableEl","Core_Defaults_merge","Defaults","rendering","distribution","bufferSize","minVisibleRows","strictHeights","header","columnDefaults","resizing","Core_Defaults","Column_merge","Column_makeHTMLElement","Column","viewport","cells","columnOptionsMap","getInitialWidth","loadData","registerCell","cell","htmlElement","hoveredColumnId","unregisterCell","getWidth","vp","columnDistribution","getWidthFromRatio","setHoveredState","hovered","setSyncedState","synced","mock","getInitialFullDistWidth","columnsCount","enabledColumns","getRatioFromWidth","allPreviousWidths","template","MIN_COLUMN_WIDTH","Row_makeHTMLElement","Table_Row","render","createCell","rendered","rowsWidth","columnId","Table_Cell","cellEvents","init","initEvents","onBlur","onFocus","onClick","onKeyDown","focusAnchor","rowsVirtualizer","focusAnchorCell","focusCursor","dir","changeFocusKeys","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","stopPropagation","nextVerticalDir","localRowIndex","focus","nextRow","elementStyle","maxWidth","setCustomClassName","customClassName","newClassName","ColumnSorting_makeHTMLElement","ColumnSorting_fireEvent","Actions_ColumnSorting","headerCellElement","toggle","sortingController","querying","currentOrder","currentSorting","setOrder","consequents","asc","desc","addHeaderElementAttributes","col","a11y","sortingOptions","sortedAscClassName","sortedDescClassName","setSorting","loadPresentationData","HeaderCell_makeHTMLElement","HeaderCell_fireEvent","HeaderCell_merge","HeaderCell_isString","Header_HeaderCell","columnsTree","getColumnIds","headerCellOptions","isSortableData","formatter","headerContent","columnsResizer","renderColumnDragHandles","initColumnSorting","th","originalEvent","isLastColumn","lastViewportColumn","HeaderRow_isString","Header_HeaderRow","level","setRowAttributes","renderMultipleLevel","columnsOnLevel","getColumnsAtLevel","columnOnLevel","colIsString","colSpan","dataColumn","levels","lastCell","targetLevel","currentLevel","Header_TableHeader","getRowLevels","clientWidth","bordersWidth","lastCellEl","maxDepth","scrollHorizontally","transform","TableCell_setHTMLContent","TableCell_defined","TableCell_fireEvent","Content_TableCell","setValue","onDblClick","onMouseOut","onMouseOver","onMouseDown","hoverRow","hoverColumn","updateTable","focusedRowId","formatCell","originalDataTable","rowTableIndex","willNotModify","newRowIndex","cellsDefaults","isDefaultFormat","isDefaultFormatter","cellContent","Content_TableRow","translateY","hoveredRowIndex","syncedRowIndex","setTranslateY","getDefaultTopOffset","defaultRowHeight","RowsVirtualizer_makeHTMLElement","Actions_RowsVirtualizer","rowCursor","preventScroll","rowSettings","strictRowHeights","buffer","getDefaultRowHeight","initialRender","renderRows","adjustRowHeights","rerender","oldScrollTop","tbody","oldScrollLeft","scroll","rowHeight","lastScrollTop","adjustBottomRowHeights","rowsLn","rowTop","rowBottom","newHeight","isVirtualization","rowsPerPage","ceil","clientHeight","last","alwaysLastRow","tempRows","newRow","insertBefore","lastChild","columnIndex","firstVisibleRow","defaultH","translateBuffer","cellHeight","preLastRow","reflowRows","mockRow","mockCell","ColumnsResizer_makeHTMLElement","ColumnsResizer_fireEvent","ColumnsResizer_getStyle","ColumnsResizer","handles","onDocumentMouseMove","draggedResizeHandle","draggedColumn","pageX","dragStartX","fullDistributionResize","fixedDistributionResize","onDocumentMouseUp","columnStartWidth","nextColumnStartWidth","handle","addHandleListeners","nextColumn","leftColW","rightColW","minWidth","getMinWidth","newLeftW","newRightW","colW","newW","onHandleMouseDown","removeEventListeners","tableColumnEl","headerColumnEl","getElPaddings","Table_Column","Table_makeHTMLElement","Table_fireEvent","Table_getStyle","Table_defined","Table_Table","onTBodyFocus","onResize","scrollable","onScroll","presentationTable","dgOptions","virtualRows","initialContainerHeight","resizeObserver","ResizeObserver","observe","setTbodyMinHeight","loadColumns","minHeight","reflowColumns","scrollToRow","rowClass","firstRowTop","querySelectorAll","ratio","disconnect","getStateMeta","columnWidths","applyStateMeta","meta","widths","ChainModifier_merge","ChainModifier","chain","optionsChain","clear","modifiers","reverse","SortModifier_merge","SortModifier","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","rowReference","originalIndexes","Querying_SortingController","shouldBeUpdated","createModifier","getSortingOptions","foundColumnId","columnIDs","foundOrder","columnOptions","loadOptions","stateFromOptions","initialSorting","Querying_QueryingController","force","modifyData","chainModifier","dataTableCopy","Grid_makeHTMLElement","Grid_setHTMLContent","Grid_fireEvent","Grid_extend","Grid_getStyle","Grid_merge","Grid_pick","Grid","renderTo","async","afterLoadCallback","userOptions","loadUserOptions","Core_Utilities","initContainers","initAccessibility","loadDataTable","renderViewport","grids","getElementById","HTML_AST","newOptions","oneToOne","loadColumnOptionsOneToOne","loadColumnOptions","columnOptionsArray","columnOptionsObj","newColumnOptions","overwrite","indexInPrevOptions","findIndex","prev","prevOptions","prevColumnOptions","resultOptions","newDataTable","updateColumn","firstRowIndex","syncRow","syncColumn","syncedColumnId","renderCaption","captionOptions","captionText","renderDescription","descriptionOptions","descriptionText","resetContentWrapper","viewportMeta","getEnabledColumnIDs","renderTable","renderNoData","headerColumns","columnsIncluded","included","onlyEnabledColumns","columnIds","dgIndex","dg","showLoading","hideLoading","getData","json","getJSON","onlyUserOptions","getOptionsJSON","Data_DataPoolDefaults","connectors","DataPool","waiting","getConnector","connectorId","waitingList","connectorOptions","getConnectorOptions","loadConnector","getConnectorIds","connectorIds","getConnectorTable","isNewConnector","ConnectorClass","setConnectorOptions","instances","Credits_makeHTMLElement","Credits","containerElement","textElement","getHeight","CreditsLiteComposition_addEvent","CreditsLiteComposition_pushUnique","initCredits","compose","GridClass","Credits_CreditsLiteComposition","CSVConverter_merge","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","csvRows","rowArray","columnDataType","dataType","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","token","actualColumn","read","pushType","initialValue","points","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","CSVConnector_merge","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","GoogleSheetsConverter_merge","GoogleSheetsConverter_uniqueKey","GoogleSheetsConverter","parseOptions","values","GoogleSheetsConnector_merge","GoogleSheetsConnector_pick","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","URL","canParse","status","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","pathname","searchParams","HTMLTableConverter_merge","HTMLTableConverter","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","tableCaption","classes","attrs","topheaders","subheaders","useRowspanHeaders","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","HTMLElement","getElementsByTagName","rowsCount","itemsLength","columnsInRow","columnsInRowLength","relativeColumnIndex","HTMLTableConnector_win","HTMLTableConnector_merge","HTMLTableConnector","tableID","JSONConverter_error","JSONConverter_isArray","JSONConverter_merge","JSONConverter_objectEach","JSONConverter","orientation","arrayWithPath","acc","JSONConnector_merge","JSONConnector","dataUrl","InvertModifier_merge","InvertModifier","modifiedRowIndex","modifiedColumnNames","reset","j2","columnNamesColumn","RangeModifier_merge","RangeModifier","indexes","additive","ranges","rangeColumn","minValue","maxValue","G","Core_Grid","Templating","Table"],"mappings":"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I,CAACO,EAAIsX,IAAI,CAACO,UAAU,CAAE,AAACC,GAAcP,EAAiBO,EAAW1B,IACzEA,CACX,CACJ,CAqBArB,EAAII,iBAAiB,CAAG,CACpB,MACA,gBACA,mBACA,gBACA,gBACA,cACA,aACA,kBACA,YACA,eACA,gBACA,uBACA,gBACA,QACA,YACA,QACA,UACA,KACA,KACA,IACA,KACA,KACA,WACA,OACA,cACA,cACA,gBACA,SACA,OACA,KACA,KACA,MACA,eACA,cACA,SACA,UACA,WACA,SACA,UACA,cACA,eACA,eACA,IACA,SACA,OACA,OACA,OACA,QACA,QACA,MACA,cACA,eACA,SACA,iBACA,eACA,QACA,cACA,SACA,UACA,UACA,SACA,WACA,aACA,cACA,aACA,aACA,QACA,OACA,SACA,QACA,IACA,KACA,KACA,aACA,IACA,KACA,KACA,SACH,CAgBDJ,EAAIK,iBAAiB,CAAG,CACpB,WACA,UACA,UACA,IACA,MACA,KACA,IACH,CAeDL,EAAIgC,WAAW,CAAG,CACd,IACA,OACA,IACA,KACA,SACA,UACA,SACA,WACA,OACA,KACA,OACA,MACA,KACA,KACA,KACA,sBACA,cACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,eACA,WACA,UACA,cACA,SACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,KACA,iBACA,SACA,KACA,IACA,OACA,UACA,MACA,OACA,QACA,OACA,OACA,SACA,QACA,MACA,MACA,MACA,QACA,OACA,WACA,QACA,QACA,QACA,QACA,KACA,KACA,KACA,IACA,KACA,QACH,CACDhC,EAAID,SAAS,CAAGA,EA4BhBC,EAAI+B,mBAAmB,CAAG,CAAA,EA+0C1B,GAAM,CAAEzW,SAAAA,CAAQ,CAAEN,IAAKgY,CAAY,CAAE,CAAG1V,EAElC,CAAEsC,QAASqT,CAAgB,CAAE7Z,MAAO8Z,CAAc,CAAE3S,OAAQ4S,CAAe,CAAEtV,SAAUuV,EAAiB,CAAEnU,SAAUoU,EAAiB,CAAEvU,SAAUwU,EAAiB,CAAEzI,MAAO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"}